
WIFI-simpleGet-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000dcfc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040dcfc  0040dcfc  0001dcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  0040dd04  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c210  204009d8  0040e6dc  000209d8  2**2
                  ALLOC
  4 .stack        00002000  2040cbe8  0041a8ec  000209d8  2**0
                  ALLOC
  5 .heap         00000200  2040ebe8  0041c8ec  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   00038e9b  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000723c  00000000  00000000  000598fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001670  00000000  00000000  00060b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028eac  00000000  00000000  000621a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001de9a  00000000  00000000  0008b052  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009b5a5  00000000  00000000  000a8eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000138ee  00000000  00000000  00144491  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001990  00000000  00000000  00157d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004ec0  00000000  00000000  00159710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 eb 40 20 91 59 40 00 8f 59 40 00 8f 59 40 00     ..@ .Y@..Y@..Y@.
  400010:	8f 59 40 00 8f 59 40 00 8f 59 40 00 00 00 00 00     .Y@..Y@..Y@.....
	...
  40002c:	41 07 40 00 8f 59 40 00 00 00 00 00 e1 07 40 00     A.@..Y@.......@.
  40003c:	49 08 40 00 8f 59 40 00 8f 59 40 00 49 60 40 00     I.@..Y@..Y@.I`@.
  40004c:	8f 59 40 00 8f 59 40 00 8f 59 40 00 8f 59 40 00     .Y@..Y@..Y@..Y@.
  40005c:	8f 59 40 00 8f 59 40 00 00 00 00 00 a9 54 40 00     .Y@..Y@......T@.
  40006c:	bd 54 40 00 d1 54 40 00 8f 59 40 00 8f 59 40 00     .T@..T@..Y@..Y@.
  40007c:	8f 59 40 00 e5 54 40 00 f9 54 40 00 8f 59 40 00     .Y@..T@..T@..Y@.
  40008c:	8f 59 40 00 8f 59 40 00 8f 59 40 00 8f 59 40 00     .Y@..Y@..Y@..Y@.
  40009c:	8f 59 40 00 8f 59 40 00 8f 59 40 00 8f 59 40 00     .Y@..Y@..Y@..Y@.
  4000ac:	8f 59 40 00 8f 59 40 00 21 04 40 00 8f 59 40 00     .Y@..Y@.!.@..Y@.
  4000bc:	8f 59 40 00 8f 59 40 00 8f 59 40 00 8f 59 40 00     .Y@..Y@..Y@..Y@.
  4000cc:	8f 59 40 00 00 00 00 00 8f 59 40 00 00 00 00 00     .Y@......Y@.....
  4000dc:	8f 59 40 00 35 04 40 00 8f 59 40 00 8f 59 40 00     .Y@.5.@..Y@..Y@.
  4000ec:	8f 59 40 00 8f 59 40 00 8f 59 40 00 8f 59 40 00     .Y@..Y@..Y@..Y@.
  4000fc:	8f 59 40 00 8f 59 40 00 8f 59 40 00 8f 59 40 00     .Y@..Y@..Y@..Y@.
  40010c:	8f 59 40 00 8f 59 40 00 00 00 00 00 00 00 00 00     .Y@..Y@.........
  40011c:	00 00 00 00 8f 59 40 00 8f 59 40 00 8f 59 40 00     .....Y@..Y@..Y@.
  40012c:	8f 59 40 00 8f 59 40 00 00 00 00 00 8f 59 40 00     .Y@..Y@......Y@.
  40013c:	8f 59 40 00                                         .Y@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d8 	.word	0x204009d8
  40015c:	00000000 	.word	0x00000000
  400160:	0040dd04 	.word	0x0040dd04

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040dd04 	.word	0x0040dd04
  4001a0:	204009dc 	.word	0x204009dc
  4001a4:	0040dd04 	.word	0x0040dd04
  4001a8:	00000000 	.word	0x00000000

004001ac <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
  4001ae:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001b4:	4013      	ands	r3, r2
  4001b6:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001b8:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001ba:	4e1c      	ldr	r6, [pc, #112]	; (40022c <afec_process_callback+0x80>)
  4001bc:	4d1c      	ldr	r5, [pc, #112]	; (400230 <afec_process_callback+0x84>)
  4001be:	42a8      	cmp	r0, r5
  4001c0:	bf14      	ite	ne
  4001c2:	2000      	movne	r0, #0
  4001c4:	2001      	moveq	r0, #1
  4001c6:	0105      	lsls	r5, r0, #4
  4001c8:	e00b      	b.n	4001e2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001ca:	2c0e      	cmp	r4, #14
  4001cc:	d81e      	bhi.n	40020c <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001ce:	9a01      	ldr	r2, [sp, #4]
  4001d0:	f104 010c 	add.w	r1, r4, #12
  4001d4:	2301      	movs	r3, #1
  4001d6:	408b      	lsls	r3, r1
  4001d8:	4213      	tst	r3, r2
  4001da:	d110      	bne.n	4001fe <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001dc:	3401      	adds	r4, #1
  4001de:	2c10      	cmp	r4, #16
  4001e0:	d022      	beq.n	400228 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4001e2:	2c0b      	cmp	r4, #11
  4001e4:	d8f1      	bhi.n	4001ca <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4001e6:	9a01      	ldr	r2, [sp, #4]
  4001e8:	2301      	movs	r3, #1
  4001ea:	40a3      	lsls	r3, r4
  4001ec:	4213      	tst	r3, r2
  4001ee:	d0f5      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001f0:	192b      	adds	r3, r5, r4
  4001f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4001f6:	2b00      	cmp	r3, #0
  4001f8:	d0f0      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4001fa:	4798      	blx	r3
  4001fc:	e7ee      	b.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001fe:	192b      	adds	r3, r5, r4
  400200:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400204:	2b00      	cmp	r3, #0
  400206:	d0e9      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400208:	4798      	blx	r3
  40020a:	e7e7      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40020c:	9a01      	ldr	r2, [sp, #4]
  40020e:	f104 010f 	add.w	r1, r4, #15
  400212:	2301      	movs	r3, #1
  400214:	408b      	lsls	r3, r1
  400216:	4213      	tst	r3, r2
  400218:	d0e0      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40021a:	192b      	adds	r3, r5, r4
  40021c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400220:	2b00      	cmp	r3, #0
  400222:	d0db      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400224:	4798      	blx	r3
  400226:	e7d9      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400228:	b002      	add	sp, #8
  40022a:	bd70      	pop	{r4, r5, r6, pc}
  40022c:	2040c9ac 	.word	0x2040c9ac
  400230:	40064000 	.word	0x40064000

00400234 <afec_ch_set_config>:
{
  400234:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400236:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400238:	2301      	movs	r3, #1
  40023a:	408b      	lsls	r3, r1
  40023c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400240:	7815      	ldrb	r5, [r2, #0]
  400242:	2d00      	cmp	r5, #0
  400244:	bf08      	it	eq
  400246:	2300      	moveq	r3, #0
  400248:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40024a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40024c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40024e:	004b      	lsls	r3, r1, #1
  400250:	2103      	movs	r1, #3
  400252:	4099      	lsls	r1, r3
  400254:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400258:	7851      	ldrb	r1, [r2, #1]
  40025a:	4099      	lsls	r1, r3
  40025c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40025e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400260:	bc30      	pop	{r4, r5}
  400262:	4770      	bx	lr

00400264 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400264:	784b      	ldrb	r3, [r1, #1]
  400266:	780a      	ldrb	r2, [r1, #0]
  400268:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  40026a:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  40026c:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  40026e:	884b      	ldrh	r3, [r1, #2]
  400270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400274:	6743      	str	r3, [r0, #116]	; 0x74
  400276:	4770      	bx	lr

00400278 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400278:	2200      	movs	r2, #0
  40027a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  40027c:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <afec_get_config_defaults+0x28>)
  40027e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400280:	4b08      	ldr	r3, [pc, #32]	; (4002a4 <afec_get_config_defaults+0x2c>)
  400282:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400288:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40028a:	2302      	movs	r3, #2
  40028c:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40028e:	2301      	movs	r3, #1
  400290:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400292:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400294:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400296:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400298:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40029a:	7583      	strb	r3, [r0, #22]
  40029c:	4770      	bx	lr
  40029e:	bf00      	nop
  4002a0:	11e1a300 	.word	0x11e1a300
  4002a4:	005b8d80 	.word	0x005b8d80

004002a8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002a8:	2300      	movs	r3, #0
  4002aa:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002ac:	2301      	movs	r3, #1
  4002ae:	7043      	strb	r3, [r0, #1]
  4002b0:	4770      	bx	lr

004002b2 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4002b2:	2300      	movs	r3, #0
  4002b4:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4002b6:	2320      	movs	r3, #32
  4002b8:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4002ba:	23ff      	movs	r3, #255	; 0xff
  4002bc:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4002be:	f640 73ff 	movw	r3, #4095	; 0xfff
  4002c2:	8083      	strh	r3, [r0, #4]
  4002c4:	4770      	bx	lr
	...

004002c8 <afec_init>:
	return afec->AFEC_ISR;
  4002c8:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002ca:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002ce:	d001      	beq.n	4002d4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002d0:	2019      	movs	r0, #25
  4002d2:	4770      	bx	lr
{
  4002d4:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002d6:	2301      	movs	r3, #1
  4002d8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002da:	7ccb      	ldrb	r3, [r1, #19]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf18      	it	ne
  4002e0:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002e4:	684b      	ldr	r3, [r1, #4]
  4002e6:	688c      	ldr	r4, [r1, #8]
  4002e8:	fbb3 f3f4 	udiv	r3, r3, r4
  4002ec:	3b01      	subs	r3, #1
  4002ee:	021b      	lsls	r3, r3, #8
  4002f0:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002f2:	68cc      	ldr	r4, [r1, #12]
  4002f4:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4002f8:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002fa:	7c0c      	ldrb	r4, [r1, #16]
  4002fc:	0624      	lsls	r4, r4, #24
  4002fe:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400304:	7c4c      	ldrb	r4, [r1, #17]
  400306:	0724      	lsls	r4, r4, #28
  400308:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40030c:	4323      	orrs	r3, r4
  40030e:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400310:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400312:	7d0b      	ldrb	r3, [r1, #20]
  400314:	2b00      	cmp	r3, #0
  400316:	bf14      	ite	ne
  400318:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40031c:	2300      	moveq	r3, #0
  40031e:	680a      	ldr	r2, [r1, #0]
  400320:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400322:	7d4a      	ldrb	r2, [r1, #21]
  400324:	2a00      	cmp	r2, #0
  400326:	bf14      	ite	ne
  400328:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40032c:	2200      	moveq	r2, #0
			(config->resolution) |
  40032e:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400330:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400332:	7d8b      	ldrb	r3, [r1, #22]
  400334:	021b      	lsls	r3, r3, #8
  400336:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40033a:	f043 030c 	orr.w	r3, r3, #12
  40033e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400342:	4b0f      	ldr	r3, [pc, #60]	; (400380 <afec_init+0xb8>)
  400344:	4298      	cmp	r0, r3
  400346:	d006      	beq.n	400356 <afec_init+0x8e>
	if(afec == AFEC1) {
  400348:	4b0e      	ldr	r3, [pc, #56]	; (400384 <afec_init+0xbc>)
  40034a:	4298      	cmp	r0, r3
  40034c:	d00d      	beq.n	40036a <afec_init+0xa2>
	return STATUS_OK;
  40034e:	2000      	movs	r0, #0
}
  400350:	f85d 4b04 	ldr.w	r4, [sp], #4
  400354:	4770      	bx	lr
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <afec_init+0xc0>)
  400358:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  40035c:	2200      	movs	r2, #0
  40035e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400362:	428b      	cmp	r3, r1
  400364:	d1fb      	bne.n	40035e <afec_init+0x96>
	return STATUS_OK;
  400366:	2000      	movs	r0, #0
  400368:	e7f2      	b.n	400350 <afec_init+0x88>
  40036a:	4b08      	ldr	r3, [pc, #32]	; (40038c <afec_init+0xc4>)
  40036c:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400370:	2200      	movs	r2, #0
  400372:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400376:	428b      	cmp	r3, r1
  400378:	d1fb      	bne.n	400372 <afec_init+0xaa>
	return STATUS_OK;
  40037a:	2000      	movs	r0, #0
  40037c:	e7e8      	b.n	400350 <afec_init+0x88>
  40037e:	bf00      	nop
  400380:	4003c000 	.word	0x4003c000
  400384:	40064000 	.word	0x40064000
  400388:	2040c9a8 	.word	0x2040c9a8
  40038c:	2040c9ec 	.word	0x2040c9ec

00400390 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400390:	4b0c      	ldr	r3, [pc, #48]	; (4003c4 <afec_enable_interrupt+0x34>)
  400392:	4299      	cmp	r1, r3
  400394:	d007      	beq.n	4003a6 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400396:	290b      	cmp	r1, #11
  400398:	d80b      	bhi.n	4003b2 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40039a:	d006      	beq.n	4003aa <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  40039c:	2301      	movs	r3, #1
  40039e:	fa03 f101 	lsl.w	r1, r3, r1
  4003a2:	6241      	str	r1, [r0, #36]	; 0x24
  4003a4:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003a6:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003a8:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ae:	6243      	str	r3, [r0, #36]	; 0x24
  4003b0:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003b2:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003b4:	bf94      	ite	ls
  4003b6:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003b8:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003ba:	2301      	movs	r3, #1
  4003bc:	fa03 f101 	lsl.w	r1, r3, r1
  4003c0:	6241      	str	r1, [r0, #36]	; 0x24
  4003c2:	4770      	bx	lr
  4003c4:	47000fff 	.word	0x47000fff

004003c8 <afec_set_callback>:
{
  4003c8:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003ca:	4c11      	ldr	r4, [pc, #68]	; (400410 <afec_set_callback+0x48>)
  4003cc:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003ce:	bf0c      	ite	eq
  4003d0:	2410      	moveq	r4, #16
  4003d2:	2400      	movne	r4, #0
  4003d4:	440c      	add	r4, r1
  4003d6:	4d0f      	ldr	r5, [pc, #60]	; (400414 <afec_set_callback+0x4c>)
  4003d8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4003dc:	d10a      	bne.n	4003f4 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003de:	4a0e      	ldr	r2, [pc, #56]	; (400418 <afec_set_callback+0x50>)
  4003e0:	f44f 7480 	mov.w	r4, #256	; 0x100
  4003e4:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003e8:	015b      	lsls	r3, r3, #5
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003f0:	6054      	str	r4, [r2, #4]
  4003f2:	e009      	b.n	400408 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003f4:	4a08      	ldr	r2, [pc, #32]	; (400418 <afec_set_callback+0x50>)
  4003f6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4003fa:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003fe:	015b      	lsls	r3, r3, #5
  400400:	b2db      	uxtb	r3, r3
  400402:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400406:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400408:	4b04      	ldr	r3, [pc, #16]	; (40041c <afec_set_callback+0x54>)
  40040a:	4798      	blx	r3
  40040c:	bd38      	pop	{r3, r4, r5, pc}
  40040e:	bf00      	nop
  400410:	40064000 	.word	0x40064000
  400414:	2040c9ac 	.word	0x2040c9ac
  400418:	e000e100 	.word	0xe000e100
  40041c:	00400391 	.word	0x00400391

00400420 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400420:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400422:	4802      	ldr	r0, [pc, #8]	; (40042c <AFEC0_Handler+0xc>)
  400424:	4b02      	ldr	r3, [pc, #8]	; (400430 <AFEC0_Handler+0x10>)
  400426:	4798      	blx	r3
  400428:	bd08      	pop	{r3, pc}
  40042a:	bf00      	nop
  40042c:	4003c000 	.word	0x4003c000
  400430:	004001ad 	.word	0x004001ad

00400434 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400434:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400436:	4802      	ldr	r0, [pc, #8]	; (400440 <AFEC1_Handler+0xc>)
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <AFEC1_Handler+0x10>)
  40043a:	4798      	blx	r3
  40043c:	bd08      	pop	{r3, pc}
  40043e:	bf00      	nop
  400440:	40064000 	.word	0x40064000
  400444:	004001ad 	.word	0x004001ad

00400448 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400448:	b500      	push	{lr}
  40044a:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40044c:	4b13      	ldr	r3, [pc, #76]	; (40049c <afec_enable+0x54>)
  40044e:	4298      	cmp	r0, r3
  400450:	bf0c      	ite	eq
  400452:	2028      	moveq	r0, #40	; 0x28
  400454:	201d      	movne	r0, #29
  400456:	4b12      	ldr	r3, [pc, #72]	; (4004a0 <afec_enable+0x58>)
  400458:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40045a:	4b12      	ldr	r3, [pc, #72]	; (4004a4 <afec_enable+0x5c>)
  40045c:	789b      	ldrb	r3, [r3, #2]
  40045e:	2bff      	cmp	r3, #255	; 0xff
  400460:	d01a      	beq.n	400498 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400462:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400466:	fab3 f383 	clz	r3, r3
  40046a:	095b      	lsrs	r3, r3, #5
  40046c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40046e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400470:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400474:	2200      	movs	r2, #0
  400476:	4b0c      	ldr	r3, [pc, #48]	; (4004a8 <afec_enable+0x60>)
  400478:	701a      	strb	r2, [r3, #0]
	return flags;
  40047a:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40047c:	4a09      	ldr	r2, [pc, #36]	; (4004a4 <afec_enable+0x5c>)
  40047e:	7893      	ldrb	r3, [r2, #2]
  400480:	3301      	adds	r3, #1
  400482:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400484:	b129      	cbz	r1, 400492 <afec_enable+0x4a>
		cpu_irq_enable();
  400486:	2201      	movs	r2, #1
  400488:	4b07      	ldr	r3, [pc, #28]	; (4004a8 <afec_enable+0x60>)
  40048a:	701a      	strb	r2, [r3, #0]
  40048c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400490:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400492:	b003      	add	sp, #12
  400494:	f85d fb04 	ldr.w	pc, [sp], #4
  400498:	e7fe      	b.n	400498 <afec_enable+0x50>
  40049a:	bf00      	nop
  40049c:	40064000 	.word	0x40064000
  4004a0:	004056b1 	.word	0x004056b1
  4004a4:	2040c9a4 	.word	0x2040c9a4
  4004a8:	20400018 	.word	0x20400018

004004ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4004ac:	b921      	cbnz	r1, 4004b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4004ae:	6843      	ldr	r3, [r0, #4]
  4004b0:	f023 0301 	bic.w	r3, r3, #1
  4004b4:	6043      	str	r3, [r0, #4]
  4004b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4004b8:	6843      	ldr	r3, [r0, #4]
  4004ba:	f043 0301 	orr.w	r3, r3, #1
  4004be:	6043      	str	r3, [r0, #4]
  4004c0:	4770      	bx	lr

004004c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4004c2:	6201      	str	r1, [r0, #32]
  4004c4:	4770      	bx	lr
	...

004004c8 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4004c8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4004ca:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  4004cc:	f014 0f01 	tst.w	r4, #1
  4004d0:	d005      	beq.n	4004de <rtc_set_time+0x16>
  4004d2:	290c      	cmp	r1, #12
  4004d4:	d903      	bls.n	4004de <rtc_set_time+0x16>
			ul_hour -= 12;
  4004d6:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  4004d8:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  4004dc:	e000      	b.n	4004e0 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4004de:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4004e0:	4c1c      	ldr	r4, [pc, #112]	; (400554 <rtc_set_time+0x8c>)
  4004e2:	fba4 5603 	umull	r5, r6, r4, r3
  4004e6:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4004e8:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4004ec:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4004f0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4004f4:	fba4 6502 	umull	r6, r5, r4, r2
  4004f8:	08ed      	lsrs	r5, r5, #3
  4004fa:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4004fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400502:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  400506:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  40050a:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40050c:	fba4 4201 	umull	r4, r2, r4, r1
  400510:	08d2      	lsrs	r2, r2, #3
  400512:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  400516:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40051a:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  40051e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400522:	6983      	ldr	r3, [r0, #24]
  400524:	f013 0f04 	tst.w	r3, #4
  400528:	d0fb      	beq.n	400522 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  40052a:	6803      	ldr	r3, [r0, #0]
  40052c:	f043 0301 	orr.w	r3, r3, #1
  400530:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400532:	6983      	ldr	r3, [r0, #24]
  400534:	f013 0f01 	tst.w	r3, #1
  400538:	d0fb      	beq.n	400532 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40053a:	2301      	movs	r3, #1
  40053c:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  40053e:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400540:	6803      	ldr	r3, [r0, #0]
  400542:	f023 0301 	bic.w	r3, r3, #1
  400546:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400548:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40054a:	f000 0001 	and.w	r0, r0, #1
  40054e:	bcf0      	pop	{r4, r5, r6, r7}
  400550:	4770      	bx	lr
  400552:	bf00      	nop
  400554:	cccccccd 	.word	0xcccccccd

00400558 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400558:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40055a:	4d2a      	ldr	r5, [pc, #168]	; (400604 <rtc_set_date+0xac>)
  40055c:	fba5 4603 	umull	r4, r6, r5, r3
  400560:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  400562:	9c03      	ldr	r4, [sp, #12]
  400564:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400566:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40056a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40056e:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400572:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400576:	fba5 6402 	umull	r6, r4, r5, r2
  40057a:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40057c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400580:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400584:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400588:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  40058c:	4b1e      	ldr	r3, [pc, #120]	; (400608 <rtc_set_date+0xb0>)
  40058e:	fba3 4301 	umull	r4, r3, r3, r1
  400592:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400594:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400598:	4b1c      	ldr	r3, [pc, #112]	; (40060c <rtc_set_date+0xb4>)
  40059a:	fba3 4301 	umull	r4, r3, r3, r1
  40059e:	095b      	lsrs	r3, r3, #5
  4005a0:	fba5 6403 	umull	r6, r4, r5, r3
  4005a4:	08e4      	lsrs	r4, r4, #3
  4005a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4005aa:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4005ae:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  4005b0:	fba5 4301 	umull	r4, r3, r5, r1
  4005b4:	08db      	lsrs	r3, r3, #3
  4005b6:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  4005ba:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4005be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  4005c2:	fba5 1503 	umull	r1, r5, r5, r3
  4005c6:	08ed      	lsrs	r5, r5, #3
  4005c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4005cc:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4005d0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4005d4:	6983      	ldr	r3, [r0, #24]
  4005d6:	f013 0f04 	tst.w	r3, #4
  4005da:	d0fb      	beq.n	4005d4 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4005dc:	6803      	ldr	r3, [r0, #0]
  4005de:	f043 0302 	orr.w	r3, r3, #2
  4005e2:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4005e4:	6983      	ldr	r3, [r0, #24]
  4005e6:	f013 0f01 	tst.w	r3, #1
  4005ea:	d0fb      	beq.n	4005e4 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4005ec:	2301      	movs	r3, #1
  4005ee:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4005f0:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4005f2:	6803      	ldr	r3, [r0, #0]
  4005f4:	f023 0302 	bic.w	r3, r3, #2
  4005f8:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4005fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4005fc:	f000 0002 	and.w	r0, r0, #2
  400600:	bc70      	pop	{r4, r5, r6}
  400602:	4770      	bx	lr
  400604:	cccccccd 	.word	0xcccccccd
  400608:	10624dd3 	.word	0x10624dd3
  40060c:	51eb851f 	.word	0x51eb851f

00400610 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400610:	6980      	ldr	r0, [r0, #24]
}
  400612:	4770      	bx	lr

00400614 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400614:	61c1      	str	r1, [r0, #28]
  400616:	4770      	bx	lr

00400618 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400618:	f100 0308 	add.w	r3, r0, #8
  40061c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40061e:	f04f 32ff 	mov.w	r2, #4294967295
  400622:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400624:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400626:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400628:	2300      	movs	r3, #0
  40062a:	6003      	str	r3, [r0, #0]
  40062c:	4770      	bx	lr

0040062e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40062e:	2300      	movs	r3, #0
  400630:	6103      	str	r3, [r0, #16]
  400632:	4770      	bx	lr

00400634 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400634:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400636:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400638:	689a      	ldr	r2, [r3, #8]
  40063a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40063c:	689a      	ldr	r2, [r3, #8]
  40063e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400640:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400642:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400644:	6803      	ldr	r3, [r0, #0]
  400646:	3301      	adds	r3, #1
  400648:	6003      	str	r3, [r0, #0]
  40064a:	4770      	bx	lr

0040064c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40064c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40064e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400650:	f1b5 3fff 	cmp.w	r5, #4294967295
  400654:	d002      	beq.n	40065c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400656:	f100 0208 	add.w	r2, r0, #8
  40065a:	e002      	b.n	400662 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  40065c:	6902      	ldr	r2, [r0, #16]
  40065e:	e004      	b.n	40066a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400660:	461a      	mov	r2, r3
  400662:	6853      	ldr	r3, [r2, #4]
  400664:	681c      	ldr	r4, [r3, #0]
  400666:	42a5      	cmp	r5, r4
  400668:	d2fa      	bcs.n	400660 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40066a:	6853      	ldr	r3, [r2, #4]
  40066c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40066e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400670:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400672:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400674:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400676:	6803      	ldr	r3, [r0, #0]
  400678:	3301      	adds	r3, #1
  40067a:	6003      	str	r3, [r0, #0]
}
  40067c:	bc30      	pop	{r4, r5}
  40067e:	4770      	bx	lr

00400680 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400680:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400682:	6842      	ldr	r2, [r0, #4]
  400684:	6881      	ldr	r1, [r0, #8]
  400686:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400688:	6882      	ldr	r2, [r0, #8]
  40068a:	6841      	ldr	r1, [r0, #4]
  40068c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40068e:	685a      	ldr	r2, [r3, #4]
  400690:	4290      	cmp	r0, r2
  400692:	d005      	beq.n	4006a0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400694:	2200      	movs	r2, #0
  400696:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400698:	6818      	ldr	r0, [r3, #0]
  40069a:	3801      	subs	r0, #1
  40069c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40069e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4006a0:	6882      	ldr	r2, [r0, #8]
  4006a2:	605a      	str	r2, [r3, #4]
  4006a4:	e7f6      	b.n	400694 <uxListRemove+0x14>
	...

004006a8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4006a8:	4b0d      	ldr	r3, [pc, #52]	; (4006e0 <prvTaskExitError+0x38>)
  4006aa:	681b      	ldr	r3, [r3, #0]
  4006ac:	f1b3 3fff 	cmp.w	r3, #4294967295
  4006b0:	d00a      	beq.n	4006c8 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4006b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4006b6:	b672      	cpsid	i
  4006b8:	f383 8811 	msr	BASEPRI, r3
  4006bc:	f3bf 8f6f 	isb	sy
  4006c0:	f3bf 8f4f 	dsb	sy
  4006c4:	b662      	cpsie	i
  4006c6:	e7fe      	b.n	4006c6 <prvTaskExitError+0x1e>
  4006c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4006cc:	b672      	cpsid	i
  4006ce:	f383 8811 	msr	BASEPRI, r3
  4006d2:	f3bf 8f6f 	isb	sy
  4006d6:	f3bf 8f4f 	dsb	sy
  4006da:	b662      	cpsie	i
  4006dc:	e7fe      	b.n	4006dc <prvTaskExitError+0x34>
  4006de:	bf00      	nop
  4006e0:	2040000c 	.word	0x2040000c

004006e4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4006e4:	4806      	ldr	r0, [pc, #24]	; (400700 <prvPortStartFirstTask+0x1c>)
  4006e6:	6800      	ldr	r0, [r0, #0]
  4006e8:	6800      	ldr	r0, [r0, #0]
  4006ea:	f380 8808 	msr	MSP, r0
  4006ee:	b662      	cpsie	i
  4006f0:	b661      	cpsie	f
  4006f2:	f3bf 8f4f 	dsb	sy
  4006f6:	f3bf 8f6f 	isb	sy
  4006fa:	df00      	svc	0
  4006fc:	bf00      	nop
  4006fe:	0000      	.short	0x0000
  400700:	e000ed08 	.word	0xe000ed08

00400704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400714 <vPortEnableVFP+0x10>
  400708:	6801      	ldr	r1, [r0, #0]
  40070a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40070e:	6001      	str	r1, [r0, #0]
  400710:	4770      	bx	lr
  400712:	0000      	.short	0x0000
  400714:	e000ed88 	.word	0xe000ed88

00400718 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40071c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400720:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400724:	4b05      	ldr	r3, [pc, #20]	; (40073c <pxPortInitialiseStack+0x24>)
  400726:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40072a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40072e:	f06f 0302 	mvn.w	r3, #2
  400732:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400736:	3844      	subs	r0, #68	; 0x44
  400738:	4770      	bx	lr
  40073a:	bf00      	nop
  40073c:	004006a9 	.word	0x004006a9

00400740 <SVC_Handler>:
	__asm volatile (
  400740:	4b06      	ldr	r3, [pc, #24]	; (40075c <pxCurrentTCBConst2>)
  400742:	6819      	ldr	r1, [r3, #0]
  400744:	6808      	ldr	r0, [r1, #0]
  400746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40074a:	f380 8809 	msr	PSP, r0
  40074e:	f3bf 8f6f 	isb	sy
  400752:	f04f 0000 	mov.w	r0, #0
  400756:	f380 8811 	msr	BASEPRI, r0
  40075a:	4770      	bx	lr

0040075c <pxCurrentTCBConst2>:
  40075c:	2040c204 	.word	0x2040c204
  400760:	4770      	bx	lr
  400762:	bf00      	nop

00400764 <vPortEnterCritical>:
  400764:	f04f 0380 	mov.w	r3, #128	; 0x80
  400768:	b672      	cpsid	i
  40076a:	f383 8811 	msr	BASEPRI, r3
  40076e:	f3bf 8f6f 	isb	sy
  400772:	f3bf 8f4f 	dsb	sy
  400776:	b662      	cpsie	i
	uxCriticalNesting++;
  400778:	4a0b      	ldr	r2, [pc, #44]	; (4007a8 <vPortEnterCritical+0x44>)
  40077a:	6813      	ldr	r3, [r2, #0]
  40077c:	3301      	adds	r3, #1
  40077e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400780:	2b01      	cmp	r3, #1
  400782:	d10f      	bne.n	4007a4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400784:	4b09      	ldr	r3, [pc, #36]	; (4007ac <vPortEnterCritical+0x48>)
  400786:	681b      	ldr	r3, [r3, #0]
  400788:	f013 0fff 	tst.w	r3, #255	; 0xff
  40078c:	d00a      	beq.n	4007a4 <vPortEnterCritical+0x40>
  40078e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400792:	b672      	cpsid	i
  400794:	f383 8811 	msr	BASEPRI, r3
  400798:	f3bf 8f6f 	isb	sy
  40079c:	f3bf 8f4f 	dsb	sy
  4007a0:	b662      	cpsie	i
  4007a2:	e7fe      	b.n	4007a2 <vPortEnterCritical+0x3e>
  4007a4:	4770      	bx	lr
  4007a6:	bf00      	nop
  4007a8:	2040000c 	.word	0x2040000c
  4007ac:	e000ed04 	.word	0xe000ed04

004007b0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4007b0:	4b0a      	ldr	r3, [pc, #40]	; (4007dc <vPortExitCritical+0x2c>)
  4007b2:	681b      	ldr	r3, [r3, #0]
  4007b4:	b953      	cbnz	r3, 4007cc <vPortExitCritical+0x1c>
  4007b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4007ba:	b672      	cpsid	i
  4007bc:	f383 8811 	msr	BASEPRI, r3
  4007c0:	f3bf 8f6f 	isb	sy
  4007c4:	f3bf 8f4f 	dsb	sy
  4007c8:	b662      	cpsie	i
  4007ca:	e7fe      	b.n	4007ca <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4007cc:	3b01      	subs	r3, #1
  4007ce:	4a03      	ldr	r2, [pc, #12]	; (4007dc <vPortExitCritical+0x2c>)
  4007d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4007d2:	b90b      	cbnz	r3, 4007d8 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4007d4:	f383 8811 	msr	BASEPRI, r3
  4007d8:	4770      	bx	lr
  4007da:	bf00      	nop
  4007dc:	2040000c 	.word	0x2040000c

004007e0 <PendSV_Handler>:
	__asm volatile
  4007e0:	f3ef 8009 	mrs	r0, PSP
  4007e4:	f3bf 8f6f 	isb	sy
  4007e8:	4b15      	ldr	r3, [pc, #84]	; (400840 <pxCurrentTCBConst>)
  4007ea:	681a      	ldr	r2, [r3, #0]
  4007ec:	f01e 0f10 	tst.w	lr, #16
  4007f0:	bf08      	it	eq
  4007f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4007f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4007fa:	6010      	str	r0, [r2, #0]
  4007fc:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400800:	f04f 0080 	mov.w	r0, #128	; 0x80
  400804:	b672      	cpsid	i
  400806:	f380 8811 	msr	BASEPRI, r0
  40080a:	f3bf 8f4f 	dsb	sy
  40080e:	f3bf 8f6f 	isb	sy
  400812:	b662      	cpsie	i
  400814:	f001 f91a 	bl	401a4c <vTaskSwitchContext>
  400818:	f04f 0000 	mov.w	r0, #0
  40081c:	f380 8811 	msr	BASEPRI, r0
  400820:	bc08      	pop	{r3}
  400822:	6819      	ldr	r1, [r3, #0]
  400824:	6808      	ldr	r0, [r1, #0]
  400826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40082a:	f01e 0f10 	tst.w	lr, #16
  40082e:	bf08      	it	eq
  400830:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400834:	f380 8809 	msr	PSP, r0
  400838:	f3bf 8f6f 	isb	sy
  40083c:	4770      	bx	lr
  40083e:	bf00      	nop

00400840 <pxCurrentTCBConst>:
  400840:	2040c204 	.word	0x2040c204
  400844:	4770      	bx	lr
  400846:	bf00      	nop

00400848 <SysTick_Handler>:
{
  400848:	b508      	push	{r3, lr}
	__asm volatile
  40084a:	f3ef 8311 	mrs	r3, BASEPRI
  40084e:	f04f 0280 	mov.w	r2, #128	; 0x80
  400852:	b672      	cpsid	i
  400854:	f382 8811 	msr	BASEPRI, r2
  400858:	f3bf 8f6f 	isb	sy
  40085c:	f3bf 8f4f 	dsb	sy
  400860:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400862:	4b05      	ldr	r3, [pc, #20]	; (400878 <SysTick_Handler+0x30>)
  400864:	4798      	blx	r3
  400866:	b118      	cbz	r0, 400870 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40086c:	4b03      	ldr	r3, [pc, #12]	; (40087c <SysTick_Handler+0x34>)
  40086e:	601a      	str	r2, [r3, #0]
	__asm volatile
  400870:	2300      	movs	r3, #0
  400872:	f383 8811 	msr	BASEPRI, r3
  400876:	bd08      	pop	{r3, pc}
  400878:	004016b9 	.word	0x004016b9
  40087c:	e000ed04 	.word	0xe000ed04

00400880 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400880:	4a03      	ldr	r2, [pc, #12]	; (400890 <vPortSetupTimerInterrupt+0x10>)
  400882:	4b04      	ldr	r3, [pc, #16]	; (400894 <vPortSetupTimerInterrupt+0x14>)
  400884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400886:	2207      	movs	r2, #7
  400888:	3b04      	subs	r3, #4
  40088a:	601a      	str	r2, [r3, #0]
  40088c:	4770      	bx	lr
  40088e:	bf00      	nop
  400890:	000927bf 	.word	0x000927bf
  400894:	e000e014 	.word	0xe000e014

00400898 <xPortStartScheduler>:
{
  400898:	b500      	push	{lr}
  40089a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  40089c:	4b25      	ldr	r3, [pc, #148]	; (400934 <xPortStartScheduler+0x9c>)
  40089e:	781a      	ldrb	r2, [r3, #0]
  4008a0:	b2d2      	uxtb	r2, r2
  4008a2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4008a4:	22ff      	movs	r2, #255	; 0xff
  4008a6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4008a8:	781b      	ldrb	r3, [r3, #0]
  4008aa:	b2db      	uxtb	r3, r3
  4008ac:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4008b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4008b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4008b8:	4a1f      	ldr	r2, [pc, #124]	; (400938 <xPortStartScheduler+0xa0>)
  4008ba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4008bc:	2207      	movs	r2, #7
  4008be:	4b1f      	ldr	r3, [pc, #124]	; (40093c <xPortStartScheduler+0xa4>)
  4008c0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4008c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4008c6:	f013 0f80 	tst.w	r3, #128	; 0x80
  4008ca:	d010      	beq.n	4008ee <xPortStartScheduler+0x56>
  4008cc:	2206      	movs	r2, #6
  4008ce:	e000      	b.n	4008d2 <xPortStartScheduler+0x3a>
  4008d0:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4008d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4008d6:	005b      	lsls	r3, r3, #1
  4008d8:	b2db      	uxtb	r3, r3
  4008da:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4008de:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4008e2:	1e51      	subs	r1, r2, #1
  4008e4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4008e8:	d1f2      	bne.n	4008d0 <xPortStartScheduler+0x38>
  4008ea:	4b14      	ldr	r3, [pc, #80]	; (40093c <xPortStartScheduler+0xa4>)
  4008ec:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4008ee:	4a13      	ldr	r2, [pc, #76]	; (40093c <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4008f0:	6813      	ldr	r3, [r2, #0]
  4008f2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4008f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4008f8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4008fa:	9b01      	ldr	r3, [sp, #4]
  4008fc:	b2db      	uxtb	r3, r3
  4008fe:	4a0d      	ldr	r2, [pc, #52]	; (400934 <xPortStartScheduler+0x9c>)
  400900:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400902:	4b0f      	ldr	r3, [pc, #60]	; (400940 <xPortStartScheduler+0xa8>)
  400904:	681a      	ldr	r2, [r3, #0]
  400906:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40090a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40090c:	681a      	ldr	r2, [r3, #0]
  40090e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400912:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  400914:	4b0b      	ldr	r3, [pc, #44]	; (400944 <xPortStartScheduler+0xac>)
  400916:	4798      	blx	r3
	uxCriticalNesting = 0;
  400918:	2200      	movs	r2, #0
  40091a:	4b0b      	ldr	r3, [pc, #44]	; (400948 <xPortStartScheduler+0xb0>)
  40091c:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40091e:	4b0b      	ldr	r3, [pc, #44]	; (40094c <xPortStartScheduler+0xb4>)
  400920:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400922:	4a0b      	ldr	r2, [pc, #44]	; (400950 <xPortStartScheduler+0xb8>)
  400924:	6813      	ldr	r3, [r2, #0]
  400926:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40092a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40092c:	4b09      	ldr	r3, [pc, #36]	; (400954 <xPortStartScheduler+0xbc>)
  40092e:	4798      	blx	r3
	prvTaskExitError();
  400930:	4b09      	ldr	r3, [pc, #36]	; (400958 <xPortStartScheduler+0xc0>)
  400932:	4798      	blx	r3
  400934:	e000e400 	.word	0xe000e400
  400938:	204009f4 	.word	0x204009f4
  40093c:	204009f8 	.word	0x204009f8
  400940:	e000ed20 	.word	0xe000ed20
  400944:	00400881 	.word	0x00400881
  400948:	2040000c 	.word	0x2040000c
  40094c:	00400705 	.word	0x00400705
  400950:	e000ef34 	.word	0xe000ef34
  400954:	004006e5 	.word	0x004006e5
  400958:	004006a9 	.word	0x004006a9

0040095c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  40095c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400960:	2b0f      	cmp	r3, #15
  400962:	d911      	bls.n	400988 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400964:	4a12      	ldr	r2, [pc, #72]	; (4009b0 <vPortValidateInterruptPriority+0x54>)
  400966:	5c9b      	ldrb	r3, [r3, r2]
  400968:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40096a:	4a12      	ldr	r2, [pc, #72]	; (4009b4 <vPortValidateInterruptPriority+0x58>)
  40096c:	7812      	ldrb	r2, [r2, #0]
  40096e:	429a      	cmp	r2, r3
  400970:	d90a      	bls.n	400988 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  400972:	f04f 0380 	mov.w	r3, #128	; 0x80
  400976:	b672      	cpsid	i
  400978:	f383 8811 	msr	BASEPRI, r3
  40097c:	f3bf 8f6f 	isb	sy
  400980:	f3bf 8f4f 	dsb	sy
  400984:	b662      	cpsie	i
  400986:	e7fe      	b.n	400986 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400988:	4b0b      	ldr	r3, [pc, #44]	; (4009b8 <vPortValidateInterruptPriority+0x5c>)
  40098a:	681b      	ldr	r3, [r3, #0]
  40098c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400990:	4a0a      	ldr	r2, [pc, #40]	; (4009bc <vPortValidateInterruptPriority+0x60>)
  400992:	6812      	ldr	r2, [r2, #0]
  400994:	4293      	cmp	r3, r2
  400996:	d90a      	bls.n	4009ae <vPortValidateInterruptPriority+0x52>
  400998:	f04f 0380 	mov.w	r3, #128	; 0x80
  40099c:	b672      	cpsid	i
  40099e:	f383 8811 	msr	BASEPRI, r3
  4009a2:	f3bf 8f6f 	isb	sy
  4009a6:	f3bf 8f4f 	dsb	sy
  4009aa:	b662      	cpsie	i
  4009ac:	e7fe      	b.n	4009ac <vPortValidateInterruptPriority+0x50>
  4009ae:	4770      	bx	lr
  4009b0:	e000e3f0 	.word	0xe000e3f0
  4009b4:	204009f4 	.word	0x204009f4
  4009b8:	e000ed0c 	.word	0xe000ed0c
  4009bc:	204009f8 	.word	0x204009f8

004009c0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4009c0:	b538      	push	{r3, r4, r5, lr}
  4009c2:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4009c4:	f010 0f07 	tst.w	r0, #7
  4009c8:	d002      	beq.n	4009d0 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4009ca:	f020 0407 	bic.w	r4, r0, #7
  4009ce:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  4009d0:	4b11      	ldr	r3, [pc, #68]	; (400a18 <pvPortMalloc+0x58>)
  4009d2:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  4009d4:	4b11      	ldr	r3, [pc, #68]	; (400a1c <pvPortMalloc+0x5c>)
  4009d6:	681b      	ldr	r3, [r3, #0]
  4009d8:	b193      	cbz	r3, 400a00 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  4009da:	4b11      	ldr	r3, [pc, #68]	; (400a20 <pvPortMalloc+0x60>)
  4009dc:	681b      	ldr	r3, [r3, #0]
  4009de:	441c      	add	r4, r3
  4009e0:	42a3      	cmp	r3, r4
  4009e2:	d213      	bcs.n	400a0c <pvPortMalloc+0x4c>
  4009e4:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4009e8:	4294      	cmp	r4, r2
  4009ea:	d80f      	bhi.n	400a0c <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4009ec:	4a0b      	ldr	r2, [pc, #44]	; (400a1c <pvPortMalloc+0x5c>)
  4009ee:	6815      	ldr	r5, [r2, #0]
  4009f0:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4009f2:	4b0b      	ldr	r3, [pc, #44]	; (400a20 <pvPortMalloc+0x60>)
  4009f4:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4009f6:	4b0b      	ldr	r3, [pc, #44]	; (400a24 <pvPortMalloc+0x64>)
  4009f8:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4009fa:	b14d      	cbz	r5, 400a10 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  4009fc:	4628      	mov	r0, r5
  4009fe:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400a00:	4b09      	ldr	r3, [pc, #36]	; (400a28 <pvPortMalloc+0x68>)
  400a02:	f023 0307 	bic.w	r3, r3, #7
  400a06:	4a05      	ldr	r2, [pc, #20]	; (400a1c <pvPortMalloc+0x5c>)
  400a08:	6013      	str	r3, [r2, #0]
  400a0a:	e7e6      	b.n	4009da <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  400a0c:	4b05      	ldr	r3, [pc, #20]	; (400a24 <pvPortMalloc+0x64>)
  400a0e:	4798      	blx	r3
			vApplicationMallocFailedHook();
  400a10:	4b06      	ldr	r3, [pc, #24]	; (400a2c <pvPortMalloc+0x6c>)
  400a12:	4798      	blx	r3
  400a14:	2500      	movs	r5, #0
	return pvReturn;
  400a16:	e7f1      	b.n	4009fc <pvPortMalloc+0x3c>
  400a18:	0040169d 	.word	0x0040169d
  400a1c:	204009fc 	.word	0x204009fc
  400a20:	2040c200 	.word	0x2040c200
  400a24:	00401805 	.word	0x00401805
  400a28:	20400a08 	.word	0x20400a08
  400a2c:	00406033 	.word	0x00406033

00400a30 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400a30:	b150      	cbz	r0, 400a48 <vPortFree+0x18>
  400a32:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a36:	b672      	cpsid	i
  400a38:	f383 8811 	msr	BASEPRI, r3
  400a3c:	f3bf 8f6f 	isb	sy
  400a40:	f3bf 8f4f 	dsb	sy
  400a44:	b662      	cpsie	i
  400a46:	e7fe      	b.n	400a46 <vPortFree+0x16>
  400a48:	4770      	bx	lr
	...

00400a4c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400a4c:	b538      	push	{r3, r4, r5, lr}
  400a4e:	4604      	mov	r4, r0
  400a50:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400a52:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400a54:	b95a      	cbnz	r2, 400a6e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400a56:	6803      	ldr	r3, [r0, #0]
  400a58:	2b00      	cmp	r3, #0
  400a5a:	d12e      	bne.n	400aba <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400a5c:	6840      	ldr	r0, [r0, #4]
  400a5e:	4b1b      	ldr	r3, [pc, #108]	; (400acc <prvCopyDataToQueue+0x80>)
  400a60:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400a62:	2300      	movs	r3, #0
  400a64:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400a66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400a68:	3301      	adds	r3, #1
  400a6a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400a6c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  400a6e:	b96d      	cbnz	r5, 400a8c <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400a70:	6880      	ldr	r0, [r0, #8]
  400a72:	4b17      	ldr	r3, [pc, #92]	; (400ad0 <prvCopyDataToQueue+0x84>)
  400a74:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400a76:	68a3      	ldr	r3, [r4, #8]
  400a78:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400a7a:	4413      	add	r3, r2
  400a7c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400a7e:	6862      	ldr	r2, [r4, #4]
  400a80:	4293      	cmp	r3, r2
  400a82:	d31c      	bcc.n	400abe <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400a84:	6823      	ldr	r3, [r4, #0]
  400a86:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  400a88:	2000      	movs	r0, #0
  400a8a:	e7ec      	b.n	400a66 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400a8c:	68c0      	ldr	r0, [r0, #12]
  400a8e:	4b10      	ldr	r3, [pc, #64]	; (400ad0 <prvCopyDataToQueue+0x84>)
  400a90:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400a92:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400a94:	425b      	negs	r3, r3
  400a96:	68e2      	ldr	r2, [r4, #12]
  400a98:	441a      	add	r2, r3
  400a9a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400a9c:	6821      	ldr	r1, [r4, #0]
  400a9e:	428a      	cmp	r2, r1
  400aa0:	d202      	bcs.n	400aa8 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400aa2:	6862      	ldr	r2, [r4, #4]
  400aa4:	4413      	add	r3, r2
  400aa6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  400aa8:	2d02      	cmp	r5, #2
  400aaa:	d10a      	bne.n	400ac2 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400aac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400aae:	b153      	cbz	r3, 400ac6 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  400ab0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400ab2:	3b01      	subs	r3, #1
  400ab4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  400ab6:	2000      	movs	r0, #0
  400ab8:	e7d5      	b.n	400a66 <prvCopyDataToQueue+0x1a>
  400aba:	2000      	movs	r0, #0
  400abc:	e7d3      	b.n	400a66 <prvCopyDataToQueue+0x1a>
  400abe:	2000      	movs	r0, #0
  400ac0:	e7d1      	b.n	400a66 <prvCopyDataToQueue+0x1a>
  400ac2:	2000      	movs	r0, #0
  400ac4:	e7cf      	b.n	400a66 <prvCopyDataToQueue+0x1a>
  400ac6:	2000      	movs	r0, #0
  400ac8:	e7cd      	b.n	400a66 <prvCopyDataToQueue+0x1a>
  400aca:	bf00      	nop
  400acc:	00401e4d 	.word	0x00401e4d
  400ad0:	00406639 	.word	0x00406639

00400ad4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400ad4:	b530      	push	{r4, r5, lr}
  400ad6:	b083      	sub	sp, #12
  400ad8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400ada:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400adc:	b174      	cbz	r4, 400afc <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400ade:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400ae0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400ae2:	429a      	cmp	r2, r3
  400ae4:	d315      	bcc.n	400b12 <prvNotifyQueueSetContainer+0x3e>
  400ae6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400aea:	b672      	cpsid	i
  400aec:	f383 8811 	msr	BASEPRI, r3
  400af0:	f3bf 8f6f 	isb	sy
  400af4:	f3bf 8f4f 	dsb	sy
  400af8:	b662      	cpsie	i
  400afa:	e7fe      	b.n	400afa <prvNotifyQueueSetContainer+0x26>
  400afc:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b00:	b672      	cpsid	i
  400b02:	f383 8811 	msr	BASEPRI, r3
  400b06:	f3bf 8f6f 	isb	sy
  400b0a:	f3bf 8f4f 	dsb	sy
  400b0e:	b662      	cpsie	i
  400b10:	e7fe      	b.n	400b10 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400b12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400b14:	4293      	cmp	r3, r2
  400b16:	d803      	bhi.n	400b20 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  400b18:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400b1a:	4628      	mov	r0, r5
  400b1c:	b003      	add	sp, #12
  400b1e:	bd30      	pop	{r4, r5, pc}
  400b20:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400b22:	a901      	add	r1, sp, #4
  400b24:	4620      	mov	r0, r4
  400b26:	4b0b      	ldr	r3, [pc, #44]	; (400b54 <prvNotifyQueueSetContainer+0x80>)
  400b28:	4798      	blx	r3
  400b2a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400b2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b32:	d10a      	bne.n	400b4a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400b36:	2b00      	cmp	r3, #0
  400b38:	d0ef      	beq.n	400b1a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400b3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400b3e:	4b06      	ldr	r3, [pc, #24]	; (400b58 <prvNotifyQueueSetContainer+0x84>)
  400b40:	4798      	blx	r3
  400b42:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  400b44:	bf18      	it	ne
  400b46:	2501      	movne	r5, #1
  400b48:	e7e7      	b.n	400b1a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  400b4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b4c:	3301      	adds	r3, #1
  400b4e:	64a3      	str	r3, [r4, #72]	; 0x48
  400b50:	e7e3      	b.n	400b1a <prvNotifyQueueSetContainer+0x46>
  400b52:	bf00      	nop
  400b54:	00400a4d 	.word	0x00400a4d
  400b58:	00401c21 	.word	0x00401c21

00400b5c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400b5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400b5e:	b172      	cbz	r2, 400b7e <prvCopyDataFromQueue+0x22>
{
  400b60:	b510      	push	{r4, lr}
  400b62:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400b64:	68c4      	ldr	r4, [r0, #12]
  400b66:	4414      	add	r4, r2
  400b68:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400b6a:	6840      	ldr	r0, [r0, #4]
  400b6c:	4284      	cmp	r4, r0
  400b6e:	d301      	bcc.n	400b74 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400b70:	6818      	ldr	r0, [r3, #0]
  400b72:	60d8      	str	r0, [r3, #12]
  400b74:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400b76:	68d9      	ldr	r1, [r3, #12]
  400b78:	4b01      	ldr	r3, [pc, #4]	; (400b80 <prvCopyDataFromQueue+0x24>)
  400b7a:	4798      	blx	r3
  400b7c:	bd10      	pop	{r4, pc}
  400b7e:	4770      	bx	lr
  400b80:	00406639 	.word	0x00406639

00400b84 <prvUnlockQueue>:
{
  400b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b86:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400b88:	4b22      	ldr	r3, [pc, #136]	; (400c14 <prvUnlockQueue+0x90>)
  400b8a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400b8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b8e:	2b00      	cmp	r3, #0
  400b90:	dd1b      	ble.n	400bca <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400b92:	4d21      	ldr	r5, [pc, #132]	; (400c18 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  400b94:	4f21      	ldr	r7, [pc, #132]	; (400c1c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400b96:	4e22      	ldr	r6, [pc, #136]	; (400c20 <prvUnlockQueue+0x9c>)
  400b98:	e00b      	b.n	400bb2 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400b9c:	b1ab      	cbz	r3, 400bca <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400b9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ba2:	47b0      	blx	r6
  400ba4:	b978      	cbnz	r0, 400bc6 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  400ba6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ba8:	3b01      	subs	r3, #1
  400baa:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400bac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400bae:	2b00      	cmp	r3, #0
  400bb0:	dd0b      	ble.n	400bca <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  400bb2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400bb4:	2b00      	cmp	r3, #0
  400bb6:	d0f0      	beq.n	400b9a <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400bb8:	2100      	movs	r1, #0
  400bba:	4620      	mov	r0, r4
  400bbc:	47a8      	blx	r5
  400bbe:	2801      	cmp	r0, #1
  400bc0:	d1f1      	bne.n	400ba6 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  400bc2:	47b8      	blx	r7
  400bc4:	e7ef      	b.n	400ba6 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  400bc6:	47b8      	blx	r7
  400bc8:	e7ed      	b.n	400ba6 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  400bca:	f04f 33ff 	mov.w	r3, #4294967295
  400bce:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  400bd0:	4b14      	ldr	r3, [pc, #80]	; (400c24 <prvUnlockQueue+0xa0>)
  400bd2:	4798      	blx	r3
	taskENTER_CRITICAL();
  400bd4:	4b0f      	ldr	r3, [pc, #60]	; (400c14 <prvUnlockQueue+0x90>)
  400bd6:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400bd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400bda:	2b00      	cmp	r3, #0
  400bdc:	dd14      	ble.n	400c08 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400bde:	6923      	ldr	r3, [r4, #16]
  400be0:	b193      	cbz	r3, 400c08 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400be2:	f104 0610 	add.w	r6, r4, #16
  400be6:	4d0e      	ldr	r5, [pc, #56]	; (400c20 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400be8:	4f0c      	ldr	r7, [pc, #48]	; (400c1c <prvUnlockQueue+0x98>)
  400bea:	e007      	b.n	400bfc <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  400bec:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400bee:	3b01      	subs	r3, #1
  400bf0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400bf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400bf4:	2b00      	cmp	r3, #0
  400bf6:	dd07      	ble.n	400c08 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400bf8:	6923      	ldr	r3, [r4, #16]
  400bfa:	b12b      	cbz	r3, 400c08 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400bfc:	4630      	mov	r0, r6
  400bfe:	47a8      	blx	r5
  400c00:	2800      	cmp	r0, #0
  400c02:	d0f3      	beq.n	400bec <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400c04:	47b8      	blx	r7
  400c06:	e7f1      	b.n	400bec <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400c08:	f04f 33ff 	mov.w	r3, #4294967295
  400c0c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  400c0e:	4b05      	ldr	r3, [pc, #20]	; (400c24 <prvUnlockQueue+0xa0>)
  400c10:	4798      	blx	r3
  400c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c14:	00400765 	.word	0x00400765
  400c18:	00400ad5 	.word	0x00400ad5
  400c1c:	00401d7d 	.word	0x00401d7d
  400c20:	00401c21 	.word	0x00401c21
  400c24:	004007b1 	.word	0x004007b1

00400c28 <xQueueGenericReset>:
{
  400c28:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  400c2a:	b308      	cbz	r0, 400c70 <xQueueGenericReset+0x48>
  400c2c:	4604      	mov	r4, r0
  400c2e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  400c30:	4b1d      	ldr	r3, [pc, #116]	; (400ca8 <xQueueGenericReset+0x80>)
  400c32:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400c34:	6822      	ldr	r2, [r4, #0]
  400c36:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400c38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c3a:	fb03 f301 	mul.w	r3, r3, r1
  400c3e:	18d0      	adds	r0, r2, r3
  400c40:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400c42:	2000      	movs	r0, #0
  400c44:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400c46:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400c48:	1a5b      	subs	r3, r3, r1
  400c4a:	4413      	add	r3, r2
  400c4c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400c4e:	f04f 33ff 	mov.w	r3, #4294967295
  400c52:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400c54:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  400c56:	b9fd      	cbnz	r5, 400c98 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400c58:	6923      	ldr	r3, [r4, #16]
  400c5a:	b12b      	cbz	r3, 400c68 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400c5c:	f104 0010 	add.w	r0, r4, #16
  400c60:	4b12      	ldr	r3, [pc, #72]	; (400cac <xQueueGenericReset+0x84>)
  400c62:	4798      	blx	r3
  400c64:	2801      	cmp	r0, #1
  400c66:	d00e      	beq.n	400c86 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  400c68:	4b11      	ldr	r3, [pc, #68]	; (400cb0 <xQueueGenericReset+0x88>)
  400c6a:	4798      	blx	r3
}
  400c6c:	2001      	movs	r0, #1
  400c6e:	bd38      	pop	{r3, r4, r5, pc}
  400c70:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c74:	b672      	cpsid	i
  400c76:	f383 8811 	msr	BASEPRI, r3
  400c7a:	f3bf 8f6f 	isb	sy
  400c7e:	f3bf 8f4f 	dsb	sy
  400c82:	b662      	cpsie	i
  400c84:	e7fe      	b.n	400c84 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  400c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c8a:	4b0a      	ldr	r3, [pc, #40]	; (400cb4 <xQueueGenericReset+0x8c>)
  400c8c:	601a      	str	r2, [r3, #0]
  400c8e:	f3bf 8f4f 	dsb	sy
  400c92:	f3bf 8f6f 	isb	sy
  400c96:	e7e7      	b.n	400c68 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400c98:	f104 0010 	add.w	r0, r4, #16
  400c9c:	4d06      	ldr	r5, [pc, #24]	; (400cb8 <xQueueGenericReset+0x90>)
  400c9e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400ca0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ca4:	47a8      	blx	r5
  400ca6:	e7df      	b.n	400c68 <xQueueGenericReset+0x40>
  400ca8:	00400765 	.word	0x00400765
  400cac:	00401c21 	.word	0x00401c21
  400cb0:	004007b1 	.word	0x004007b1
  400cb4:	e000ed04 	.word	0xe000ed04
  400cb8:	00400619 	.word	0x00400619

00400cbc <xQueueGenericCreate>:
{
  400cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400cbe:	b950      	cbnz	r0, 400cd6 <xQueueGenericCreate+0x1a>
  400cc0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400cc4:	b672      	cpsid	i
  400cc6:	f383 8811 	msr	BASEPRI, r3
  400cca:	f3bf 8f6f 	isb	sy
  400cce:	f3bf 8f4f 	dsb	sy
  400cd2:	b662      	cpsie	i
  400cd4:	e7fe      	b.n	400cd4 <xQueueGenericCreate+0x18>
  400cd6:	4606      	mov	r6, r0
  400cd8:	4617      	mov	r7, r2
  400cda:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  400cdc:	b189      	cbz	r1, 400d02 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400cde:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400ce2:	3059      	adds	r0, #89	; 0x59
  400ce4:	4b12      	ldr	r3, [pc, #72]	; (400d30 <xQueueGenericCreate+0x74>)
  400ce6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400ce8:	4604      	mov	r4, r0
  400cea:	b9e8      	cbnz	r0, 400d28 <xQueueGenericCreate+0x6c>
  400cec:	f04f 0380 	mov.w	r3, #128	; 0x80
  400cf0:	b672      	cpsid	i
  400cf2:	f383 8811 	msr	BASEPRI, r3
  400cf6:	f3bf 8f6f 	isb	sy
  400cfa:	f3bf 8f4f 	dsb	sy
  400cfe:	b662      	cpsie	i
  400d00:	e7fe      	b.n	400d00 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400d02:	2058      	movs	r0, #88	; 0x58
  400d04:	4b0a      	ldr	r3, [pc, #40]	; (400d30 <xQueueGenericCreate+0x74>)
  400d06:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400d08:	4604      	mov	r4, r0
  400d0a:	2800      	cmp	r0, #0
  400d0c:	d0ee      	beq.n	400cec <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400d0e:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  400d10:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400d12:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400d14:	2101      	movs	r1, #1
  400d16:	4620      	mov	r0, r4
  400d18:	4b06      	ldr	r3, [pc, #24]	; (400d34 <xQueueGenericCreate+0x78>)
  400d1a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  400d1c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  400d20:	2300      	movs	r3, #0
  400d22:	6563      	str	r3, [r4, #84]	; 0x54
}
  400d24:	4620      	mov	r0, r4
  400d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400d28:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400d2c:	6003      	str	r3, [r0, #0]
  400d2e:	e7ef      	b.n	400d10 <xQueueGenericCreate+0x54>
  400d30:	004009c1 	.word	0x004009c1
  400d34:	00400c29 	.word	0x00400c29

00400d38 <xQueueGenericSend>:
{
  400d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d3c:	b085      	sub	sp, #20
  400d3e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400d40:	b1b8      	cbz	r0, 400d72 <xQueueGenericSend+0x3a>
  400d42:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d44:	b301      	cbz	r1, 400d88 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400d46:	2b02      	cmp	r3, #2
  400d48:	d02c      	beq.n	400da4 <xQueueGenericSend+0x6c>
  400d4a:	461d      	mov	r5, r3
  400d4c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400d4e:	4b66      	ldr	r3, [pc, #408]	; (400ee8 <xQueueGenericSend+0x1b0>)
  400d50:	4798      	blx	r3
  400d52:	2800      	cmp	r0, #0
  400d54:	d134      	bne.n	400dc0 <xQueueGenericSend+0x88>
  400d56:	9b01      	ldr	r3, [sp, #4]
  400d58:	2b00      	cmp	r3, #0
  400d5a:	d038      	beq.n	400dce <xQueueGenericSend+0x96>
  400d5c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d60:	b672      	cpsid	i
  400d62:	f383 8811 	msr	BASEPRI, r3
  400d66:	f3bf 8f6f 	isb	sy
  400d6a:	f3bf 8f4f 	dsb	sy
  400d6e:	b662      	cpsie	i
  400d70:	e7fe      	b.n	400d70 <xQueueGenericSend+0x38>
  400d72:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d76:	b672      	cpsid	i
  400d78:	f383 8811 	msr	BASEPRI, r3
  400d7c:	f3bf 8f6f 	isb	sy
  400d80:	f3bf 8f4f 	dsb	sy
  400d84:	b662      	cpsie	i
  400d86:	e7fe      	b.n	400d86 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d88:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400d8a:	2a00      	cmp	r2, #0
  400d8c:	d0db      	beq.n	400d46 <xQueueGenericSend+0xe>
  400d8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d92:	b672      	cpsid	i
  400d94:	f383 8811 	msr	BASEPRI, r3
  400d98:	f3bf 8f6f 	isb	sy
  400d9c:	f3bf 8f4f 	dsb	sy
  400da0:	b662      	cpsie	i
  400da2:	e7fe      	b.n	400da2 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400da4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400da6:	2a01      	cmp	r2, #1
  400da8:	d0cf      	beq.n	400d4a <xQueueGenericSend+0x12>
  400daa:	f04f 0380 	mov.w	r3, #128	; 0x80
  400dae:	b672      	cpsid	i
  400db0:	f383 8811 	msr	BASEPRI, r3
  400db4:	f3bf 8f6f 	isb	sy
  400db8:	f3bf 8f4f 	dsb	sy
  400dbc:	b662      	cpsie	i
  400dbe:	e7fe      	b.n	400dbe <xQueueGenericSend+0x86>
  400dc0:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  400dc2:	4e4a      	ldr	r6, [pc, #296]	; (400eec <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  400dc4:	f8df a150 	ldr.w	sl, [pc, #336]	; 400f18 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  400dc8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 400ef8 <xQueueGenericSend+0x1c0>
  400dcc:	e042      	b.n	400e54 <xQueueGenericSend+0x11c>
  400dce:	2700      	movs	r7, #0
  400dd0:	e7f7      	b.n	400dc2 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400dd2:	462a      	mov	r2, r5
  400dd4:	4641      	mov	r1, r8
  400dd6:	4620      	mov	r0, r4
  400dd8:	4b45      	ldr	r3, [pc, #276]	; (400ef0 <xQueueGenericSend+0x1b8>)
  400dda:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400ddc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400dde:	b19b      	cbz	r3, 400e08 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400de0:	4629      	mov	r1, r5
  400de2:	4620      	mov	r0, r4
  400de4:	4b43      	ldr	r3, [pc, #268]	; (400ef4 <xQueueGenericSend+0x1bc>)
  400de6:	4798      	blx	r3
  400de8:	2801      	cmp	r0, #1
  400dea:	d107      	bne.n	400dfc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400df0:	4b41      	ldr	r3, [pc, #260]	; (400ef8 <xQueueGenericSend+0x1c0>)
  400df2:	601a      	str	r2, [r3, #0]
  400df4:	f3bf 8f4f 	dsb	sy
  400df8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400dfc:	4b3f      	ldr	r3, [pc, #252]	; (400efc <xQueueGenericSend+0x1c4>)
  400dfe:	4798      	blx	r3
				return pdPASS;
  400e00:	2001      	movs	r0, #1
}
  400e02:	b005      	add	sp, #20
  400e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400e0a:	b173      	cbz	r3, 400e2a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400e0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e10:	4b3b      	ldr	r3, [pc, #236]	; (400f00 <xQueueGenericSend+0x1c8>)
  400e12:	4798      	blx	r3
  400e14:	2801      	cmp	r0, #1
  400e16:	d1f1      	bne.n	400dfc <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  400e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400e1c:	4b36      	ldr	r3, [pc, #216]	; (400ef8 <xQueueGenericSend+0x1c0>)
  400e1e:	601a      	str	r2, [r3, #0]
  400e20:	f3bf 8f4f 	dsb	sy
  400e24:	f3bf 8f6f 	isb	sy
  400e28:	e7e8      	b.n	400dfc <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  400e2a:	2800      	cmp	r0, #0
  400e2c:	d0e6      	beq.n	400dfc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400e32:	4b31      	ldr	r3, [pc, #196]	; (400ef8 <xQueueGenericSend+0x1c0>)
  400e34:	601a      	str	r2, [r3, #0]
  400e36:	f3bf 8f4f 	dsb	sy
  400e3a:	f3bf 8f6f 	isb	sy
  400e3e:	e7dd      	b.n	400dfc <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  400e40:	4b2e      	ldr	r3, [pc, #184]	; (400efc <xQueueGenericSend+0x1c4>)
  400e42:	4798      	blx	r3
					return errQUEUE_FULL;
  400e44:	2000      	movs	r0, #0
  400e46:	e7dc      	b.n	400e02 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  400e48:	4620      	mov	r0, r4
  400e4a:	4b2e      	ldr	r3, [pc, #184]	; (400f04 <xQueueGenericSend+0x1cc>)
  400e4c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400e4e:	4b2e      	ldr	r3, [pc, #184]	; (400f08 <xQueueGenericSend+0x1d0>)
  400e50:	4798      	blx	r3
  400e52:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  400e54:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400e56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400e58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400e5a:	429a      	cmp	r2, r3
  400e5c:	d3b9      	bcc.n	400dd2 <xQueueGenericSend+0x9a>
  400e5e:	2d02      	cmp	r5, #2
  400e60:	d0b7      	beq.n	400dd2 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  400e62:	9b01      	ldr	r3, [sp, #4]
  400e64:	2b00      	cmp	r3, #0
  400e66:	d0eb      	beq.n	400e40 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  400e68:	b90f      	cbnz	r7, 400e6e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  400e6a:	a802      	add	r0, sp, #8
  400e6c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  400e6e:	4b23      	ldr	r3, [pc, #140]	; (400efc <xQueueGenericSend+0x1c4>)
  400e70:	4798      	blx	r3
		vTaskSuspendAll();
  400e72:	4b26      	ldr	r3, [pc, #152]	; (400f0c <xQueueGenericSend+0x1d4>)
  400e74:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400e76:	47b0      	blx	r6
  400e78:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e7e:	d101      	bne.n	400e84 <xQueueGenericSend+0x14c>
  400e80:	2300      	movs	r3, #0
  400e82:	6463      	str	r3, [r4, #68]	; 0x44
  400e84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e86:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e8a:	d101      	bne.n	400e90 <xQueueGenericSend+0x158>
  400e8c:	2300      	movs	r3, #0
  400e8e:	64a3      	str	r3, [r4, #72]	; 0x48
  400e90:	4b1a      	ldr	r3, [pc, #104]	; (400efc <xQueueGenericSend+0x1c4>)
  400e92:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400e94:	a901      	add	r1, sp, #4
  400e96:	a802      	add	r0, sp, #8
  400e98:	4b1d      	ldr	r3, [pc, #116]	; (400f10 <xQueueGenericSend+0x1d8>)
  400e9a:	4798      	blx	r3
  400e9c:	b9e0      	cbnz	r0, 400ed8 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  400e9e:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400ea0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400ea4:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400ea6:	4b15      	ldr	r3, [pc, #84]	; (400efc <xQueueGenericSend+0x1c4>)
  400ea8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400eaa:	45bb      	cmp	fp, r7
  400eac:	d1cc      	bne.n	400e48 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400eae:	9901      	ldr	r1, [sp, #4]
  400eb0:	f104 0010 	add.w	r0, r4, #16
  400eb4:	4b17      	ldr	r3, [pc, #92]	; (400f14 <xQueueGenericSend+0x1dc>)
  400eb6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400eb8:	4620      	mov	r0, r4
  400eba:	4b12      	ldr	r3, [pc, #72]	; (400f04 <xQueueGenericSend+0x1cc>)
  400ebc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400ebe:	4b12      	ldr	r3, [pc, #72]	; (400f08 <xQueueGenericSend+0x1d0>)
  400ec0:	4798      	blx	r3
  400ec2:	2800      	cmp	r0, #0
  400ec4:	d1c5      	bne.n	400e52 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  400ec6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400eca:	f8c9 3000 	str.w	r3, [r9]
  400ece:	f3bf 8f4f 	dsb	sy
  400ed2:	f3bf 8f6f 	isb	sy
  400ed6:	e7bc      	b.n	400e52 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  400ed8:	4620      	mov	r0, r4
  400eda:	4b0a      	ldr	r3, [pc, #40]	; (400f04 <xQueueGenericSend+0x1cc>)
  400edc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400ede:	4b0a      	ldr	r3, [pc, #40]	; (400f08 <xQueueGenericSend+0x1d0>)
  400ee0:	4798      	blx	r3
			return errQUEUE_FULL;
  400ee2:	2000      	movs	r0, #0
  400ee4:	e78d      	b.n	400e02 <xQueueGenericSend+0xca>
  400ee6:	bf00      	nop
  400ee8:	00401d89 	.word	0x00401d89
  400eec:	00400765 	.word	0x00400765
  400ef0:	00400a4d 	.word	0x00400a4d
  400ef4:	00400ad5 	.word	0x00400ad5
  400ef8:	e000ed04 	.word	0xe000ed04
  400efc:	004007b1 	.word	0x004007b1
  400f00:	00401c21 	.word	0x00401c21
  400f04:	00400b85 	.word	0x00400b85
  400f08:	00401805 	.word	0x00401805
  400f0c:	0040169d 	.word	0x0040169d
  400f10:	00401ce9 	.word	0x00401ce9
  400f14:	00401b1d 	.word	0x00401b1d
  400f18:	00401cb9 	.word	0x00401cb9

00400f1c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  400f1c:	2800      	cmp	r0, #0
  400f1e:	d036      	beq.n	400f8e <xQueueGenericSendFromISR+0x72>
{
  400f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f24:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400f26:	2900      	cmp	r1, #0
  400f28:	d03c      	beq.n	400fa4 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400f2a:	2b02      	cmp	r3, #2
  400f2c:	d048      	beq.n	400fc0 <xQueueGenericSendFromISR+0xa4>
  400f2e:	461e      	mov	r6, r3
  400f30:	4615      	mov	r5, r2
  400f32:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400f34:	4b35      	ldr	r3, [pc, #212]	; (40100c <xQueueGenericSendFromISR+0xf0>)
  400f36:	4798      	blx	r3
	__asm volatile
  400f38:	f3ef 8711 	mrs	r7, BASEPRI
  400f3c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f40:	b672      	cpsid	i
  400f42:	f383 8811 	msr	BASEPRI, r3
  400f46:	f3bf 8f6f 	isb	sy
  400f4a:	f3bf 8f4f 	dsb	sy
  400f4e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400f50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f54:	429a      	cmp	r2, r3
  400f56:	d301      	bcc.n	400f5c <xQueueGenericSendFromISR+0x40>
  400f58:	2e02      	cmp	r6, #2
  400f5a:	d14f      	bne.n	400ffc <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400f5c:	4632      	mov	r2, r6
  400f5e:	4641      	mov	r1, r8
  400f60:	4620      	mov	r0, r4
  400f62:	4b2b      	ldr	r3, [pc, #172]	; (401010 <xQueueGenericSendFromISR+0xf4>)
  400f64:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  400f66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f68:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f6c:	d141      	bne.n	400ff2 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  400f6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400f70:	2b00      	cmp	r3, #0
  400f72:	d033      	beq.n	400fdc <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400f74:	4631      	mov	r1, r6
  400f76:	4620      	mov	r0, r4
  400f78:	4b26      	ldr	r3, [pc, #152]	; (401014 <xQueueGenericSendFromISR+0xf8>)
  400f7a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400f7c:	2d00      	cmp	r5, #0
  400f7e:	d03f      	beq.n	401000 <xQueueGenericSendFromISR+0xe4>
  400f80:	2801      	cmp	r0, #1
  400f82:	d13d      	bne.n	401000 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400f84:	6028      	str	r0, [r5, #0]
	__asm volatile
  400f86:	f387 8811 	msr	BASEPRI, r7
}
  400f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  400f8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f92:	b672      	cpsid	i
  400f94:	f383 8811 	msr	BASEPRI, r3
  400f98:	f3bf 8f6f 	isb	sy
  400f9c:	f3bf 8f4f 	dsb	sy
  400fa0:	b662      	cpsie	i
  400fa2:	e7fe      	b.n	400fa2 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400fa4:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400fa6:	2800      	cmp	r0, #0
  400fa8:	d0bf      	beq.n	400f2a <xQueueGenericSendFromISR+0xe>
  400faa:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fae:	b672      	cpsid	i
  400fb0:	f383 8811 	msr	BASEPRI, r3
  400fb4:	f3bf 8f6f 	isb	sy
  400fb8:	f3bf 8f4f 	dsb	sy
  400fbc:	b662      	cpsie	i
  400fbe:	e7fe      	b.n	400fbe <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400fc0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400fc2:	2801      	cmp	r0, #1
  400fc4:	d0b3      	beq.n	400f2e <xQueueGenericSendFromISR+0x12>
  400fc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fca:	b672      	cpsid	i
  400fcc:	f383 8811 	msr	BASEPRI, r3
  400fd0:	f3bf 8f6f 	isb	sy
  400fd4:	f3bf 8f4f 	dsb	sy
  400fd8:	b662      	cpsie	i
  400fda:	e7fe      	b.n	400fda <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400fde:	b18b      	cbz	r3, 401004 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400fe0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fe4:	4b0c      	ldr	r3, [pc, #48]	; (401018 <xQueueGenericSendFromISR+0xfc>)
  400fe6:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400fe8:	b175      	cbz	r5, 401008 <xQueueGenericSendFromISR+0xec>
  400fea:	b168      	cbz	r0, 401008 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400fec:	2001      	movs	r0, #1
  400fee:	6028      	str	r0, [r5, #0]
  400ff0:	e7c9      	b.n	400f86 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  400ff2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ff4:	3301      	adds	r3, #1
  400ff6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  400ff8:	2001      	movs	r0, #1
  400ffa:	e7c4      	b.n	400f86 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  400ffc:	2000      	movs	r0, #0
  400ffe:	e7c2      	b.n	400f86 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401000:	2001      	movs	r0, #1
  401002:	e7c0      	b.n	400f86 <xQueueGenericSendFromISR+0x6a>
  401004:	2001      	movs	r0, #1
  401006:	e7be      	b.n	400f86 <xQueueGenericSendFromISR+0x6a>
  401008:	2001      	movs	r0, #1
  40100a:	e7bc      	b.n	400f86 <xQueueGenericSendFromISR+0x6a>
  40100c:	0040095d 	.word	0x0040095d
  401010:	00400a4d 	.word	0x00400a4d
  401014:	00400ad5 	.word	0x00400ad5
  401018:	00401c21 	.word	0x00401c21

0040101c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  40101c:	b170      	cbz	r0, 40103c <xQueueGiveFromISR+0x20>
{
  40101e:	b570      	push	{r4, r5, r6, lr}
  401020:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401022:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401024:	b1ab      	cbz	r3, 401052 <xQueueGiveFromISR+0x36>
  401026:	f04f 0380 	mov.w	r3, #128	; 0x80
  40102a:	b672      	cpsid	i
  40102c:	f383 8811 	msr	BASEPRI, r3
  401030:	f3bf 8f6f 	isb	sy
  401034:	f3bf 8f4f 	dsb	sy
  401038:	b662      	cpsie	i
  40103a:	e7fe      	b.n	40103a <xQueueGiveFromISR+0x1e>
  40103c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401040:	b672      	cpsid	i
  401042:	f383 8811 	msr	BASEPRI, r3
  401046:	f3bf 8f6f 	isb	sy
  40104a:	f3bf 8f4f 	dsb	sy
  40104e:	b662      	cpsie	i
  401050:	e7fe      	b.n	401050 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401052:	6803      	ldr	r3, [r0, #0]
  401054:	b333      	cbz	r3, 4010a4 <xQueueGiveFromISR+0x88>
  401056:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401058:	4b25      	ldr	r3, [pc, #148]	; (4010f0 <xQueueGiveFromISR+0xd4>)
  40105a:	4798      	blx	r3
	__asm volatile
  40105c:	f3ef 8611 	mrs	r6, BASEPRI
  401060:	f04f 0380 	mov.w	r3, #128	; 0x80
  401064:	b672      	cpsid	i
  401066:	f383 8811 	msr	BASEPRI, r3
  40106a:	f3bf 8f6f 	isb	sy
  40106e:	f3bf 8f4f 	dsb	sy
  401072:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401074:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401076:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401078:	429a      	cmp	r2, r3
  40107a:	d231      	bcs.n	4010e0 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  40107c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40107e:	3301      	adds	r3, #1
  401080:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  401082:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401084:	f1b3 3fff 	cmp.w	r3, #4294967295
  401088:	d125      	bne.n	4010d6 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  40108a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40108c:	b1c3      	cbz	r3, 4010c0 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40108e:	2100      	movs	r1, #0
  401090:	4620      	mov	r0, r4
  401092:	4b18      	ldr	r3, [pc, #96]	; (4010f4 <xQueueGiveFromISR+0xd8>)
  401094:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401096:	b32d      	cbz	r5, 4010e4 <xQueueGiveFromISR+0xc8>
  401098:	2801      	cmp	r0, #1
  40109a:	d123      	bne.n	4010e4 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40109c:	6028      	str	r0, [r5, #0]
	__asm volatile
  40109e:	f386 8811 	msr	BASEPRI, r6
}
  4010a2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4010a4:	6843      	ldr	r3, [r0, #4]
  4010a6:	2b00      	cmp	r3, #0
  4010a8:	d0d5      	beq.n	401056 <xQueueGiveFromISR+0x3a>
	__asm volatile
  4010aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010ae:	b672      	cpsid	i
  4010b0:	f383 8811 	msr	BASEPRI, r3
  4010b4:	f3bf 8f6f 	isb	sy
  4010b8:	f3bf 8f4f 	dsb	sy
  4010bc:	b662      	cpsie	i
  4010be:	e7fe      	b.n	4010be <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4010c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4010c2:	b18b      	cbz	r3, 4010e8 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4010c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4010c8:	4b0b      	ldr	r3, [pc, #44]	; (4010f8 <xQueueGiveFromISR+0xdc>)
  4010ca:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4010cc:	b175      	cbz	r5, 4010ec <xQueueGiveFromISR+0xd0>
  4010ce:	b168      	cbz	r0, 4010ec <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4010d0:	2001      	movs	r0, #1
  4010d2:	6028      	str	r0, [r5, #0]
  4010d4:	e7e3      	b.n	40109e <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  4010d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4010d8:	3301      	adds	r3, #1
  4010da:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4010dc:	2001      	movs	r0, #1
  4010de:	e7de      	b.n	40109e <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  4010e0:	2000      	movs	r0, #0
  4010e2:	e7dc      	b.n	40109e <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  4010e4:	2001      	movs	r0, #1
  4010e6:	e7da      	b.n	40109e <xQueueGiveFromISR+0x82>
  4010e8:	2001      	movs	r0, #1
  4010ea:	e7d8      	b.n	40109e <xQueueGiveFromISR+0x82>
  4010ec:	2001      	movs	r0, #1
  4010ee:	e7d6      	b.n	40109e <xQueueGiveFromISR+0x82>
  4010f0:	0040095d 	.word	0x0040095d
  4010f4:	00400ad5 	.word	0x00400ad5
  4010f8:	00401c21 	.word	0x00401c21

004010fc <xQueueGenericReceive>:
{
  4010fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401100:	b084      	sub	sp, #16
  401102:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401104:	b198      	cbz	r0, 40112e <xQueueGenericReceive+0x32>
  401106:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401108:	b1e1      	cbz	r1, 401144 <xQueueGenericReceive+0x48>
  40110a:	4698      	mov	r8, r3
  40110c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40110e:	4b61      	ldr	r3, [pc, #388]	; (401294 <xQueueGenericReceive+0x198>)
  401110:	4798      	blx	r3
  401112:	bb28      	cbnz	r0, 401160 <xQueueGenericReceive+0x64>
  401114:	9b01      	ldr	r3, [sp, #4]
  401116:	b353      	cbz	r3, 40116e <xQueueGenericReceive+0x72>
  401118:	f04f 0380 	mov.w	r3, #128	; 0x80
  40111c:	b672      	cpsid	i
  40111e:	f383 8811 	msr	BASEPRI, r3
  401122:	f3bf 8f6f 	isb	sy
  401126:	f3bf 8f4f 	dsb	sy
  40112a:	b662      	cpsie	i
  40112c:	e7fe      	b.n	40112c <xQueueGenericReceive+0x30>
  40112e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401132:	b672      	cpsid	i
  401134:	f383 8811 	msr	BASEPRI, r3
  401138:	f3bf 8f6f 	isb	sy
  40113c:	f3bf 8f4f 	dsb	sy
  401140:	b662      	cpsie	i
  401142:	e7fe      	b.n	401142 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401144:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401146:	2a00      	cmp	r2, #0
  401148:	d0df      	beq.n	40110a <xQueueGenericReceive+0xe>
  40114a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40114e:	b672      	cpsid	i
  401150:	f383 8811 	msr	BASEPRI, r3
  401154:	f3bf 8f6f 	isb	sy
  401158:	f3bf 8f4f 	dsb	sy
  40115c:	b662      	cpsie	i
  40115e:	e7fe      	b.n	40115e <xQueueGenericReceive+0x62>
  401160:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401162:	4d4d      	ldr	r5, [pc, #308]	; (401298 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401164:	f8df a160 	ldr.w	sl, [pc, #352]	; 4012c8 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401168:	f8df 913c 	ldr.w	r9, [pc, #316]	; 4012a8 <xQueueGenericReceive+0x1ac>
  40116c:	e04b      	b.n	401206 <xQueueGenericReceive+0x10a>
  40116e:	2600      	movs	r6, #0
  401170:	e7f7      	b.n	401162 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401172:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401174:	4639      	mov	r1, r7
  401176:	4620      	mov	r0, r4
  401178:	4b48      	ldr	r3, [pc, #288]	; (40129c <xQueueGenericReceive+0x1a0>)
  40117a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  40117c:	f1b8 0f00 	cmp.w	r8, #0
  401180:	d11d      	bne.n	4011be <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401184:	3b01      	subs	r3, #1
  401186:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401188:	6823      	ldr	r3, [r4, #0]
  40118a:	b913      	cbnz	r3, 401192 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  40118c:	4b44      	ldr	r3, [pc, #272]	; (4012a0 <xQueueGenericReceive+0x1a4>)
  40118e:	4798      	blx	r3
  401190:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401192:	6923      	ldr	r3, [r4, #16]
  401194:	b16b      	cbz	r3, 4011b2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401196:	f104 0010 	add.w	r0, r4, #16
  40119a:	4b42      	ldr	r3, [pc, #264]	; (4012a4 <xQueueGenericReceive+0x1a8>)
  40119c:	4798      	blx	r3
  40119e:	2801      	cmp	r0, #1
  4011a0:	d107      	bne.n	4011b2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4011a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011a6:	4b40      	ldr	r3, [pc, #256]	; (4012a8 <xQueueGenericReceive+0x1ac>)
  4011a8:	601a      	str	r2, [r3, #0]
  4011aa:	f3bf 8f4f 	dsb	sy
  4011ae:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4011b2:	4b3e      	ldr	r3, [pc, #248]	; (4012ac <xQueueGenericReceive+0x1b0>)
  4011b4:	4798      	blx	r3
				return pdPASS;
  4011b6:	2001      	movs	r0, #1
}
  4011b8:	b004      	add	sp, #16
  4011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4011be:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4011c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4011c2:	2b00      	cmp	r3, #0
  4011c4:	d0f5      	beq.n	4011b2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011ca:	4b36      	ldr	r3, [pc, #216]	; (4012a4 <xQueueGenericReceive+0x1a8>)
  4011cc:	4798      	blx	r3
  4011ce:	2800      	cmp	r0, #0
  4011d0:	d0ef      	beq.n	4011b2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4011d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011d6:	4b34      	ldr	r3, [pc, #208]	; (4012a8 <xQueueGenericReceive+0x1ac>)
  4011d8:	601a      	str	r2, [r3, #0]
  4011da:	f3bf 8f4f 	dsb	sy
  4011de:	f3bf 8f6f 	isb	sy
  4011e2:	e7e6      	b.n	4011b2 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  4011e4:	4b31      	ldr	r3, [pc, #196]	; (4012ac <xQueueGenericReceive+0x1b0>)
  4011e6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4011e8:	2000      	movs	r0, #0
  4011ea:	e7e5      	b.n	4011b8 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  4011ec:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4011ee:	6860      	ldr	r0, [r4, #4]
  4011f0:	4b2f      	ldr	r3, [pc, #188]	; (4012b0 <xQueueGenericReceive+0x1b4>)
  4011f2:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4011f4:	4b2d      	ldr	r3, [pc, #180]	; (4012ac <xQueueGenericReceive+0x1b0>)
  4011f6:	4798      	blx	r3
  4011f8:	e030      	b.n	40125c <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  4011fa:	4620      	mov	r0, r4
  4011fc:	4b2d      	ldr	r3, [pc, #180]	; (4012b4 <xQueueGenericReceive+0x1b8>)
  4011fe:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401200:	4b2d      	ldr	r3, [pc, #180]	; (4012b8 <xQueueGenericReceive+0x1bc>)
  401202:	4798      	blx	r3
  401204:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401206:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401208:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40120a:	2b00      	cmp	r3, #0
  40120c:	d1b1      	bne.n	401172 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  40120e:	9b01      	ldr	r3, [sp, #4]
  401210:	2b00      	cmp	r3, #0
  401212:	d0e7      	beq.n	4011e4 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401214:	b90e      	cbnz	r6, 40121a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401216:	a802      	add	r0, sp, #8
  401218:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40121a:	4b24      	ldr	r3, [pc, #144]	; (4012ac <xQueueGenericReceive+0x1b0>)
  40121c:	4798      	blx	r3
		vTaskSuspendAll();
  40121e:	4b27      	ldr	r3, [pc, #156]	; (4012bc <xQueueGenericReceive+0x1c0>)
  401220:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401222:	47a8      	blx	r5
  401224:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401226:	f1b3 3fff 	cmp.w	r3, #4294967295
  40122a:	d101      	bne.n	401230 <xQueueGenericReceive+0x134>
  40122c:	2300      	movs	r3, #0
  40122e:	6463      	str	r3, [r4, #68]	; 0x44
  401230:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401232:	f1b3 3fff 	cmp.w	r3, #4294967295
  401236:	d101      	bne.n	40123c <xQueueGenericReceive+0x140>
  401238:	2300      	movs	r3, #0
  40123a:	64a3      	str	r3, [r4, #72]	; 0x48
  40123c:	4b1b      	ldr	r3, [pc, #108]	; (4012ac <xQueueGenericReceive+0x1b0>)
  40123e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401240:	a901      	add	r1, sp, #4
  401242:	a802      	add	r0, sp, #8
  401244:	4b1e      	ldr	r3, [pc, #120]	; (4012c0 <xQueueGenericReceive+0x1c4>)
  401246:	4798      	blx	r3
  401248:	b9e8      	cbnz	r0, 401286 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  40124a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40124c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  40124e:	4b17      	ldr	r3, [pc, #92]	; (4012ac <xQueueGenericReceive+0x1b0>)
  401250:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401252:	2e00      	cmp	r6, #0
  401254:	d1d1      	bne.n	4011fa <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401256:	6823      	ldr	r3, [r4, #0]
  401258:	2b00      	cmp	r3, #0
  40125a:	d0c7      	beq.n	4011ec <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40125c:	9901      	ldr	r1, [sp, #4]
  40125e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401262:	4b18      	ldr	r3, [pc, #96]	; (4012c4 <xQueueGenericReceive+0x1c8>)
  401264:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401266:	4620      	mov	r0, r4
  401268:	4b12      	ldr	r3, [pc, #72]	; (4012b4 <xQueueGenericReceive+0x1b8>)
  40126a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40126c:	4b12      	ldr	r3, [pc, #72]	; (4012b8 <xQueueGenericReceive+0x1bc>)
  40126e:	4798      	blx	r3
  401270:	2800      	cmp	r0, #0
  401272:	d1c7      	bne.n	401204 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401274:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401278:	f8c9 3000 	str.w	r3, [r9]
  40127c:	f3bf 8f4f 	dsb	sy
  401280:	f3bf 8f6f 	isb	sy
  401284:	e7be      	b.n	401204 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401286:	4620      	mov	r0, r4
  401288:	4b0a      	ldr	r3, [pc, #40]	; (4012b4 <xQueueGenericReceive+0x1b8>)
  40128a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40128c:	4b0a      	ldr	r3, [pc, #40]	; (4012b8 <xQueueGenericReceive+0x1bc>)
  40128e:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401290:	2000      	movs	r0, #0
  401292:	e791      	b.n	4011b8 <xQueueGenericReceive+0xbc>
  401294:	00401d89 	.word	0x00401d89
  401298:	00400765 	.word	0x00400765
  40129c:	00400b5d 	.word	0x00400b5d
  4012a0:	00401f09 	.word	0x00401f09
  4012a4:	00401c21 	.word	0x00401c21
  4012a8:	e000ed04 	.word	0xe000ed04
  4012ac:	004007b1 	.word	0x004007b1
  4012b0:	00401da9 	.word	0x00401da9
  4012b4:	00400b85 	.word	0x00400b85
  4012b8:	00401805 	.word	0x00401805
  4012bc:	0040169d 	.word	0x0040169d
  4012c0:	00401ce9 	.word	0x00401ce9
  4012c4:	00401b1d 	.word	0x00401b1d
  4012c8:	00401cb9 	.word	0x00401cb9

004012cc <vQueueAddToRegistry>:
	{
  4012cc:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4012ce:	4b0b      	ldr	r3, [pc, #44]	; (4012fc <vQueueAddToRegistry+0x30>)
  4012d0:	681b      	ldr	r3, [r3, #0]
  4012d2:	b153      	cbz	r3, 4012ea <vQueueAddToRegistry+0x1e>
  4012d4:	2301      	movs	r3, #1
  4012d6:	4c09      	ldr	r4, [pc, #36]	; (4012fc <vQueueAddToRegistry+0x30>)
  4012d8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4012dc:	b132      	cbz	r2, 4012ec <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4012de:	3301      	adds	r3, #1
  4012e0:	2b08      	cmp	r3, #8
  4012e2:	d1f9      	bne.n	4012d8 <vQueueAddToRegistry+0xc>
	}
  4012e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012e8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4012ea:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4012ec:	4a03      	ldr	r2, [pc, #12]	; (4012fc <vQueueAddToRegistry+0x30>)
  4012ee:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4012f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4012f6:	6058      	str	r0, [r3, #4]
				break;
  4012f8:	e7f4      	b.n	4012e4 <vQueueAddToRegistry+0x18>
  4012fa:	bf00      	nop
  4012fc:	2040ca2c 	.word	0x2040ca2c

00401300 <vQueueWaitForMessageRestricted>:
	{
  401300:	b570      	push	{r4, r5, r6, lr}
  401302:	4604      	mov	r4, r0
  401304:	460d      	mov	r5, r1
  401306:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401308:	4b0f      	ldr	r3, [pc, #60]	; (401348 <vQueueWaitForMessageRestricted+0x48>)
  40130a:	4798      	blx	r3
  40130c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40130e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401312:	d00b      	beq.n	40132c <vQueueWaitForMessageRestricted+0x2c>
  401314:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401316:	f1b3 3fff 	cmp.w	r3, #4294967295
  40131a:	d00a      	beq.n	401332 <vQueueWaitForMessageRestricted+0x32>
  40131c:	4b0b      	ldr	r3, [pc, #44]	; (40134c <vQueueWaitForMessageRestricted+0x4c>)
  40131e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401320:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401322:	b14b      	cbz	r3, 401338 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401324:	4620      	mov	r0, r4
  401326:	4b0a      	ldr	r3, [pc, #40]	; (401350 <vQueueWaitForMessageRestricted+0x50>)
  401328:	4798      	blx	r3
  40132a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  40132c:	2300      	movs	r3, #0
  40132e:	6463      	str	r3, [r4, #68]	; 0x44
  401330:	e7f0      	b.n	401314 <vQueueWaitForMessageRestricted+0x14>
  401332:	2300      	movs	r3, #0
  401334:	64a3      	str	r3, [r4, #72]	; 0x48
  401336:	e7f1      	b.n	40131c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401338:	4632      	mov	r2, r6
  40133a:	4629      	mov	r1, r5
  40133c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401340:	4b04      	ldr	r3, [pc, #16]	; (401354 <vQueueWaitForMessageRestricted+0x54>)
  401342:	4798      	blx	r3
  401344:	e7ee      	b.n	401324 <vQueueWaitForMessageRestricted+0x24>
  401346:	bf00      	nop
  401348:	00400765 	.word	0x00400765
  40134c:	004007b1 	.word	0x004007b1
  401350:	00400b85 	.word	0x00400b85
  401354:	00401ba1 	.word	0x00401ba1

00401358 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401358:	4b08      	ldr	r3, [pc, #32]	; (40137c <prvResetNextTaskUnblockTime+0x24>)
  40135a:	681b      	ldr	r3, [r3, #0]
  40135c:	681b      	ldr	r3, [r3, #0]
  40135e:	b13b      	cbz	r3, 401370 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401360:	4b06      	ldr	r3, [pc, #24]	; (40137c <prvResetNextTaskUnblockTime+0x24>)
  401362:	681b      	ldr	r3, [r3, #0]
  401364:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401366:	68db      	ldr	r3, [r3, #12]
  401368:	685a      	ldr	r2, [r3, #4]
  40136a:	4b05      	ldr	r3, [pc, #20]	; (401380 <prvResetNextTaskUnblockTime+0x28>)
  40136c:	601a      	str	r2, [r3, #0]
  40136e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401370:	f04f 32ff 	mov.w	r2, #4294967295
  401374:	4b02      	ldr	r3, [pc, #8]	; (401380 <prvResetNextTaskUnblockTime+0x28>)
  401376:	601a      	str	r2, [r3, #0]
  401378:	4770      	bx	lr
  40137a:	bf00      	nop
  40137c:	2040c208 	.word	0x2040c208
  401380:	2040c2b4 	.word	0x2040c2b4

00401384 <prvAddCurrentTaskToDelayedList>:
{
  401384:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401386:	4b0f      	ldr	r3, [pc, #60]	; (4013c4 <prvAddCurrentTaskToDelayedList+0x40>)
  401388:	681b      	ldr	r3, [r3, #0]
  40138a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  40138c:	4b0e      	ldr	r3, [pc, #56]	; (4013c8 <prvAddCurrentTaskToDelayedList+0x44>)
  40138e:	681b      	ldr	r3, [r3, #0]
  401390:	4298      	cmp	r0, r3
  401392:	d30e      	bcc.n	4013b2 <prvAddCurrentTaskToDelayedList+0x2e>
  401394:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401396:	4b0d      	ldr	r3, [pc, #52]	; (4013cc <prvAddCurrentTaskToDelayedList+0x48>)
  401398:	6818      	ldr	r0, [r3, #0]
  40139a:	4b0a      	ldr	r3, [pc, #40]	; (4013c4 <prvAddCurrentTaskToDelayedList+0x40>)
  40139c:	6819      	ldr	r1, [r3, #0]
  40139e:	3104      	adds	r1, #4
  4013a0:	4b0b      	ldr	r3, [pc, #44]	; (4013d0 <prvAddCurrentTaskToDelayedList+0x4c>)
  4013a2:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  4013a4:	4b0b      	ldr	r3, [pc, #44]	; (4013d4 <prvAddCurrentTaskToDelayedList+0x50>)
  4013a6:	681b      	ldr	r3, [r3, #0]
  4013a8:	429c      	cmp	r4, r3
  4013aa:	d201      	bcs.n	4013b0 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  4013ac:	4b09      	ldr	r3, [pc, #36]	; (4013d4 <prvAddCurrentTaskToDelayedList+0x50>)
  4013ae:	601c      	str	r4, [r3, #0]
  4013b0:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4013b2:	4b09      	ldr	r3, [pc, #36]	; (4013d8 <prvAddCurrentTaskToDelayedList+0x54>)
  4013b4:	6818      	ldr	r0, [r3, #0]
  4013b6:	4b03      	ldr	r3, [pc, #12]	; (4013c4 <prvAddCurrentTaskToDelayedList+0x40>)
  4013b8:	6819      	ldr	r1, [r3, #0]
  4013ba:	3104      	adds	r1, #4
  4013bc:	4b04      	ldr	r3, [pc, #16]	; (4013d0 <prvAddCurrentTaskToDelayedList+0x4c>)
  4013be:	4798      	blx	r3
  4013c0:	bd10      	pop	{r4, pc}
  4013c2:	bf00      	nop
  4013c4:	2040c204 	.word	0x2040c204
  4013c8:	2040c2fc 	.word	0x2040c2fc
  4013cc:	2040c208 	.word	0x2040c208
  4013d0:	0040064d 	.word	0x0040064d
  4013d4:	2040c2b4 	.word	0x2040c2b4
  4013d8:	2040c20c 	.word	0x2040c20c

004013dc <xTaskGenericCreate>:
{
  4013dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013e0:	b083      	sub	sp, #12
  4013e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4013e4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4013e8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4013ea:	b160      	cbz	r0, 401406 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4013ec:	2d04      	cmp	r5, #4
  4013ee:	d915      	bls.n	40141c <xTaskGenericCreate+0x40>
  4013f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013f4:	b672      	cpsid	i
  4013f6:	f383 8811 	msr	BASEPRI, r3
  4013fa:	f3bf 8f6f 	isb	sy
  4013fe:	f3bf 8f4f 	dsb	sy
  401402:	b662      	cpsie	i
  401404:	e7fe      	b.n	401404 <xTaskGenericCreate+0x28>
  401406:	f04f 0380 	mov.w	r3, #128	; 0x80
  40140a:	b672      	cpsid	i
  40140c:	f383 8811 	msr	BASEPRI, r3
  401410:	f3bf 8f6f 	isb	sy
  401414:	f3bf 8f4f 	dsb	sy
  401418:	b662      	cpsie	i
  40141a:	e7fe      	b.n	40141a <xTaskGenericCreate+0x3e>
  40141c:	9001      	str	r0, [sp, #4]
  40141e:	4698      	mov	r8, r3
  401420:	4691      	mov	r9, r2
  401422:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401424:	b936      	cbnz	r6, 401434 <xTaskGenericCreate+0x58>
  401426:	0090      	lsls	r0, r2, #2
  401428:	4b62      	ldr	r3, [pc, #392]	; (4015b4 <xTaskGenericCreate+0x1d8>)
  40142a:	4798      	blx	r3
		if( pxStack != NULL )
  40142c:	4606      	mov	r6, r0
  40142e:	2800      	cmp	r0, #0
  401430:	f000 809e 	beq.w	401570 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401434:	2058      	movs	r0, #88	; 0x58
  401436:	4b5f      	ldr	r3, [pc, #380]	; (4015b4 <xTaskGenericCreate+0x1d8>)
  401438:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40143a:	4604      	mov	r4, r0
  40143c:	2800      	cmp	r0, #0
  40143e:	f000 8094 	beq.w	40156a <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401442:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401444:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401448:	21a5      	movs	r1, #165	; 0xa5
  40144a:	4630      	mov	r0, r6
  40144c:	4b5a      	ldr	r3, [pc, #360]	; (4015b8 <xTaskGenericCreate+0x1dc>)
  40144e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401450:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401454:	444e      	add	r6, r9
  401456:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401458:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40145c:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401460:	783b      	ldrb	r3, [r7, #0]
  401462:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401466:	783b      	ldrb	r3, [r7, #0]
  401468:	2b00      	cmp	r3, #0
  40146a:	f040 8084 	bne.w	401576 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40146e:	2700      	movs	r7, #0
  401470:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401474:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401476:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401478:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40147a:	f104 0904 	add.w	r9, r4, #4
  40147e:	4648      	mov	r0, r9
  401480:	f8df b184 	ldr.w	fp, [pc, #388]	; 401608 <xTaskGenericCreate+0x22c>
  401484:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401486:	f104 0018 	add.w	r0, r4, #24
  40148a:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40148c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40148e:	f1c5 0305 	rsb	r3, r5, #5
  401492:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401494:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401496:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401498:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40149c:	4642      	mov	r2, r8
  40149e:	9901      	ldr	r1, [sp, #4]
  4014a0:	4630      	mov	r0, r6
  4014a2:	4b46      	ldr	r3, [pc, #280]	; (4015bc <xTaskGenericCreate+0x1e0>)
  4014a4:	4798      	blx	r3
  4014a6:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4014a8:	f1ba 0f00 	cmp.w	sl, #0
  4014ac:	d001      	beq.n	4014b2 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4014ae:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4014b2:	4b43      	ldr	r3, [pc, #268]	; (4015c0 <xTaskGenericCreate+0x1e4>)
  4014b4:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4014b6:	4a43      	ldr	r2, [pc, #268]	; (4015c4 <xTaskGenericCreate+0x1e8>)
  4014b8:	6813      	ldr	r3, [r2, #0]
  4014ba:	3301      	adds	r3, #1
  4014bc:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4014be:	4b42      	ldr	r3, [pc, #264]	; (4015c8 <xTaskGenericCreate+0x1ec>)
  4014c0:	681b      	ldr	r3, [r3, #0]
  4014c2:	2b00      	cmp	r3, #0
  4014c4:	d166      	bne.n	401594 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4014c6:	4b40      	ldr	r3, [pc, #256]	; (4015c8 <xTaskGenericCreate+0x1ec>)
  4014c8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4014ca:	6813      	ldr	r3, [r2, #0]
  4014cc:	2b01      	cmp	r3, #1
  4014ce:	d121      	bne.n	401514 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4014d0:	4f3e      	ldr	r7, [pc, #248]	; (4015cc <xTaskGenericCreate+0x1f0>)
  4014d2:	4638      	mov	r0, r7
  4014d4:	4e3e      	ldr	r6, [pc, #248]	; (4015d0 <xTaskGenericCreate+0x1f4>)
  4014d6:	47b0      	blx	r6
  4014d8:	f107 0014 	add.w	r0, r7, #20
  4014dc:	47b0      	blx	r6
  4014de:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4014e2:	47b0      	blx	r6
  4014e4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4014e8:	47b0      	blx	r6
  4014ea:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4014ee:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4014f0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40160c <xTaskGenericCreate+0x230>
  4014f4:	4640      	mov	r0, r8
  4014f6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4014f8:	4f36      	ldr	r7, [pc, #216]	; (4015d4 <xTaskGenericCreate+0x1f8>)
  4014fa:	4638      	mov	r0, r7
  4014fc:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4014fe:	4836      	ldr	r0, [pc, #216]	; (4015d8 <xTaskGenericCreate+0x1fc>)
  401500:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401502:	4836      	ldr	r0, [pc, #216]	; (4015dc <xTaskGenericCreate+0x200>)
  401504:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401506:	4836      	ldr	r0, [pc, #216]	; (4015e0 <xTaskGenericCreate+0x204>)
  401508:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  40150a:	4b36      	ldr	r3, [pc, #216]	; (4015e4 <xTaskGenericCreate+0x208>)
  40150c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401510:	4b35      	ldr	r3, [pc, #212]	; (4015e8 <xTaskGenericCreate+0x20c>)
  401512:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401514:	4a35      	ldr	r2, [pc, #212]	; (4015ec <xTaskGenericCreate+0x210>)
  401516:	6813      	ldr	r3, [r2, #0]
  401518:	3301      	adds	r3, #1
  40151a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40151c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40151e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401520:	4a33      	ldr	r2, [pc, #204]	; (4015f0 <xTaskGenericCreate+0x214>)
  401522:	6811      	ldr	r1, [r2, #0]
  401524:	2301      	movs	r3, #1
  401526:	4083      	lsls	r3, r0
  401528:	430b      	orrs	r3, r1
  40152a:	6013      	str	r3, [r2, #0]
  40152c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401530:	4649      	mov	r1, r9
  401532:	4b26      	ldr	r3, [pc, #152]	; (4015cc <xTaskGenericCreate+0x1f0>)
  401534:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401538:	4b2e      	ldr	r3, [pc, #184]	; (4015f4 <xTaskGenericCreate+0x218>)
  40153a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40153c:	4b2e      	ldr	r3, [pc, #184]	; (4015f8 <xTaskGenericCreate+0x21c>)
  40153e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401540:	4b2e      	ldr	r3, [pc, #184]	; (4015fc <xTaskGenericCreate+0x220>)
  401542:	681b      	ldr	r3, [r3, #0]
  401544:	2b00      	cmp	r3, #0
  401546:	d031      	beq.n	4015ac <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401548:	4b1f      	ldr	r3, [pc, #124]	; (4015c8 <xTaskGenericCreate+0x1ec>)
  40154a:	681b      	ldr	r3, [r3, #0]
  40154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40154e:	429d      	cmp	r5, r3
  401550:	d92e      	bls.n	4015b0 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401556:	4b2a      	ldr	r3, [pc, #168]	; (401600 <xTaskGenericCreate+0x224>)
  401558:	601a      	str	r2, [r3, #0]
  40155a:	f3bf 8f4f 	dsb	sy
  40155e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401562:	2001      	movs	r0, #1
}
  401564:	b003      	add	sp, #12
  401566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  40156a:	4630      	mov	r0, r6
  40156c:	4b25      	ldr	r3, [pc, #148]	; (401604 <xTaskGenericCreate+0x228>)
  40156e:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401570:	f04f 30ff 	mov.w	r0, #4294967295
  401574:	e7f6      	b.n	401564 <xTaskGenericCreate+0x188>
  401576:	463b      	mov	r3, r7
  401578:	f104 0234 	add.w	r2, r4, #52	; 0x34
  40157c:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40157e:	7859      	ldrb	r1, [r3, #1]
  401580:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401584:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401588:	2900      	cmp	r1, #0
  40158a:	f43f af70 	beq.w	40146e <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40158e:	42bb      	cmp	r3, r7
  401590:	d1f5      	bne.n	40157e <xTaskGenericCreate+0x1a2>
  401592:	e76c      	b.n	40146e <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401594:	4b19      	ldr	r3, [pc, #100]	; (4015fc <xTaskGenericCreate+0x220>)
  401596:	681b      	ldr	r3, [r3, #0]
  401598:	2b00      	cmp	r3, #0
  40159a:	d1bb      	bne.n	401514 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40159c:	4b0a      	ldr	r3, [pc, #40]	; (4015c8 <xTaskGenericCreate+0x1ec>)
  40159e:	681b      	ldr	r3, [r3, #0]
  4015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015a2:	429d      	cmp	r5, r3
  4015a4:	d3b6      	bcc.n	401514 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  4015a6:	4b08      	ldr	r3, [pc, #32]	; (4015c8 <xTaskGenericCreate+0x1ec>)
  4015a8:	601c      	str	r4, [r3, #0]
  4015aa:	e7b3      	b.n	401514 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  4015ac:	2001      	movs	r0, #1
  4015ae:	e7d9      	b.n	401564 <xTaskGenericCreate+0x188>
  4015b0:	2001      	movs	r0, #1
	return xReturn;
  4015b2:	e7d7      	b.n	401564 <xTaskGenericCreate+0x188>
  4015b4:	004009c1 	.word	0x004009c1
  4015b8:	0040676d 	.word	0x0040676d
  4015bc:	00400719 	.word	0x00400719
  4015c0:	00400765 	.word	0x00400765
  4015c4:	2040c274 	.word	0x2040c274
  4015c8:	2040c204 	.word	0x2040c204
  4015cc:	2040c210 	.word	0x2040c210
  4015d0:	00400619 	.word	0x00400619
  4015d4:	2040c2a0 	.word	0x2040c2a0
  4015d8:	2040c2bc 	.word	0x2040c2bc
  4015dc:	2040c2e8 	.word	0x2040c2e8
  4015e0:	2040c2d4 	.word	0x2040c2d4
  4015e4:	2040c208 	.word	0x2040c208
  4015e8:	2040c20c 	.word	0x2040c20c
  4015ec:	2040c280 	.word	0x2040c280
  4015f0:	2040c288 	.word	0x2040c288
  4015f4:	00400635 	.word	0x00400635
  4015f8:	004007b1 	.word	0x004007b1
  4015fc:	2040c2d0 	.word	0x2040c2d0
  401600:	e000ed04 	.word	0xe000ed04
  401604:	00400a31 	.word	0x00400a31
  401608:	0040062f 	.word	0x0040062f
  40160c:	2040c28c 	.word	0x2040c28c

00401610 <vTaskStartScheduler>:
{
  401610:	b510      	push	{r4, lr}
  401612:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401614:	2300      	movs	r3, #0
  401616:	9303      	str	r3, [sp, #12]
  401618:	9302      	str	r3, [sp, #8]
  40161a:	9301      	str	r3, [sp, #4]
  40161c:	9300      	str	r3, [sp, #0]
  40161e:	2282      	movs	r2, #130	; 0x82
  401620:	4916      	ldr	r1, [pc, #88]	; (40167c <vTaskStartScheduler+0x6c>)
  401622:	4817      	ldr	r0, [pc, #92]	; (401680 <vTaskStartScheduler+0x70>)
  401624:	4c17      	ldr	r4, [pc, #92]	; (401684 <vTaskStartScheduler+0x74>)
  401626:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401628:	2801      	cmp	r0, #1
  40162a:	d00b      	beq.n	401644 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  40162c:	bb20      	cbnz	r0, 401678 <vTaskStartScheduler+0x68>
  40162e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401632:	b672      	cpsid	i
  401634:	f383 8811 	msr	BASEPRI, r3
  401638:	f3bf 8f6f 	isb	sy
  40163c:	f3bf 8f4f 	dsb	sy
  401640:	b662      	cpsie	i
  401642:	e7fe      	b.n	401642 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  401644:	4b10      	ldr	r3, [pc, #64]	; (401688 <vTaskStartScheduler+0x78>)
  401646:	4798      	blx	r3
	if( xReturn == pdPASS )
  401648:	2801      	cmp	r0, #1
  40164a:	d1ef      	bne.n	40162c <vTaskStartScheduler+0x1c>
  40164c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401650:	b672      	cpsid	i
  401652:	f383 8811 	msr	BASEPRI, r3
  401656:	f3bf 8f6f 	isb	sy
  40165a:	f3bf 8f4f 	dsb	sy
  40165e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401660:	f04f 32ff 	mov.w	r2, #4294967295
  401664:	4b09      	ldr	r3, [pc, #36]	; (40168c <vTaskStartScheduler+0x7c>)
  401666:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401668:	2201      	movs	r2, #1
  40166a:	4b09      	ldr	r3, [pc, #36]	; (401690 <vTaskStartScheduler+0x80>)
  40166c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40166e:	2200      	movs	r2, #0
  401670:	4b08      	ldr	r3, [pc, #32]	; (401694 <vTaskStartScheduler+0x84>)
  401672:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401674:	4b08      	ldr	r3, [pc, #32]	; (401698 <vTaskStartScheduler+0x88>)
  401676:	4798      	blx	r3
}
  401678:	b004      	add	sp, #16
  40167a:	bd10      	pop	{r4, pc}
  40167c:	0040cab4 	.word	0x0040cab4
  401680:	004019b5 	.word	0x004019b5
  401684:	004013dd 	.word	0x004013dd
  401688:	00401ff5 	.word	0x00401ff5
  40168c:	2040c2b4 	.word	0x2040c2b4
  401690:	2040c2d0 	.word	0x2040c2d0
  401694:	2040c2fc 	.word	0x2040c2fc
  401698:	00400899 	.word	0x00400899

0040169c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  40169c:	4a02      	ldr	r2, [pc, #8]	; (4016a8 <vTaskSuspendAll+0xc>)
  40169e:	6813      	ldr	r3, [r2, #0]
  4016a0:	3301      	adds	r3, #1
  4016a2:	6013      	str	r3, [r2, #0]
  4016a4:	4770      	bx	lr
  4016a6:	bf00      	nop
  4016a8:	2040c27c 	.word	0x2040c27c

004016ac <xTaskGetTickCount>:
		xTicks = xTickCount;
  4016ac:	4b01      	ldr	r3, [pc, #4]	; (4016b4 <xTaskGetTickCount+0x8>)
  4016ae:	6818      	ldr	r0, [r3, #0]
}
  4016b0:	4770      	bx	lr
  4016b2:	bf00      	nop
  4016b4:	2040c2fc 	.word	0x2040c2fc

004016b8 <xTaskIncrementTick>:
{
  4016b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4016bc:	4b42      	ldr	r3, [pc, #264]	; (4017c8 <xTaskIncrementTick+0x110>)
  4016be:	681b      	ldr	r3, [r3, #0]
  4016c0:	2b00      	cmp	r3, #0
  4016c2:	d178      	bne.n	4017b6 <xTaskIncrementTick+0xfe>
		++xTickCount;
  4016c4:	4b41      	ldr	r3, [pc, #260]	; (4017cc <xTaskIncrementTick+0x114>)
  4016c6:	681a      	ldr	r2, [r3, #0]
  4016c8:	3201      	adds	r2, #1
  4016ca:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4016cc:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4016ce:	b9d6      	cbnz	r6, 401706 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4016d0:	4b3f      	ldr	r3, [pc, #252]	; (4017d0 <xTaskIncrementTick+0x118>)
  4016d2:	681b      	ldr	r3, [r3, #0]
  4016d4:	681b      	ldr	r3, [r3, #0]
  4016d6:	b153      	cbz	r3, 4016ee <xTaskIncrementTick+0x36>
  4016d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016dc:	b672      	cpsid	i
  4016de:	f383 8811 	msr	BASEPRI, r3
  4016e2:	f3bf 8f6f 	isb	sy
  4016e6:	f3bf 8f4f 	dsb	sy
  4016ea:	b662      	cpsie	i
  4016ec:	e7fe      	b.n	4016ec <xTaskIncrementTick+0x34>
  4016ee:	4a38      	ldr	r2, [pc, #224]	; (4017d0 <xTaskIncrementTick+0x118>)
  4016f0:	6811      	ldr	r1, [r2, #0]
  4016f2:	4b38      	ldr	r3, [pc, #224]	; (4017d4 <xTaskIncrementTick+0x11c>)
  4016f4:	6818      	ldr	r0, [r3, #0]
  4016f6:	6010      	str	r0, [r2, #0]
  4016f8:	6019      	str	r1, [r3, #0]
  4016fa:	4a37      	ldr	r2, [pc, #220]	; (4017d8 <xTaskIncrementTick+0x120>)
  4016fc:	6813      	ldr	r3, [r2, #0]
  4016fe:	3301      	adds	r3, #1
  401700:	6013      	str	r3, [r2, #0]
  401702:	4b36      	ldr	r3, [pc, #216]	; (4017dc <xTaskIncrementTick+0x124>)
  401704:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  401706:	4b36      	ldr	r3, [pc, #216]	; (4017e0 <xTaskIncrementTick+0x128>)
  401708:	681b      	ldr	r3, [r3, #0]
  40170a:	429e      	cmp	r6, r3
  40170c:	d218      	bcs.n	401740 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  40170e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401710:	4b34      	ldr	r3, [pc, #208]	; (4017e4 <xTaskIncrementTick+0x12c>)
  401712:	681b      	ldr	r3, [r3, #0]
  401714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401716:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40171a:	4a33      	ldr	r2, [pc, #204]	; (4017e8 <xTaskIncrementTick+0x130>)
  40171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401720:	2b02      	cmp	r3, #2
  401722:	bf28      	it	cs
  401724:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401726:	4b31      	ldr	r3, [pc, #196]	; (4017ec <xTaskIncrementTick+0x134>)
  401728:	681b      	ldr	r3, [r3, #0]
  40172a:	b90b      	cbnz	r3, 401730 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  40172c:	4b30      	ldr	r3, [pc, #192]	; (4017f0 <xTaskIncrementTick+0x138>)
  40172e:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401730:	4b30      	ldr	r3, [pc, #192]	; (4017f4 <xTaskIncrementTick+0x13c>)
  401732:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401734:	2b00      	cmp	r3, #0
}
  401736:	bf0c      	ite	eq
  401738:	4620      	moveq	r0, r4
  40173a:	2001      	movne	r0, #1
  40173c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401740:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401742:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4017d0 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401746:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401800 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  40174a:	4f2b      	ldr	r7, [pc, #172]	; (4017f8 <xTaskIncrementTick+0x140>)
  40174c:	e01f      	b.n	40178e <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  40174e:	f04f 32ff 	mov.w	r2, #4294967295
  401752:	4b23      	ldr	r3, [pc, #140]	; (4017e0 <xTaskIncrementTick+0x128>)
  401754:	601a      	str	r2, [r3, #0]
						break;
  401756:	e7db      	b.n	401710 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  401758:	4a21      	ldr	r2, [pc, #132]	; (4017e0 <xTaskIncrementTick+0x128>)
  40175a:	6013      	str	r3, [r2, #0]
							break;
  40175c:	e7d8      	b.n	401710 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40175e:	f105 0018 	add.w	r0, r5, #24
  401762:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  401764:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401766:	683a      	ldr	r2, [r7, #0]
  401768:	2301      	movs	r3, #1
  40176a:	4083      	lsls	r3, r0
  40176c:	4313      	orrs	r3, r2
  40176e:	603b      	str	r3, [r7, #0]
  401770:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401774:	4651      	mov	r1, sl
  401776:	4b1c      	ldr	r3, [pc, #112]	; (4017e8 <xTaskIncrementTick+0x130>)
  401778:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40177c:	4b1f      	ldr	r3, [pc, #124]	; (4017fc <xTaskIncrementTick+0x144>)
  40177e:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401780:	4b18      	ldr	r3, [pc, #96]	; (4017e4 <xTaskIncrementTick+0x12c>)
  401782:	681b      	ldr	r3, [r3, #0]
  401784:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401788:	429a      	cmp	r2, r3
  40178a:	bf28      	it	cs
  40178c:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40178e:	f8d9 3000 	ldr.w	r3, [r9]
  401792:	681b      	ldr	r3, [r3, #0]
  401794:	2b00      	cmp	r3, #0
  401796:	d0da      	beq.n	40174e <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401798:	f8d9 3000 	ldr.w	r3, [r9]
  40179c:	68db      	ldr	r3, [r3, #12]
  40179e:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4017a0:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4017a2:	429e      	cmp	r6, r3
  4017a4:	d3d8      	bcc.n	401758 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4017a6:	f105 0a04 	add.w	sl, r5, #4
  4017aa:	4650      	mov	r0, sl
  4017ac:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4017ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4017b0:	2b00      	cmp	r3, #0
  4017b2:	d1d4      	bne.n	40175e <xTaskIncrementTick+0xa6>
  4017b4:	e7d6      	b.n	401764 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4017b6:	4a0d      	ldr	r2, [pc, #52]	; (4017ec <xTaskIncrementTick+0x134>)
  4017b8:	6813      	ldr	r3, [r2, #0]
  4017ba:	3301      	adds	r3, #1
  4017bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4017be:	4b0c      	ldr	r3, [pc, #48]	; (4017f0 <xTaskIncrementTick+0x138>)
  4017c0:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4017c2:	2400      	movs	r4, #0
  4017c4:	e7b4      	b.n	401730 <xTaskIncrementTick+0x78>
  4017c6:	bf00      	nop
  4017c8:	2040c27c 	.word	0x2040c27c
  4017cc:	2040c2fc 	.word	0x2040c2fc
  4017d0:	2040c208 	.word	0x2040c208
  4017d4:	2040c20c 	.word	0x2040c20c
  4017d8:	2040c2b8 	.word	0x2040c2b8
  4017dc:	00401359 	.word	0x00401359
  4017e0:	2040c2b4 	.word	0x2040c2b4
  4017e4:	2040c204 	.word	0x2040c204
  4017e8:	2040c210 	.word	0x2040c210
  4017ec:	2040c278 	.word	0x2040c278
  4017f0:	00406031 	.word	0x00406031
  4017f4:	2040c300 	.word	0x2040c300
  4017f8:	2040c288 	.word	0x2040c288
  4017fc:	00400635 	.word	0x00400635
  401800:	00400681 	.word	0x00400681

00401804 <xTaskResumeAll>:
{
  401804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  401808:	4b38      	ldr	r3, [pc, #224]	; (4018ec <xTaskResumeAll+0xe8>)
  40180a:	681b      	ldr	r3, [r3, #0]
  40180c:	b953      	cbnz	r3, 401824 <xTaskResumeAll+0x20>
  40180e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401812:	b672      	cpsid	i
  401814:	f383 8811 	msr	BASEPRI, r3
  401818:	f3bf 8f6f 	isb	sy
  40181c:	f3bf 8f4f 	dsb	sy
  401820:	b662      	cpsie	i
  401822:	e7fe      	b.n	401822 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  401824:	4b32      	ldr	r3, [pc, #200]	; (4018f0 <xTaskResumeAll+0xec>)
  401826:	4798      	blx	r3
		--uxSchedulerSuspended;
  401828:	4b30      	ldr	r3, [pc, #192]	; (4018ec <xTaskResumeAll+0xe8>)
  40182a:	681a      	ldr	r2, [r3, #0]
  40182c:	3a01      	subs	r2, #1
  40182e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401830:	681b      	ldr	r3, [r3, #0]
  401832:	2b00      	cmp	r3, #0
  401834:	d155      	bne.n	4018e2 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401836:	4b2f      	ldr	r3, [pc, #188]	; (4018f4 <xTaskResumeAll+0xf0>)
  401838:	681b      	ldr	r3, [r3, #0]
  40183a:	2b00      	cmp	r3, #0
  40183c:	d132      	bne.n	4018a4 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40183e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401840:	4b2d      	ldr	r3, [pc, #180]	; (4018f8 <xTaskResumeAll+0xf4>)
  401842:	4798      	blx	r3
}
  401844:	4620      	mov	r0, r4
  401846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40184a:	68fb      	ldr	r3, [r7, #12]
  40184c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40184e:	f104 0018 	add.w	r0, r4, #24
  401852:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401854:	f104 0804 	add.w	r8, r4, #4
  401858:	4640      	mov	r0, r8
  40185a:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40185c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40185e:	682a      	ldr	r2, [r5, #0]
  401860:	2301      	movs	r3, #1
  401862:	4083      	lsls	r3, r0
  401864:	4313      	orrs	r3, r2
  401866:	602b      	str	r3, [r5, #0]
  401868:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40186c:	4641      	mov	r1, r8
  40186e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401872:	4b22      	ldr	r3, [pc, #136]	; (4018fc <xTaskResumeAll+0xf8>)
  401874:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401876:	4b22      	ldr	r3, [pc, #136]	; (401900 <xTaskResumeAll+0xfc>)
  401878:	681b      	ldr	r3, [r3, #0]
  40187a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40187e:	429a      	cmp	r2, r3
  401880:	d20c      	bcs.n	40189c <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401882:	683b      	ldr	r3, [r7, #0]
  401884:	2b00      	cmp	r3, #0
  401886:	d1e0      	bne.n	40184a <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401888:	4b1e      	ldr	r3, [pc, #120]	; (401904 <xTaskResumeAll+0x100>)
  40188a:	681b      	ldr	r3, [r3, #0]
  40188c:	b1db      	cbz	r3, 4018c6 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40188e:	4b1d      	ldr	r3, [pc, #116]	; (401904 <xTaskResumeAll+0x100>)
  401890:	681b      	ldr	r3, [r3, #0]
  401892:	b1c3      	cbz	r3, 4018c6 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401894:	4e1c      	ldr	r6, [pc, #112]	; (401908 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  401896:	4d1d      	ldr	r5, [pc, #116]	; (40190c <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  401898:	4c1a      	ldr	r4, [pc, #104]	; (401904 <xTaskResumeAll+0x100>)
  40189a:	e00e      	b.n	4018ba <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  40189c:	2201      	movs	r2, #1
  40189e:	4b1b      	ldr	r3, [pc, #108]	; (40190c <xTaskResumeAll+0x108>)
  4018a0:	601a      	str	r2, [r3, #0]
  4018a2:	e7ee      	b.n	401882 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4018a4:	4f1a      	ldr	r7, [pc, #104]	; (401910 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4018a6:	4e1b      	ldr	r6, [pc, #108]	; (401914 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  4018a8:	4d1b      	ldr	r5, [pc, #108]	; (401918 <xTaskResumeAll+0x114>)
  4018aa:	f8df 9074 	ldr.w	r9, [pc, #116]	; 401920 <xTaskResumeAll+0x11c>
  4018ae:	e7e8      	b.n	401882 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4018b0:	6823      	ldr	r3, [r4, #0]
  4018b2:	3b01      	subs	r3, #1
  4018b4:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4018b6:	6823      	ldr	r3, [r4, #0]
  4018b8:	b12b      	cbz	r3, 4018c6 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4018ba:	47b0      	blx	r6
  4018bc:	2800      	cmp	r0, #0
  4018be:	d0f7      	beq.n	4018b0 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4018c0:	2301      	movs	r3, #1
  4018c2:	602b      	str	r3, [r5, #0]
  4018c4:	e7f4      	b.n	4018b0 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4018c6:	4b11      	ldr	r3, [pc, #68]	; (40190c <xTaskResumeAll+0x108>)
  4018c8:	681b      	ldr	r3, [r3, #0]
  4018ca:	2b01      	cmp	r3, #1
  4018cc:	d10b      	bne.n	4018e6 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4018ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018d2:	4b12      	ldr	r3, [pc, #72]	; (40191c <xTaskResumeAll+0x118>)
  4018d4:	601a      	str	r2, [r3, #0]
  4018d6:	f3bf 8f4f 	dsb	sy
  4018da:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4018de:	2401      	movs	r4, #1
  4018e0:	e7ae      	b.n	401840 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4018e2:	2400      	movs	r4, #0
  4018e4:	e7ac      	b.n	401840 <xTaskResumeAll+0x3c>
  4018e6:	2400      	movs	r4, #0
  4018e8:	e7aa      	b.n	401840 <xTaskResumeAll+0x3c>
  4018ea:	bf00      	nop
  4018ec:	2040c27c 	.word	0x2040c27c
  4018f0:	00400765 	.word	0x00400765
  4018f4:	2040c274 	.word	0x2040c274
  4018f8:	004007b1 	.word	0x004007b1
  4018fc:	00400635 	.word	0x00400635
  401900:	2040c204 	.word	0x2040c204
  401904:	2040c278 	.word	0x2040c278
  401908:	004016b9 	.word	0x004016b9
  40190c:	2040c300 	.word	0x2040c300
  401910:	2040c2bc 	.word	0x2040c2bc
  401914:	00400681 	.word	0x00400681
  401918:	2040c288 	.word	0x2040c288
  40191c:	e000ed04 	.word	0xe000ed04
  401920:	2040c210 	.word	0x2040c210

00401924 <vTaskDelay>:
	{
  401924:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401926:	2800      	cmp	r0, #0
  401928:	d029      	beq.n	40197e <vTaskDelay+0x5a>
  40192a:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  40192c:	4b18      	ldr	r3, [pc, #96]	; (401990 <vTaskDelay+0x6c>)
  40192e:	681b      	ldr	r3, [r3, #0]
  401930:	b153      	cbz	r3, 401948 <vTaskDelay+0x24>
  401932:	f04f 0380 	mov.w	r3, #128	; 0x80
  401936:	b672      	cpsid	i
  401938:	f383 8811 	msr	BASEPRI, r3
  40193c:	f3bf 8f6f 	isb	sy
  401940:	f3bf 8f4f 	dsb	sy
  401944:	b662      	cpsie	i
  401946:	e7fe      	b.n	401946 <vTaskDelay+0x22>
			vTaskSuspendAll();
  401948:	4b12      	ldr	r3, [pc, #72]	; (401994 <vTaskDelay+0x70>)
  40194a:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  40194c:	4b12      	ldr	r3, [pc, #72]	; (401998 <vTaskDelay+0x74>)
  40194e:	681b      	ldr	r3, [r3, #0]
  401950:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401952:	4b12      	ldr	r3, [pc, #72]	; (40199c <vTaskDelay+0x78>)
  401954:	6818      	ldr	r0, [r3, #0]
  401956:	3004      	adds	r0, #4
  401958:	4b11      	ldr	r3, [pc, #68]	; (4019a0 <vTaskDelay+0x7c>)
  40195a:	4798      	blx	r3
  40195c:	b948      	cbnz	r0, 401972 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40195e:	4b0f      	ldr	r3, [pc, #60]	; (40199c <vTaskDelay+0x78>)
  401960:	681a      	ldr	r2, [r3, #0]
  401962:	4910      	ldr	r1, [pc, #64]	; (4019a4 <vTaskDelay+0x80>)
  401964:	680b      	ldr	r3, [r1, #0]
  401966:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401968:	2201      	movs	r2, #1
  40196a:	4082      	lsls	r2, r0
  40196c:	ea23 0302 	bic.w	r3, r3, r2
  401970:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401972:	4620      	mov	r0, r4
  401974:	4b0c      	ldr	r3, [pc, #48]	; (4019a8 <vTaskDelay+0x84>)
  401976:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401978:	4b0c      	ldr	r3, [pc, #48]	; (4019ac <vTaskDelay+0x88>)
  40197a:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  40197c:	b938      	cbnz	r0, 40198e <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  40197e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401982:	4b0b      	ldr	r3, [pc, #44]	; (4019b0 <vTaskDelay+0x8c>)
  401984:	601a      	str	r2, [r3, #0]
  401986:	f3bf 8f4f 	dsb	sy
  40198a:	f3bf 8f6f 	isb	sy
  40198e:	bd10      	pop	{r4, pc}
  401990:	2040c27c 	.word	0x2040c27c
  401994:	0040169d 	.word	0x0040169d
  401998:	2040c2fc 	.word	0x2040c2fc
  40199c:	2040c204 	.word	0x2040c204
  4019a0:	00400681 	.word	0x00400681
  4019a4:	2040c288 	.word	0x2040c288
  4019a8:	00401385 	.word	0x00401385
  4019ac:	00401805 	.word	0x00401805
  4019b0:	e000ed04 	.word	0xe000ed04

004019b4 <prvIdleTask>:
{
  4019b4:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4019b6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 401a40 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4019ba:	4e19      	ldr	r6, [pc, #100]	; (401a20 <prvIdleTask+0x6c>)
				taskYIELD();
  4019bc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 401a44 <prvIdleTask+0x90>
  4019c0:	e02a      	b.n	401a18 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4019c2:	4b18      	ldr	r3, [pc, #96]	; (401a24 <prvIdleTask+0x70>)
  4019c4:	681b      	ldr	r3, [r3, #0]
  4019c6:	2b01      	cmp	r3, #1
  4019c8:	d81e      	bhi.n	401a08 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4019ca:	682b      	ldr	r3, [r5, #0]
  4019cc:	2b00      	cmp	r3, #0
  4019ce:	d0f8      	beq.n	4019c2 <prvIdleTask+0xe>
			vTaskSuspendAll();
  4019d0:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4019d2:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4019d4:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4019d6:	2c00      	cmp	r4, #0
  4019d8:	d0f7      	beq.n	4019ca <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4019da:	4b13      	ldr	r3, [pc, #76]	; (401a28 <prvIdleTask+0x74>)
  4019dc:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4019de:	68f3      	ldr	r3, [r6, #12]
  4019e0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4019e2:	1d20      	adds	r0, r4, #4
  4019e4:	4b11      	ldr	r3, [pc, #68]	; (401a2c <prvIdleTask+0x78>)
  4019e6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4019e8:	4a11      	ldr	r2, [pc, #68]	; (401a30 <prvIdleTask+0x7c>)
  4019ea:	6813      	ldr	r3, [r2, #0]
  4019ec:	3b01      	subs	r3, #1
  4019ee:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4019f0:	682b      	ldr	r3, [r5, #0]
  4019f2:	3b01      	subs	r3, #1
  4019f4:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4019f6:	4b0f      	ldr	r3, [pc, #60]	; (401a34 <prvIdleTask+0x80>)
  4019f8:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4019fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4019fc:	f8df a048 	ldr.w	sl, [pc, #72]	; 401a48 <prvIdleTask+0x94>
  401a00:	47d0      	blx	sl
		vPortFree( pxTCB );
  401a02:	4620      	mov	r0, r4
  401a04:	47d0      	blx	sl
  401a06:	e7e0      	b.n	4019ca <prvIdleTask+0x16>
				taskYIELD();
  401a08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401a0c:	f8c9 3000 	str.w	r3, [r9]
  401a10:	f3bf 8f4f 	dsb	sy
  401a14:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401a18:	4d07      	ldr	r5, [pc, #28]	; (401a38 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  401a1a:	4f08      	ldr	r7, [pc, #32]	; (401a3c <prvIdleTask+0x88>)
  401a1c:	e7d5      	b.n	4019ca <prvIdleTask+0x16>
  401a1e:	bf00      	nop
  401a20:	2040c2e8 	.word	0x2040c2e8
  401a24:	2040c210 	.word	0x2040c210
  401a28:	00400765 	.word	0x00400765
  401a2c:	00400681 	.word	0x00400681
  401a30:	2040c274 	.word	0x2040c274
  401a34:	004007b1 	.word	0x004007b1
  401a38:	2040c284 	.word	0x2040c284
  401a3c:	00401805 	.word	0x00401805
  401a40:	0040169d 	.word	0x0040169d
  401a44:	e000ed04 	.word	0xe000ed04
  401a48:	00400a31 	.word	0x00400a31

00401a4c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401a4c:	4b2d      	ldr	r3, [pc, #180]	; (401b04 <vTaskSwitchContext+0xb8>)
  401a4e:	681b      	ldr	r3, [r3, #0]
  401a50:	2b00      	cmp	r3, #0
  401a52:	d12c      	bne.n	401aae <vTaskSwitchContext+0x62>
{
  401a54:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  401a56:	2200      	movs	r2, #0
  401a58:	4b2b      	ldr	r3, [pc, #172]	; (401b08 <vTaskSwitchContext+0xbc>)
  401a5a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401a5c:	4b2b      	ldr	r3, [pc, #172]	; (401b0c <vTaskSwitchContext+0xc0>)
  401a5e:	681b      	ldr	r3, [r3, #0]
  401a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401a62:	681a      	ldr	r2, [r3, #0]
  401a64:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401a68:	d103      	bne.n	401a72 <vTaskSwitchContext+0x26>
  401a6a:	685a      	ldr	r2, [r3, #4]
  401a6c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401a70:	d021      	beq.n	401ab6 <vTaskSwitchContext+0x6a>
  401a72:	4b26      	ldr	r3, [pc, #152]	; (401b0c <vTaskSwitchContext+0xc0>)
  401a74:	6818      	ldr	r0, [r3, #0]
  401a76:	6819      	ldr	r1, [r3, #0]
  401a78:	3134      	adds	r1, #52	; 0x34
  401a7a:	4b25      	ldr	r3, [pc, #148]	; (401b10 <vTaskSwitchContext+0xc4>)
  401a7c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401a7e:	4b25      	ldr	r3, [pc, #148]	; (401b14 <vTaskSwitchContext+0xc8>)
  401a80:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401a82:	fab3 f383 	clz	r3, r3
  401a86:	b2db      	uxtb	r3, r3
  401a88:	f1c3 031f 	rsb	r3, r3, #31
  401a8c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401a90:	4a21      	ldr	r2, [pc, #132]	; (401b18 <vTaskSwitchContext+0xcc>)
  401a92:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401a96:	b9ba      	cbnz	r2, 401ac8 <vTaskSwitchContext+0x7c>
	__asm volatile
  401a98:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a9c:	b672      	cpsid	i
  401a9e:	f383 8811 	msr	BASEPRI, r3
  401aa2:	f3bf 8f6f 	isb	sy
  401aa6:	f3bf 8f4f 	dsb	sy
  401aaa:	b662      	cpsie	i
  401aac:	e7fe      	b.n	401aac <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  401aae:	2201      	movs	r2, #1
  401ab0:	4b15      	ldr	r3, [pc, #84]	; (401b08 <vTaskSwitchContext+0xbc>)
  401ab2:	601a      	str	r2, [r3, #0]
  401ab4:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  401ab6:	689a      	ldr	r2, [r3, #8]
  401ab8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401abc:	d1d9      	bne.n	401a72 <vTaskSwitchContext+0x26>
  401abe:	68db      	ldr	r3, [r3, #12]
  401ac0:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401ac4:	d1d5      	bne.n	401a72 <vTaskSwitchContext+0x26>
  401ac6:	e7da      	b.n	401a7e <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401ac8:	4a13      	ldr	r2, [pc, #76]	; (401b18 <vTaskSwitchContext+0xcc>)
  401aca:	0099      	lsls	r1, r3, #2
  401acc:	18c8      	adds	r0, r1, r3
  401ace:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401ad2:	6844      	ldr	r4, [r0, #4]
  401ad4:	6864      	ldr	r4, [r4, #4]
  401ad6:	6044      	str	r4, [r0, #4]
  401ad8:	4419      	add	r1, r3
  401ada:	4602      	mov	r2, r0
  401adc:	3208      	adds	r2, #8
  401ade:	4294      	cmp	r4, r2
  401ae0:	d009      	beq.n	401af6 <vTaskSwitchContext+0xaa>
  401ae2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401ae6:	4a0c      	ldr	r2, [pc, #48]	; (401b18 <vTaskSwitchContext+0xcc>)
  401ae8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401aec:	685b      	ldr	r3, [r3, #4]
  401aee:	68da      	ldr	r2, [r3, #12]
  401af0:	4b06      	ldr	r3, [pc, #24]	; (401b0c <vTaskSwitchContext+0xc0>)
  401af2:	601a      	str	r2, [r3, #0]
  401af4:	bd10      	pop	{r4, pc}
  401af6:	6860      	ldr	r0, [r4, #4]
  401af8:	4a07      	ldr	r2, [pc, #28]	; (401b18 <vTaskSwitchContext+0xcc>)
  401afa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401afe:	6050      	str	r0, [r2, #4]
  401b00:	e7ef      	b.n	401ae2 <vTaskSwitchContext+0x96>
  401b02:	bf00      	nop
  401b04:	2040c27c 	.word	0x2040c27c
  401b08:	2040c300 	.word	0x2040c300
  401b0c:	2040c204 	.word	0x2040c204
  401b10:	00406019 	.word	0x00406019
  401b14:	2040c288 	.word	0x2040c288
  401b18:	2040c210 	.word	0x2040c210

00401b1c <vTaskPlaceOnEventList>:
{
  401b1c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  401b1e:	b1e0      	cbz	r0, 401b5a <vTaskPlaceOnEventList+0x3e>
  401b20:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401b22:	4d17      	ldr	r5, [pc, #92]	; (401b80 <vTaskPlaceOnEventList+0x64>)
  401b24:	6829      	ldr	r1, [r5, #0]
  401b26:	3118      	adds	r1, #24
  401b28:	4b16      	ldr	r3, [pc, #88]	; (401b84 <vTaskPlaceOnEventList+0x68>)
  401b2a:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401b2c:	6828      	ldr	r0, [r5, #0]
  401b2e:	3004      	adds	r0, #4
  401b30:	4b15      	ldr	r3, [pc, #84]	; (401b88 <vTaskPlaceOnEventList+0x6c>)
  401b32:	4798      	blx	r3
  401b34:	b940      	cbnz	r0, 401b48 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401b36:	682a      	ldr	r2, [r5, #0]
  401b38:	4914      	ldr	r1, [pc, #80]	; (401b8c <vTaskPlaceOnEventList+0x70>)
  401b3a:	680b      	ldr	r3, [r1, #0]
  401b3c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401b3e:	2201      	movs	r2, #1
  401b40:	4082      	lsls	r2, r0
  401b42:	ea23 0302 	bic.w	r3, r3, r2
  401b46:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  401b48:	f1b4 3fff 	cmp.w	r4, #4294967295
  401b4c:	d010      	beq.n	401b70 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  401b4e:	4b10      	ldr	r3, [pc, #64]	; (401b90 <vTaskPlaceOnEventList+0x74>)
  401b50:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401b52:	4420      	add	r0, r4
  401b54:	4b0f      	ldr	r3, [pc, #60]	; (401b94 <vTaskPlaceOnEventList+0x78>)
  401b56:	4798      	blx	r3
  401b58:	bd38      	pop	{r3, r4, r5, pc}
  401b5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b5e:	b672      	cpsid	i
  401b60:	f383 8811 	msr	BASEPRI, r3
  401b64:	f3bf 8f6f 	isb	sy
  401b68:	f3bf 8f4f 	dsb	sy
  401b6c:	b662      	cpsie	i
  401b6e:	e7fe      	b.n	401b6e <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401b70:	4b03      	ldr	r3, [pc, #12]	; (401b80 <vTaskPlaceOnEventList+0x64>)
  401b72:	6819      	ldr	r1, [r3, #0]
  401b74:	3104      	adds	r1, #4
  401b76:	4808      	ldr	r0, [pc, #32]	; (401b98 <vTaskPlaceOnEventList+0x7c>)
  401b78:	4b08      	ldr	r3, [pc, #32]	; (401b9c <vTaskPlaceOnEventList+0x80>)
  401b7a:	4798      	blx	r3
  401b7c:	bd38      	pop	{r3, r4, r5, pc}
  401b7e:	bf00      	nop
  401b80:	2040c204 	.word	0x2040c204
  401b84:	0040064d 	.word	0x0040064d
  401b88:	00400681 	.word	0x00400681
  401b8c:	2040c288 	.word	0x2040c288
  401b90:	2040c2fc 	.word	0x2040c2fc
  401b94:	00401385 	.word	0x00401385
  401b98:	2040c2d4 	.word	0x2040c2d4
  401b9c:	00400635 	.word	0x00400635

00401ba0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  401ba0:	b1e8      	cbz	r0, 401bde <vTaskPlaceOnEventListRestricted+0x3e>
	{
  401ba2:	b570      	push	{r4, r5, r6, lr}
  401ba4:	4615      	mov	r5, r2
  401ba6:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401ba8:	4e16      	ldr	r6, [pc, #88]	; (401c04 <vTaskPlaceOnEventListRestricted+0x64>)
  401baa:	6831      	ldr	r1, [r6, #0]
  401bac:	3118      	adds	r1, #24
  401bae:	4b16      	ldr	r3, [pc, #88]	; (401c08 <vTaskPlaceOnEventListRestricted+0x68>)
  401bb0:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401bb2:	6830      	ldr	r0, [r6, #0]
  401bb4:	3004      	adds	r0, #4
  401bb6:	4b15      	ldr	r3, [pc, #84]	; (401c0c <vTaskPlaceOnEventListRestricted+0x6c>)
  401bb8:	4798      	blx	r3
  401bba:	b940      	cbnz	r0, 401bce <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401bbc:	6832      	ldr	r2, [r6, #0]
  401bbe:	4914      	ldr	r1, [pc, #80]	; (401c10 <vTaskPlaceOnEventListRestricted+0x70>)
  401bc0:	680b      	ldr	r3, [r1, #0]
  401bc2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401bc4:	2201      	movs	r2, #1
  401bc6:	4082      	lsls	r2, r0
  401bc8:	ea23 0302 	bic.w	r3, r3, r2
  401bcc:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  401bce:	2d01      	cmp	r5, #1
  401bd0:	d010      	beq.n	401bf4 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  401bd2:	4b10      	ldr	r3, [pc, #64]	; (401c14 <vTaskPlaceOnEventListRestricted+0x74>)
  401bd4:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401bd6:	4420      	add	r0, r4
  401bd8:	4b0f      	ldr	r3, [pc, #60]	; (401c18 <vTaskPlaceOnEventListRestricted+0x78>)
  401bda:	4798      	blx	r3
  401bdc:	bd70      	pop	{r4, r5, r6, pc}
  401bde:	f04f 0380 	mov.w	r3, #128	; 0x80
  401be2:	b672      	cpsid	i
  401be4:	f383 8811 	msr	BASEPRI, r3
  401be8:	f3bf 8f6f 	isb	sy
  401bec:	f3bf 8f4f 	dsb	sy
  401bf0:	b662      	cpsie	i
  401bf2:	e7fe      	b.n	401bf2 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401bf4:	4b03      	ldr	r3, [pc, #12]	; (401c04 <vTaskPlaceOnEventListRestricted+0x64>)
  401bf6:	6819      	ldr	r1, [r3, #0]
  401bf8:	3104      	adds	r1, #4
  401bfa:	4808      	ldr	r0, [pc, #32]	; (401c1c <vTaskPlaceOnEventListRestricted+0x7c>)
  401bfc:	4b02      	ldr	r3, [pc, #8]	; (401c08 <vTaskPlaceOnEventListRestricted+0x68>)
  401bfe:	4798      	blx	r3
  401c00:	bd70      	pop	{r4, r5, r6, pc}
  401c02:	bf00      	nop
  401c04:	2040c204 	.word	0x2040c204
  401c08:	00400635 	.word	0x00400635
  401c0c:	00400681 	.word	0x00400681
  401c10:	2040c288 	.word	0x2040c288
  401c14:	2040c2fc 	.word	0x2040c2fc
  401c18:	00401385 	.word	0x00401385
  401c1c:	2040c2d4 	.word	0x2040c2d4

00401c20 <xTaskRemoveFromEventList>:
{
  401c20:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401c22:	68c3      	ldr	r3, [r0, #12]
  401c24:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401c26:	b324      	cbz	r4, 401c72 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401c28:	f104 0518 	add.w	r5, r4, #24
  401c2c:	4628      	mov	r0, r5
  401c2e:	4b1a      	ldr	r3, [pc, #104]	; (401c98 <xTaskRemoveFromEventList+0x78>)
  401c30:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c32:	4b1a      	ldr	r3, [pc, #104]	; (401c9c <xTaskRemoveFromEventList+0x7c>)
  401c34:	681b      	ldr	r3, [r3, #0]
  401c36:	bb3b      	cbnz	r3, 401c88 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401c38:	1d25      	adds	r5, r4, #4
  401c3a:	4628      	mov	r0, r5
  401c3c:	4b16      	ldr	r3, [pc, #88]	; (401c98 <xTaskRemoveFromEventList+0x78>)
  401c3e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401c40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401c42:	4a17      	ldr	r2, [pc, #92]	; (401ca0 <xTaskRemoveFromEventList+0x80>)
  401c44:	6811      	ldr	r1, [r2, #0]
  401c46:	2301      	movs	r3, #1
  401c48:	4083      	lsls	r3, r0
  401c4a:	430b      	orrs	r3, r1
  401c4c:	6013      	str	r3, [r2, #0]
  401c4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c52:	4629      	mov	r1, r5
  401c54:	4b13      	ldr	r3, [pc, #76]	; (401ca4 <xTaskRemoveFromEventList+0x84>)
  401c56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401c5a:	4b13      	ldr	r3, [pc, #76]	; (401ca8 <xTaskRemoveFromEventList+0x88>)
  401c5c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401c5e:	4b13      	ldr	r3, [pc, #76]	; (401cac <xTaskRemoveFromEventList+0x8c>)
  401c60:	681b      	ldr	r3, [r3, #0]
  401c62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c66:	429a      	cmp	r2, r3
  401c68:	d913      	bls.n	401c92 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  401c6a:	2001      	movs	r0, #1
  401c6c:	4b10      	ldr	r3, [pc, #64]	; (401cb0 <xTaskRemoveFromEventList+0x90>)
  401c6e:	6018      	str	r0, [r3, #0]
  401c70:	bd38      	pop	{r3, r4, r5, pc}
  401c72:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c76:	b672      	cpsid	i
  401c78:	f383 8811 	msr	BASEPRI, r3
  401c7c:	f3bf 8f6f 	isb	sy
  401c80:	f3bf 8f4f 	dsb	sy
  401c84:	b662      	cpsie	i
  401c86:	e7fe      	b.n	401c86 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401c88:	4629      	mov	r1, r5
  401c8a:	480a      	ldr	r0, [pc, #40]	; (401cb4 <xTaskRemoveFromEventList+0x94>)
  401c8c:	4b06      	ldr	r3, [pc, #24]	; (401ca8 <xTaskRemoveFromEventList+0x88>)
  401c8e:	4798      	blx	r3
  401c90:	e7e5      	b.n	401c5e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  401c92:	2000      	movs	r0, #0
}
  401c94:	bd38      	pop	{r3, r4, r5, pc}
  401c96:	bf00      	nop
  401c98:	00400681 	.word	0x00400681
  401c9c:	2040c27c 	.word	0x2040c27c
  401ca0:	2040c288 	.word	0x2040c288
  401ca4:	2040c210 	.word	0x2040c210
  401ca8:	00400635 	.word	0x00400635
  401cac:	2040c204 	.word	0x2040c204
  401cb0:	2040c300 	.word	0x2040c300
  401cb4:	2040c2bc 	.word	0x2040c2bc

00401cb8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  401cb8:	b130      	cbz	r0, 401cc8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401cba:	4a09      	ldr	r2, [pc, #36]	; (401ce0 <vTaskSetTimeOutState+0x28>)
  401cbc:	6812      	ldr	r2, [r2, #0]
  401cbe:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401cc0:	4a08      	ldr	r2, [pc, #32]	; (401ce4 <vTaskSetTimeOutState+0x2c>)
  401cc2:	6812      	ldr	r2, [r2, #0]
  401cc4:	6042      	str	r2, [r0, #4]
  401cc6:	4770      	bx	lr
  401cc8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ccc:	b672      	cpsid	i
  401cce:	f383 8811 	msr	BASEPRI, r3
  401cd2:	f3bf 8f6f 	isb	sy
  401cd6:	f3bf 8f4f 	dsb	sy
  401cda:	b662      	cpsie	i
  401cdc:	e7fe      	b.n	401cdc <vTaskSetTimeOutState+0x24>
  401cde:	bf00      	nop
  401ce0:	2040c2b8 	.word	0x2040c2b8
  401ce4:	2040c2fc 	.word	0x2040c2fc

00401ce8 <xTaskCheckForTimeOut>:
{
  401ce8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  401cea:	b1c0      	cbz	r0, 401d1e <xTaskCheckForTimeOut+0x36>
  401cec:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401cee:	b309      	cbz	r1, 401d34 <xTaskCheckForTimeOut+0x4c>
  401cf0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401cf2:	4b1d      	ldr	r3, [pc, #116]	; (401d68 <xTaskCheckForTimeOut+0x80>)
  401cf4:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401cf6:	4b1d      	ldr	r3, [pc, #116]	; (401d6c <xTaskCheckForTimeOut+0x84>)
  401cf8:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  401cfa:	682b      	ldr	r3, [r5, #0]
  401cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d00:	d02e      	beq.n	401d60 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401d02:	491b      	ldr	r1, [pc, #108]	; (401d70 <xTaskCheckForTimeOut+0x88>)
  401d04:	6809      	ldr	r1, [r1, #0]
  401d06:	6820      	ldr	r0, [r4, #0]
  401d08:	4288      	cmp	r0, r1
  401d0a:	d002      	beq.n	401d12 <xTaskCheckForTimeOut+0x2a>
  401d0c:	6861      	ldr	r1, [r4, #4]
  401d0e:	428a      	cmp	r2, r1
  401d10:	d228      	bcs.n	401d64 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401d12:	6861      	ldr	r1, [r4, #4]
  401d14:	1a50      	subs	r0, r2, r1
  401d16:	4283      	cmp	r3, r0
  401d18:	d817      	bhi.n	401d4a <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  401d1a:	2401      	movs	r4, #1
  401d1c:	e01c      	b.n	401d58 <xTaskCheckForTimeOut+0x70>
  401d1e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d22:	b672      	cpsid	i
  401d24:	f383 8811 	msr	BASEPRI, r3
  401d28:	f3bf 8f6f 	isb	sy
  401d2c:	f3bf 8f4f 	dsb	sy
  401d30:	b662      	cpsie	i
  401d32:	e7fe      	b.n	401d32 <xTaskCheckForTimeOut+0x4a>
  401d34:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d38:	b672      	cpsid	i
  401d3a:	f383 8811 	msr	BASEPRI, r3
  401d3e:	f3bf 8f6f 	isb	sy
  401d42:	f3bf 8f4f 	dsb	sy
  401d46:	b662      	cpsie	i
  401d48:	e7fe      	b.n	401d48 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401d4a:	1a9b      	subs	r3, r3, r2
  401d4c:	440b      	add	r3, r1
  401d4e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401d50:	4620      	mov	r0, r4
  401d52:	4b08      	ldr	r3, [pc, #32]	; (401d74 <xTaskCheckForTimeOut+0x8c>)
  401d54:	4798      	blx	r3
			xReturn = pdFALSE;
  401d56:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401d58:	4b07      	ldr	r3, [pc, #28]	; (401d78 <xTaskCheckForTimeOut+0x90>)
  401d5a:	4798      	blx	r3
}
  401d5c:	4620      	mov	r0, r4
  401d5e:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  401d60:	2400      	movs	r4, #0
  401d62:	e7f9      	b.n	401d58 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  401d64:	2401      	movs	r4, #1
  401d66:	e7f7      	b.n	401d58 <xTaskCheckForTimeOut+0x70>
  401d68:	00400765 	.word	0x00400765
  401d6c:	2040c2fc 	.word	0x2040c2fc
  401d70:	2040c2b8 	.word	0x2040c2b8
  401d74:	00401cb9 	.word	0x00401cb9
  401d78:	004007b1 	.word	0x004007b1

00401d7c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401d7c:	2201      	movs	r2, #1
  401d7e:	4b01      	ldr	r3, [pc, #4]	; (401d84 <vTaskMissedYield+0x8>)
  401d80:	601a      	str	r2, [r3, #0]
  401d82:	4770      	bx	lr
  401d84:	2040c300 	.word	0x2040c300

00401d88 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401d88:	4b05      	ldr	r3, [pc, #20]	; (401da0 <xTaskGetSchedulerState+0x18>)
  401d8a:	681b      	ldr	r3, [r3, #0]
  401d8c:	b133      	cbz	r3, 401d9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401d8e:	4b05      	ldr	r3, [pc, #20]	; (401da4 <xTaskGetSchedulerState+0x1c>)
  401d90:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401d92:	2b00      	cmp	r3, #0
  401d94:	bf0c      	ite	eq
  401d96:	2002      	moveq	r0, #2
  401d98:	2000      	movne	r0, #0
  401d9a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401d9c:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  401d9e:	4770      	bx	lr
  401da0:	2040c2d0 	.word	0x2040c2d0
  401da4:	2040c27c 	.word	0x2040c27c

00401da8 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401da8:	2800      	cmp	r0, #0
  401daa:	d044      	beq.n	401e36 <vTaskPriorityInherit+0x8e>
	{
  401dac:	b538      	push	{r3, r4, r5, lr}
  401dae:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401db0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401db2:	4921      	ldr	r1, [pc, #132]	; (401e38 <vTaskPriorityInherit+0x90>)
  401db4:	6809      	ldr	r1, [r1, #0]
  401db6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401db8:	428a      	cmp	r2, r1
  401dba:	d214      	bcs.n	401de6 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401dbc:	6981      	ldr	r1, [r0, #24]
  401dbe:	2900      	cmp	r1, #0
  401dc0:	db05      	blt.n	401dce <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401dc2:	491d      	ldr	r1, [pc, #116]	; (401e38 <vTaskPriorityInherit+0x90>)
  401dc4:	6809      	ldr	r1, [r1, #0]
  401dc6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401dc8:	f1c1 0105 	rsb	r1, r1, #5
  401dcc:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401dce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401dd2:	491a      	ldr	r1, [pc, #104]	; (401e3c <vTaskPriorityInherit+0x94>)
  401dd4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401dd8:	6961      	ldr	r1, [r4, #20]
  401dda:	4291      	cmp	r1, r2
  401ddc:	d004      	beq.n	401de8 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401dde:	4a16      	ldr	r2, [pc, #88]	; (401e38 <vTaskPriorityInherit+0x90>)
  401de0:	6812      	ldr	r2, [r2, #0]
  401de2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401de4:	62e2      	str	r2, [r4, #44]	; 0x2c
  401de6:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401de8:	1d25      	adds	r5, r4, #4
  401dea:	4628      	mov	r0, r5
  401dec:	4b14      	ldr	r3, [pc, #80]	; (401e40 <vTaskPriorityInherit+0x98>)
  401dee:	4798      	blx	r3
  401df0:	b970      	cbnz	r0, 401e10 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401df2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401df4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401df8:	4a10      	ldr	r2, [pc, #64]	; (401e3c <vTaskPriorityInherit+0x94>)
  401dfa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401dfe:	b93a      	cbnz	r2, 401e10 <vTaskPriorityInherit+0x68>
  401e00:	4810      	ldr	r0, [pc, #64]	; (401e44 <vTaskPriorityInherit+0x9c>)
  401e02:	6802      	ldr	r2, [r0, #0]
  401e04:	2101      	movs	r1, #1
  401e06:	fa01 f303 	lsl.w	r3, r1, r3
  401e0a:	ea22 0303 	bic.w	r3, r2, r3
  401e0e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401e10:	4b09      	ldr	r3, [pc, #36]	; (401e38 <vTaskPriorityInherit+0x90>)
  401e12:	681b      	ldr	r3, [r3, #0]
  401e14:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401e16:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401e18:	4a0a      	ldr	r2, [pc, #40]	; (401e44 <vTaskPriorityInherit+0x9c>)
  401e1a:	6811      	ldr	r1, [r2, #0]
  401e1c:	2301      	movs	r3, #1
  401e1e:	4083      	lsls	r3, r0
  401e20:	430b      	orrs	r3, r1
  401e22:	6013      	str	r3, [r2, #0]
  401e24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e28:	4629      	mov	r1, r5
  401e2a:	4b04      	ldr	r3, [pc, #16]	; (401e3c <vTaskPriorityInherit+0x94>)
  401e2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401e30:	4b05      	ldr	r3, [pc, #20]	; (401e48 <vTaskPriorityInherit+0xa0>)
  401e32:	4798      	blx	r3
  401e34:	bd38      	pop	{r3, r4, r5, pc}
  401e36:	4770      	bx	lr
  401e38:	2040c204 	.word	0x2040c204
  401e3c:	2040c210 	.word	0x2040c210
  401e40:	00400681 	.word	0x00400681
  401e44:	2040c288 	.word	0x2040c288
  401e48:	00400635 	.word	0x00400635

00401e4c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401e4c:	2800      	cmp	r0, #0
  401e4e:	d04d      	beq.n	401eec <xTaskPriorityDisinherit+0xa0>
	{
  401e50:	b538      	push	{r3, r4, r5, lr}
  401e52:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401e54:	4a27      	ldr	r2, [pc, #156]	; (401ef4 <xTaskPriorityDisinherit+0xa8>)
  401e56:	6812      	ldr	r2, [r2, #0]
  401e58:	4290      	cmp	r0, r2
  401e5a:	d00a      	beq.n	401e72 <xTaskPriorityDisinherit+0x26>
  401e5c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e60:	b672      	cpsid	i
  401e62:	f383 8811 	msr	BASEPRI, r3
  401e66:	f3bf 8f6f 	isb	sy
  401e6a:	f3bf 8f4f 	dsb	sy
  401e6e:	b662      	cpsie	i
  401e70:	e7fe      	b.n	401e70 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  401e72:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401e74:	b952      	cbnz	r2, 401e8c <xTaskPriorityDisinherit+0x40>
  401e76:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e7a:	b672      	cpsid	i
  401e7c:	f383 8811 	msr	BASEPRI, r3
  401e80:	f3bf 8f6f 	isb	sy
  401e84:	f3bf 8f4f 	dsb	sy
  401e88:	b662      	cpsie	i
  401e8a:	e7fe      	b.n	401e8a <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  401e8c:	3a01      	subs	r2, #1
  401e8e:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401e90:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401e92:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401e94:	4288      	cmp	r0, r1
  401e96:	d02b      	beq.n	401ef0 <xTaskPriorityDisinherit+0xa4>
  401e98:	bb52      	cbnz	r2, 401ef0 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401e9a:	1d25      	adds	r5, r4, #4
  401e9c:	4628      	mov	r0, r5
  401e9e:	4b16      	ldr	r3, [pc, #88]	; (401ef8 <xTaskPriorityDisinherit+0xac>)
  401ea0:	4798      	blx	r3
  401ea2:	b968      	cbnz	r0, 401ec0 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401ea4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401ea6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401eaa:	4b14      	ldr	r3, [pc, #80]	; (401efc <xTaskPriorityDisinherit+0xb0>)
  401eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401eb0:	b933      	cbnz	r3, 401ec0 <xTaskPriorityDisinherit+0x74>
  401eb2:	4813      	ldr	r0, [pc, #76]	; (401f00 <xTaskPriorityDisinherit+0xb4>)
  401eb4:	6803      	ldr	r3, [r0, #0]
  401eb6:	2201      	movs	r2, #1
  401eb8:	408a      	lsls	r2, r1
  401eba:	ea23 0302 	bic.w	r3, r3, r2
  401ebe:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401ec0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401ec2:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ec4:	f1c0 0305 	rsb	r3, r0, #5
  401ec8:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401eca:	4a0d      	ldr	r2, [pc, #52]	; (401f00 <xTaskPriorityDisinherit+0xb4>)
  401ecc:	6811      	ldr	r1, [r2, #0]
  401ece:	2401      	movs	r4, #1
  401ed0:	fa04 f300 	lsl.w	r3, r4, r0
  401ed4:	430b      	orrs	r3, r1
  401ed6:	6013      	str	r3, [r2, #0]
  401ed8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401edc:	4629      	mov	r1, r5
  401ede:	4b07      	ldr	r3, [pc, #28]	; (401efc <xTaskPriorityDisinherit+0xb0>)
  401ee0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ee4:	4b07      	ldr	r3, [pc, #28]	; (401f04 <xTaskPriorityDisinherit+0xb8>)
  401ee6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401ee8:	4620      	mov	r0, r4
  401eea:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401eec:	2000      	movs	r0, #0
  401eee:	4770      	bx	lr
  401ef0:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401ef2:	bd38      	pop	{r3, r4, r5, pc}
  401ef4:	2040c204 	.word	0x2040c204
  401ef8:	00400681 	.word	0x00400681
  401efc:	2040c210 	.word	0x2040c210
  401f00:	2040c288 	.word	0x2040c288
  401f04:	00400635 	.word	0x00400635

00401f08 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401f08:	4b05      	ldr	r3, [pc, #20]	; (401f20 <pvTaskIncrementMutexHeldCount+0x18>)
  401f0a:	681b      	ldr	r3, [r3, #0]
  401f0c:	b123      	cbz	r3, 401f18 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401f0e:	4b04      	ldr	r3, [pc, #16]	; (401f20 <pvTaskIncrementMutexHeldCount+0x18>)
  401f10:	681a      	ldr	r2, [r3, #0]
  401f12:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401f14:	3301      	adds	r3, #1
  401f16:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401f18:	4b01      	ldr	r3, [pc, #4]	; (401f20 <pvTaskIncrementMutexHeldCount+0x18>)
  401f1a:	6818      	ldr	r0, [r3, #0]
	}
  401f1c:	4770      	bx	lr
  401f1e:	bf00      	nop
  401f20:	2040c204 	.word	0x2040c204

00401f24 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401f24:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401f26:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401f28:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401f2a:	4291      	cmp	r1, r2
  401f2c:	d80c      	bhi.n	401f48 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401f2e:	1ad2      	subs	r2, r2, r3
  401f30:	6983      	ldr	r3, [r0, #24]
  401f32:	429a      	cmp	r2, r3
  401f34:	d301      	bcc.n	401f3a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401f36:	2001      	movs	r0, #1
  401f38:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401f3a:	1d01      	adds	r1, r0, #4
  401f3c:	4b09      	ldr	r3, [pc, #36]	; (401f64 <prvInsertTimerInActiveList+0x40>)
  401f3e:	6818      	ldr	r0, [r3, #0]
  401f40:	4b09      	ldr	r3, [pc, #36]	; (401f68 <prvInsertTimerInActiveList+0x44>)
  401f42:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401f44:	2000      	movs	r0, #0
  401f46:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401f48:	429a      	cmp	r2, r3
  401f4a:	d203      	bcs.n	401f54 <prvInsertTimerInActiveList+0x30>
  401f4c:	4299      	cmp	r1, r3
  401f4e:	d301      	bcc.n	401f54 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401f50:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401f52:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401f54:	1d01      	adds	r1, r0, #4
  401f56:	4b05      	ldr	r3, [pc, #20]	; (401f6c <prvInsertTimerInActiveList+0x48>)
  401f58:	6818      	ldr	r0, [r3, #0]
  401f5a:	4b03      	ldr	r3, [pc, #12]	; (401f68 <prvInsertTimerInActiveList+0x44>)
  401f5c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401f5e:	2000      	movs	r0, #0
  401f60:	bd08      	pop	{r3, pc}
  401f62:	bf00      	nop
  401f64:	2040c308 	.word	0x2040c308
  401f68:	0040064d 	.word	0x0040064d
  401f6c:	2040c304 	.word	0x2040c304

00401f70 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401f70:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401f72:	4b15      	ldr	r3, [pc, #84]	; (401fc8 <prvCheckForValidListAndQueue+0x58>)
  401f74:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401f76:	4b15      	ldr	r3, [pc, #84]	; (401fcc <prvCheckForValidListAndQueue+0x5c>)
  401f78:	681b      	ldr	r3, [r3, #0]
  401f7a:	b113      	cbz	r3, 401f82 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401f7c:	4b14      	ldr	r3, [pc, #80]	; (401fd0 <prvCheckForValidListAndQueue+0x60>)
  401f7e:	4798      	blx	r3
  401f80:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401f82:	4d14      	ldr	r5, [pc, #80]	; (401fd4 <prvCheckForValidListAndQueue+0x64>)
  401f84:	4628      	mov	r0, r5
  401f86:	4e14      	ldr	r6, [pc, #80]	; (401fd8 <prvCheckForValidListAndQueue+0x68>)
  401f88:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401f8a:	4c14      	ldr	r4, [pc, #80]	; (401fdc <prvCheckForValidListAndQueue+0x6c>)
  401f8c:	4620      	mov	r0, r4
  401f8e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401f90:	4b13      	ldr	r3, [pc, #76]	; (401fe0 <prvCheckForValidListAndQueue+0x70>)
  401f92:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401f94:	4b13      	ldr	r3, [pc, #76]	; (401fe4 <prvCheckForValidListAndQueue+0x74>)
  401f96:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401f98:	2200      	movs	r2, #0
  401f9a:	2110      	movs	r1, #16
  401f9c:	2005      	movs	r0, #5
  401f9e:	4b12      	ldr	r3, [pc, #72]	; (401fe8 <prvCheckForValidListAndQueue+0x78>)
  401fa0:	4798      	blx	r3
  401fa2:	4b0a      	ldr	r3, [pc, #40]	; (401fcc <prvCheckForValidListAndQueue+0x5c>)
  401fa4:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401fa6:	b118      	cbz	r0, 401fb0 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401fa8:	4910      	ldr	r1, [pc, #64]	; (401fec <prvCheckForValidListAndQueue+0x7c>)
  401faa:	4b11      	ldr	r3, [pc, #68]	; (401ff0 <prvCheckForValidListAndQueue+0x80>)
  401fac:	4798      	blx	r3
  401fae:	e7e5      	b.n	401f7c <prvCheckForValidListAndQueue+0xc>
  401fb0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fb4:	b672      	cpsid	i
  401fb6:	f383 8811 	msr	BASEPRI, r3
  401fba:	f3bf 8f6f 	isb	sy
  401fbe:	f3bf 8f4f 	dsb	sy
  401fc2:	b662      	cpsie	i
  401fc4:	e7fe      	b.n	401fc4 <prvCheckForValidListAndQueue+0x54>
  401fc6:	bf00      	nop
  401fc8:	00400765 	.word	0x00400765
  401fcc:	2040c338 	.word	0x2040c338
  401fd0:	004007b1 	.word	0x004007b1
  401fd4:	2040c30c 	.word	0x2040c30c
  401fd8:	00400619 	.word	0x00400619
  401fdc:	2040c320 	.word	0x2040c320
  401fe0:	2040c304 	.word	0x2040c304
  401fe4:	2040c308 	.word	0x2040c308
  401fe8:	00400cbd 	.word	0x00400cbd
  401fec:	0040cabc 	.word	0x0040cabc
  401ff0:	004012cd 	.word	0x004012cd

00401ff4 <xTimerCreateTimerTask>:
{
  401ff4:	b510      	push	{r4, lr}
  401ff6:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  401ff8:	4b0f      	ldr	r3, [pc, #60]	; (402038 <xTimerCreateTimerTask+0x44>)
  401ffa:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401ffc:	4b0f      	ldr	r3, [pc, #60]	; (40203c <xTimerCreateTimerTask+0x48>)
  401ffe:	681b      	ldr	r3, [r3, #0]
  402000:	b173      	cbz	r3, 402020 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402002:	2300      	movs	r3, #0
  402004:	9303      	str	r3, [sp, #12]
  402006:	9302      	str	r3, [sp, #8]
  402008:	9301      	str	r3, [sp, #4]
  40200a:	2204      	movs	r2, #4
  40200c:	9200      	str	r2, [sp, #0]
  40200e:	f44f 7282 	mov.w	r2, #260	; 0x104
  402012:	490b      	ldr	r1, [pc, #44]	; (402040 <xTimerCreateTimerTask+0x4c>)
  402014:	480b      	ldr	r0, [pc, #44]	; (402044 <xTimerCreateTimerTask+0x50>)
  402016:	4c0c      	ldr	r4, [pc, #48]	; (402048 <xTimerCreateTimerTask+0x54>)
  402018:	47a0      	blx	r4
	configASSERT( xReturn );
  40201a:	b108      	cbz	r0, 402020 <xTimerCreateTimerTask+0x2c>
}
  40201c:	b004      	add	sp, #16
  40201e:	bd10      	pop	{r4, pc}
  402020:	f04f 0380 	mov.w	r3, #128	; 0x80
  402024:	b672      	cpsid	i
  402026:	f383 8811 	msr	BASEPRI, r3
  40202a:	f3bf 8f6f 	isb	sy
  40202e:	f3bf 8f4f 	dsb	sy
  402032:	b662      	cpsie	i
  402034:	e7fe      	b.n	402034 <xTimerCreateTimerTask+0x40>
  402036:	bf00      	nop
  402038:	00401f71 	.word	0x00401f71
  40203c:	2040c338 	.word	0x2040c338
  402040:	0040cac4 	.word	0x0040cac4
  402044:	00402175 	.word	0x00402175
  402048:	004013dd 	.word	0x004013dd

0040204c <xTimerGenericCommand>:
	configASSERT( xTimer );
  40204c:	b1d8      	cbz	r0, 402086 <xTimerGenericCommand+0x3a>
{
  40204e:	b530      	push	{r4, r5, lr}
  402050:	b085      	sub	sp, #20
  402052:	4615      	mov	r5, r2
  402054:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402056:	4a15      	ldr	r2, [pc, #84]	; (4020ac <xTimerGenericCommand+0x60>)
  402058:	6810      	ldr	r0, [r2, #0]
  40205a:	b320      	cbz	r0, 4020a6 <xTimerGenericCommand+0x5a>
  40205c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  40205e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402060:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402062:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402064:	2905      	cmp	r1, #5
  402066:	dc19      	bgt.n	40209c <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402068:	4b11      	ldr	r3, [pc, #68]	; (4020b0 <xTimerGenericCommand+0x64>)
  40206a:	4798      	blx	r3
  40206c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  40206e:	f04f 0300 	mov.w	r3, #0
  402072:	bf0c      	ite	eq
  402074:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402076:	461a      	movne	r2, r3
  402078:	4669      	mov	r1, sp
  40207a:	480c      	ldr	r0, [pc, #48]	; (4020ac <xTimerGenericCommand+0x60>)
  40207c:	6800      	ldr	r0, [r0, #0]
  40207e:	4c0d      	ldr	r4, [pc, #52]	; (4020b4 <xTimerGenericCommand+0x68>)
  402080:	47a0      	blx	r4
}
  402082:	b005      	add	sp, #20
  402084:	bd30      	pop	{r4, r5, pc}
  402086:	f04f 0380 	mov.w	r3, #128	; 0x80
  40208a:	b672      	cpsid	i
  40208c:	f383 8811 	msr	BASEPRI, r3
  402090:	f3bf 8f6f 	isb	sy
  402094:	f3bf 8f4f 	dsb	sy
  402098:	b662      	cpsie	i
  40209a:	e7fe      	b.n	40209a <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40209c:	2300      	movs	r3, #0
  40209e:	4669      	mov	r1, sp
  4020a0:	4c05      	ldr	r4, [pc, #20]	; (4020b8 <xTimerGenericCommand+0x6c>)
  4020a2:	47a0      	blx	r4
  4020a4:	e7ed      	b.n	402082 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4020a6:	2000      	movs	r0, #0
	return xReturn;
  4020a8:	e7eb      	b.n	402082 <xTimerGenericCommand+0x36>
  4020aa:	bf00      	nop
  4020ac:	2040c338 	.word	0x2040c338
  4020b0:	00401d89 	.word	0x00401d89
  4020b4:	00400d39 	.word	0x00400d39
  4020b8:	00400f1d 	.word	0x00400f1d

004020bc <prvSampleTimeNow>:
{
  4020bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4020c0:	b082      	sub	sp, #8
  4020c2:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  4020c4:	4b24      	ldr	r3, [pc, #144]	; (402158 <prvSampleTimeNow+0x9c>)
  4020c6:	4798      	blx	r3
  4020c8:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  4020ca:	4b24      	ldr	r3, [pc, #144]	; (40215c <prvSampleTimeNow+0xa0>)
  4020cc:	681b      	ldr	r3, [r3, #0]
  4020ce:	4298      	cmp	r0, r3
  4020d0:	d31b      	bcc.n	40210a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  4020d2:	2300      	movs	r3, #0
  4020d4:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  4020d8:	4b20      	ldr	r3, [pc, #128]	; (40215c <prvSampleTimeNow+0xa0>)
  4020da:	601f      	str	r7, [r3, #0]
}
  4020dc:	4638      	mov	r0, r7
  4020de:	b002      	add	sp, #8
  4020e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4020e4:	2100      	movs	r1, #0
  4020e6:	9100      	str	r1, [sp, #0]
  4020e8:	460b      	mov	r3, r1
  4020ea:	4652      	mov	r2, sl
  4020ec:	4620      	mov	r0, r4
  4020ee:	4c1c      	ldr	r4, [pc, #112]	; (402160 <prvSampleTimeNow+0xa4>)
  4020f0:	47a0      	blx	r4
				configASSERT( xResult );
  4020f2:	b960      	cbnz	r0, 40210e <prvSampleTimeNow+0x52>
  4020f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020f8:	b672      	cpsid	i
  4020fa:	f383 8811 	msr	BASEPRI, r3
  4020fe:	f3bf 8f6f 	isb	sy
  402102:	f3bf 8f4f 	dsb	sy
  402106:	b662      	cpsie	i
  402108:	e7fe      	b.n	402108 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40210a:	4d16      	ldr	r5, [pc, #88]	; (402164 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40210c:	4e16      	ldr	r6, [pc, #88]	; (402168 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40210e:	682b      	ldr	r3, [r5, #0]
  402110:	681a      	ldr	r2, [r3, #0]
  402112:	b1c2      	cbz	r2, 402146 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402114:	68db      	ldr	r3, [r3, #12]
  402116:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40211a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40211c:	f104 0904 	add.w	r9, r4, #4
  402120:	4648      	mov	r0, r9
  402122:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402124:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402126:	4620      	mov	r0, r4
  402128:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40212a:	69e3      	ldr	r3, [r4, #28]
  40212c:	2b01      	cmp	r3, #1
  40212e:	d1ee      	bne.n	40210e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402130:	69a3      	ldr	r3, [r4, #24]
  402132:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402134:	459a      	cmp	sl, r3
  402136:	d2d5      	bcs.n	4020e4 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402138:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40213a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40213c:	4649      	mov	r1, r9
  40213e:	6828      	ldr	r0, [r5, #0]
  402140:	4b0a      	ldr	r3, [pc, #40]	; (40216c <prvSampleTimeNow+0xb0>)
  402142:	4798      	blx	r3
  402144:	e7e3      	b.n	40210e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402146:	4a0a      	ldr	r2, [pc, #40]	; (402170 <prvSampleTimeNow+0xb4>)
  402148:	6810      	ldr	r0, [r2, #0]
  40214a:	4906      	ldr	r1, [pc, #24]	; (402164 <prvSampleTimeNow+0xa8>)
  40214c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  40214e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402150:	2301      	movs	r3, #1
  402152:	f8c8 3000 	str.w	r3, [r8]
  402156:	e7bf      	b.n	4020d8 <prvSampleTimeNow+0x1c>
  402158:	004016ad 	.word	0x004016ad
  40215c:	2040c334 	.word	0x2040c334
  402160:	0040204d 	.word	0x0040204d
  402164:	2040c304 	.word	0x2040c304
  402168:	00400681 	.word	0x00400681
  40216c:	0040064d 	.word	0x0040064d
  402170:	2040c308 	.word	0x2040c308

00402174 <prvTimerTask>:
{
  402174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402178:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40217a:	4e75      	ldr	r6, [pc, #468]	; (402350 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  40217c:	4f75      	ldr	r7, [pc, #468]	; (402354 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  40217e:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 40237c <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402182:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402380 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402186:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402188:	681a      	ldr	r2, [r3, #0]
  40218a:	2a00      	cmp	r2, #0
  40218c:	f000 80ce 	beq.w	40232c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402190:	68db      	ldr	r3, [r3, #12]
  402192:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402194:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402196:	a804      	add	r0, sp, #16
  402198:	4b6f      	ldr	r3, [pc, #444]	; (402358 <prvTimerTask+0x1e4>)
  40219a:	4798      	blx	r3
  40219c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40219e:	9b04      	ldr	r3, [sp, #16]
  4021a0:	2b00      	cmp	r3, #0
  4021a2:	d144      	bne.n	40222e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4021a4:	42a0      	cmp	r0, r4
  4021a6:	d212      	bcs.n	4021ce <prvTimerTask+0x5a>
  4021a8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4021aa:	1b61      	subs	r1, r4, r5
  4021ac:	4b6b      	ldr	r3, [pc, #428]	; (40235c <prvTimerTask+0x1e8>)
  4021ae:	6818      	ldr	r0, [r3, #0]
  4021b0:	4b6b      	ldr	r3, [pc, #428]	; (402360 <prvTimerTask+0x1ec>)
  4021b2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4021b4:	4b6b      	ldr	r3, [pc, #428]	; (402364 <prvTimerTask+0x1f0>)
  4021b6:	4798      	blx	r3
  4021b8:	2800      	cmp	r0, #0
  4021ba:	d13a      	bne.n	402232 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  4021bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4021c0:	f8c9 3000 	str.w	r3, [r9]
  4021c4:	f3bf 8f4f 	dsb	sy
  4021c8:	f3bf 8f6f 	isb	sy
  4021cc:	e031      	b.n	402232 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  4021ce:	4b65      	ldr	r3, [pc, #404]	; (402364 <prvTimerTask+0x1f0>)
  4021d0:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4021d2:	6833      	ldr	r3, [r6, #0]
  4021d4:	68db      	ldr	r3, [r3, #12]
  4021d6:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4021da:	f10a 0004 	add.w	r0, sl, #4
  4021de:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4021e0:	f8da 301c 	ldr.w	r3, [sl, #28]
  4021e4:	2b01      	cmp	r3, #1
  4021e6:	d004      	beq.n	4021f2 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4021e8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4021ec:	4650      	mov	r0, sl
  4021ee:	4798      	blx	r3
  4021f0:	e01f      	b.n	402232 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4021f2:	f8da 1018 	ldr.w	r1, [sl, #24]
  4021f6:	4623      	mov	r3, r4
  4021f8:	462a      	mov	r2, r5
  4021fa:	4421      	add	r1, r4
  4021fc:	4650      	mov	r0, sl
  4021fe:	4d5a      	ldr	r5, [pc, #360]	; (402368 <prvTimerTask+0x1f4>)
  402200:	47a8      	blx	r5
  402202:	2801      	cmp	r0, #1
  402204:	d1f0      	bne.n	4021e8 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402206:	2100      	movs	r1, #0
  402208:	9100      	str	r1, [sp, #0]
  40220a:	460b      	mov	r3, r1
  40220c:	4622      	mov	r2, r4
  40220e:	4650      	mov	r0, sl
  402210:	4c56      	ldr	r4, [pc, #344]	; (40236c <prvTimerTask+0x1f8>)
  402212:	47a0      	blx	r4
			configASSERT( xResult );
  402214:	2800      	cmp	r0, #0
  402216:	d1e7      	bne.n	4021e8 <prvTimerTask+0x74>
  402218:	f04f 0380 	mov.w	r3, #128	; 0x80
  40221c:	b672      	cpsid	i
  40221e:	f383 8811 	msr	BASEPRI, r3
  402222:	f3bf 8f6f 	isb	sy
  402226:	f3bf 8f4f 	dsb	sy
  40222a:	b662      	cpsie	i
  40222c:	e7fe      	b.n	40222c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  40222e:	4b4d      	ldr	r3, [pc, #308]	; (402364 <prvTimerTask+0x1f0>)
  402230:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402232:	4d4a      	ldr	r5, [pc, #296]	; (40235c <prvTimerTask+0x1e8>)
  402234:	4c4e      	ldr	r4, [pc, #312]	; (402370 <prvTimerTask+0x1fc>)
  402236:	e006      	b.n	402246 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402238:	9907      	ldr	r1, [sp, #28]
  40223a:	9806      	ldr	r0, [sp, #24]
  40223c:	9b05      	ldr	r3, [sp, #20]
  40223e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402240:	9b04      	ldr	r3, [sp, #16]
  402242:	2b00      	cmp	r3, #0
  402244:	da09      	bge.n	40225a <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402246:	2300      	movs	r3, #0
  402248:	461a      	mov	r2, r3
  40224a:	a904      	add	r1, sp, #16
  40224c:	6828      	ldr	r0, [r5, #0]
  40224e:	47a0      	blx	r4
  402250:	2800      	cmp	r0, #0
  402252:	d098      	beq.n	402186 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402254:	9b04      	ldr	r3, [sp, #16]
  402256:	2b00      	cmp	r3, #0
  402258:	dbee      	blt.n	402238 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40225a:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40225e:	f8da 3014 	ldr.w	r3, [sl, #20]
  402262:	b113      	cbz	r3, 40226a <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402264:	f10a 0004 	add.w	r0, sl, #4
  402268:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40226a:	a803      	add	r0, sp, #12
  40226c:	4b3a      	ldr	r3, [pc, #232]	; (402358 <prvTimerTask+0x1e4>)
  40226e:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402270:	9b04      	ldr	r3, [sp, #16]
  402272:	2b09      	cmp	r3, #9
  402274:	d8e7      	bhi.n	402246 <prvTimerTask+0xd2>
  402276:	a201      	add	r2, pc, #4	; (adr r2, 40227c <prvTimerTask+0x108>)
  402278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40227c:	004022a5 	.word	0x004022a5
  402280:	004022a5 	.word	0x004022a5
  402284:	004022a5 	.word	0x004022a5
  402288:	00402247 	.word	0x00402247
  40228c:	004022f9 	.word	0x004022f9
  402290:	00402325 	.word	0x00402325
  402294:	004022a5 	.word	0x004022a5
  402298:	004022a5 	.word	0x004022a5
  40229c:	00402247 	.word	0x00402247
  4022a0:	004022f9 	.word	0x004022f9
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4022a4:	9c05      	ldr	r4, [sp, #20]
  4022a6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4022aa:	4623      	mov	r3, r4
  4022ac:	4602      	mov	r2, r0
  4022ae:	4421      	add	r1, r4
  4022b0:	4650      	mov	r0, sl
  4022b2:	4c2d      	ldr	r4, [pc, #180]	; (402368 <prvTimerTask+0x1f4>)
  4022b4:	47a0      	blx	r4
  4022b6:	2801      	cmp	r0, #1
  4022b8:	d1bc      	bne.n	402234 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4022ba:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4022be:	4650      	mov	r0, sl
  4022c0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4022c2:	f8da 301c 	ldr.w	r3, [sl, #28]
  4022c6:	2b01      	cmp	r3, #1
  4022c8:	d1b4      	bne.n	402234 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4022ca:	f8da 2018 	ldr.w	r2, [sl, #24]
  4022ce:	2100      	movs	r1, #0
  4022d0:	9100      	str	r1, [sp, #0]
  4022d2:	460b      	mov	r3, r1
  4022d4:	9805      	ldr	r0, [sp, #20]
  4022d6:	4402      	add	r2, r0
  4022d8:	4650      	mov	r0, sl
  4022da:	4c24      	ldr	r4, [pc, #144]	; (40236c <prvTimerTask+0x1f8>)
  4022dc:	47a0      	blx	r4
							configASSERT( xResult );
  4022de:	2800      	cmp	r0, #0
  4022e0:	d1a8      	bne.n	402234 <prvTimerTask+0xc0>
  4022e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022e6:	b672      	cpsid	i
  4022e8:	f383 8811 	msr	BASEPRI, r3
  4022ec:	f3bf 8f6f 	isb	sy
  4022f0:	f3bf 8f4f 	dsb	sy
  4022f4:	b662      	cpsie	i
  4022f6:	e7fe      	b.n	4022f6 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4022f8:	9905      	ldr	r1, [sp, #20]
  4022fa:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4022fe:	b131      	cbz	r1, 40230e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402300:	4603      	mov	r3, r0
  402302:	4602      	mov	r2, r0
  402304:	4401      	add	r1, r0
  402306:	4650      	mov	r0, sl
  402308:	4c17      	ldr	r4, [pc, #92]	; (402368 <prvTimerTask+0x1f4>)
  40230a:	47a0      	blx	r4
  40230c:	e792      	b.n	402234 <prvTimerTask+0xc0>
  40230e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402312:	b672      	cpsid	i
  402314:	f383 8811 	msr	BASEPRI, r3
  402318:	f3bf 8f6f 	isb	sy
  40231c:	f3bf 8f4f 	dsb	sy
  402320:	b662      	cpsie	i
  402322:	e7fe      	b.n	402322 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402324:	4650      	mov	r0, sl
  402326:	4b13      	ldr	r3, [pc, #76]	; (402374 <prvTimerTask+0x200>)
  402328:	4798      	blx	r3
  40232a:	e783      	b.n	402234 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  40232c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40232e:	a804      	add	r0, sp, #16
  402330:	4b09      	ldr	r3, [pc, #36]	; (402358 <prvTimerTask+0x1e4>)
  402332:	4798      	blx	r3
  402334:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402336:	9b04      	ldr	r3, [sp, #16]
  402338:	2b00      	cmp	r3, #0
  40233a:	f47f af78 	bne.w	40222e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40233e:	4b0e      	ldr	r3, [pc, #56]	; (402378 <prvTimerTask+0x204>)
  402340:	681b      	ldr	r3, [r3, #0]
  402342:	681a      	ldr	r2, [r3, #0]
  402344:	fab2 f282 	clz	r2, r2
  402348:	0952      	lsrs	r2, r2, #5
  40234a:	2400      	movs	r4, #0
  40234c:	e72d      	b.n	4021aa <prvTimerTask+0x36>
  40234e:	bf00      	nop
  402350:	2040c304 	.word	0x2040c304
  402354:	0040169d 	.word	0x0040169d
  402358:	004020bd 	.word	0x004020bd
  40235c:	2040c338 	.word	0x2040c338
  402360:	00401301 	.word	0x00401301
  402364:	00401805 	.word	0x00401805
  402368:	00401f25 	.word	0x00401f25
  40236c:	0040204d 	.word	0x0040204d
  402370:	004010fd 	.word	0x004010fd
  402374:	00400a31 	.word	0x00400a31
  402378:	2040c308 	.word	0x2040c308
  40237c:	e000ed04 	.word	0xe000ed04
  402380:	00400681 	.word	0x00400681

00402384 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  402384:	2810      	cmp	r0, #16
  402386:	d108      	bne.n	40239a <chip_isr+0x16>
  402388:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40238c:	d105      	bne.n	40239a <chip_isr+0x16>
{
  40238e:	b508      	push	{r3, lr}
		if (gpfIsr) {
  402390:	4b02      	ldr	r3, [pc, #8]	; (40239c <chip_isr+0x18>)
  402392:	681b      	ldr	r3, [r3, #0]
  402394:	b103      	cbz	r3, 402398 <chip_isr+0x14>
			gpfIsr();
  402396:	4798      	blx	r3
  402398:	bd08      	pop	{r3, pc}
  40239a:	4770      	bx	lr
  40239c:	2040c33c 	.word	0x2040c33c

004023a0 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  4023a0:	b150      	cbz	r0, 4023b8 <nm_bsp_sleep+0x18>
{
  4023a2:	b570      	push	{r4, r5, r6, lr}
  4023a4:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  4023a6:	4e05      	ldr	r6, [pc, #20]	; (4023bc <nm_bsp_sleep+0x1c>)
  4023a8:	4d05      	ldr	r5, [pc, #20]	; (4023c0 <nm_bsp_sleep+0x20>)
  4023aa:	4630      	mov	r0, r6
  4023ac:	47a8      	blx	r5
	while(u32TimeMsec--) {
  4023ae:	3c01      	subs	r4, #1
  4023b0:	f1b4 3fff 	cmp.w	r4, #4294967295
  4023b4:	d1f9      	bne.n	4023aa <nm_bsp_sleep+0xa>
  4023b6:	bd70      	pop	{r4, r5, r6, pc}
  4023b8:	4770      	bx	lr
  4023ba:	bf00      	nop
  4023bc:	00031635 	.word	0x00031635
  4023c0:	20400001 	.word	0x20400001

004023c4 <nm_bsp_reset>:
{
  4023c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4023c8:	4f09      	ldr	r7, [pc, #36]	; (4023f0 <nm_bsp_reset+0x2c>)
  4023ca:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  4023ce:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  4023d2:	4d08      	ldr	r5, [pc, #32]	; (4023f4 <nm_bsp_reset+0x30>)
  4023d4:	2608      	movs	r6, #8
  4023d6:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  4023d8:	2064      	movs	r0, #100	; 0x64
  4023da:	4c07      	ldr	r4, [pc, #28]	; (4023f8 <nm_bsp_reset+0x34>)
  4023dc:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4023de:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  4023e2:	2064      	movs	r0, #100	; 0x64
  4023e4:	47a0      	blx	r4
  4023e6:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  4023e8:	2064      	movs	r0, #100	; 0x64
  4023ea:	47a0      	blx	r4
  4023ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4023f0:	400e1200 	.word	0x400e1200
  4023f4:	400e1000 	.word	0x400e1000
  4023f8:	004023a1 	.word	0x004023a1

004023fc <nm_bsp_init>:
{
  4023fc:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  4023fe:	2200      	movs	r2, #0
  402400:	4b14      	ldr	r3, [pc, #80]	; (402454 <nm_bsp_init+0x58>)
  402402:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402404:	200a      	movs	r0, #10
  402406:	4c14      	ldr	r4, [pc, #80]	; (402458 <nm_bsp_init+0x5c>)
  402408:	47a0      	blx	r4
  40240a:	200b      	movs	r0, #11
  40240c:	47a0      	blx	r4
  40240e:	200c      	movs	r0, #12
  402410:	47a0      	blx	r4
  402412:	2010      	movs	r0, #16
  402414:	47a0      	blx	r4
  402416:	2011      	movs	r0, #17
  402418:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40241a:	4b10      	ldr	r3, [pc, #64]	; (40245c <nm_bsp_init+0x60>)
  40241c:	2208      	movs	r2, #8
  40241e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402420:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402424:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402426:	4a0e      	ldr	r2, [pc, #56]	; (402460 <nm_bsp_init+0x64>)
  402428:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40242c:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40242e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402432:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402434:	2204      	movs	r2, #4
  402436:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402438:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40243c:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  40243e:	4b09      	ldr	r3, [pc, #36]	; (402464 <nm_bsp_init+0x68>)
  402440:	681b      	ldr	r3, [r3, #0]
  402442:	f013 0f01 	tst.w	r3, #1
  402446:	d001      	beq.n	40244c <nm_bsp_init+0x50>
  402448:	4b06      	ldr	r3, [pc, #24]	; (402464 <nm_bsp_init+0x68>)
  40244a:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  40244c:	4b06      	ldr	r3, [pc, #24]	; (402468 <nm_bsp_init+0x6c>)
  40244e:	4798      	blx	r3
}
  402450:	2000      	movs	r0, #0
  402452:	bd10      	pop	{r4, pc}
  402454:	2040c33c 	.word	0x2040c33c
  402458:	004056b1 	.word	0x004056b1
  40245c:	400e1000 	.word	0x400e1000
  402460:	400e1200 	.word	0x400e1200
  402464:	e000e010 	.word	0xe000e010
  402468:	004023c5 	.word	0x004023c5

0040246c <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  40246c:	b530      	push	{r4, r5, lr}
  40246e:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  402470:	4b14      	ldr	r3, [pc, #80]	; (4024c4 <nm_bsp_register_isr+0x58>)
  402472:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  402474:	2010      	movs	r0, #16
  402476:	4b14      	ldr	r3, [pc, #80]	; (4024c8 <nm_bsp_register_isr+0x5c>)
  402478:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  40247a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40247e:	207c      	movs	r0, #124	; 0x7c
  402480:	4b12      	ldr	r3, [pc, #72]	; (4024cc <nm_bsp_register_isr+0x60>)
  402482:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  402484:	4c12      	ldr	r4, [pc, #72]	; (4024d0 <nm_bsp_register_isr+0x64>)
  402486:	2201      	movs	r2, #1
  402488:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40248c:	4620      	mov	r0, r4
  40248e:	4b11      	ldr	r3, [pc, #68]	; (4024d4 <nm_bsp_register_isr+0x68>)
  402490:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  402492:	4b11      	ldr	r3, [pc, #68]	; (4024d8 <nm_bsp_register_isr+0x6c>)
  402494:	9300      	str	r3, [sp, #0]
  402496:	2351      	movs	r3, #81	; 0x51
  402498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40249c:	2110      	movs	r1, #16
  40249e:	4620      	mov	r0, r4
  4024a0:	4d0e      	ldr	r5, [pc, #56]	; (4024dc <nm_bsp_register_isr+0x70>)
  4024a2:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4024a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4024a8:	4620      	mov	r0, r4
  4024aa:	4b0d      	ldr	r3, [pc, #52]	; (4024e0 <nm_bsp_register_isr+0x74>)
  4024ac:	4798      	blx	r3
  4024ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4024b2:	4b0c      	ldr	r3, [pc, #48]	; (4024e4 <nm_bsp_register_isr+0x78>)
  4024b4:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  4024b6:	2200      	movs	r2, #0
  4024b8:	2110      	movs	r1, #16
  4024ba:	4620      	mov	r0, r4
  4024bc:	4b0a      	ldr	r3, [pc, #40]	; (4024e8 <nm_bsp_register_isr+0x7c>)
  4024be:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  4024c0:	b003      	add	sp, #12
  4024c2:	bd30      	pop	{r4, r5, pc}
  4024c4:	2040c33c 	.word	0x2040c33c
  4024c8:	004056b1 	.word	0x004056b1
  4024cc:	004052b9 	.word	0x004052b9
  4024d0:	400e1400 	.word	0x400e1400
  4024d4:	004050e9 	.word	0x004050e9
  4024d8:	00402385 	.word	0x00402385
  4024dc:	00405439 	.word	0x00405439
  4024e0:	004052a7 	.word	0x004052a7
  4024e4:	e000e100 	.word	0xe000e100
  4024e8:	0040550d 	.word	0x0040550d

004024ec <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  4024ec:	b508      	push	{r3, lr}
	if (u8Enable) {
  4024ee:	b928      	cbnz	r0, 4024fc <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4024f0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4024f4:	4804      	ldr	r0, [pc, #16]	; (402508 <nm_bsp_interrupt_ctrl+0x1c>)
  4024f6:	4b05      	ldr	r3, [pc, #20]	; (40250c <nm_bsp_interrupt_ctrl+0x20>)
  4024f8:	4798      	blx	r3
  4024fa:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4024fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402500:	4801      	ldr	r0, [pc, #4]	; (402508 <nm_bsp_interrupt_ctrl+0x1c>)
  402502:	4b03      	ldr	r3, [pc, #12]	; (402510 <nm_bsp_interrupt_ctrl+0x24>)
  402504:	4798      	blx	r3
  402506:	bd08      	pop	{r3, pc}
  402508:	400e1400 	.word	0x400e1400
  40250c:	004052ab 	.word	0x004052ab
  402510:	004052a7 	.word	0x004052a7

00402514 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  402514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  402516:	4c39      	ldr	r4, [pc, #228]	; (4025fc <nm_bus_init+0xe8>)
  402518:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40251c:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40251e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402522:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402524:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402526:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40252a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40252c:	430b      	orrs	r3, r1
  40252e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402530:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402532:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  402536:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  402538:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40253c:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40253e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402542:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402544:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402546:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40254a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40254c:	4313      	orrs	r3, r2
  40254e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402550:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402552:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  402556:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  402558:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  40255c:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40255e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402562:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402564:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402566:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40256a:	6f20      	ldr	r0, [r4, #112]	; 0x70
  40256c:	4318      	orrs	r0, r3
  40256e:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402570:	6f60      	ldr	r0, [r4, #116]	; 0x74
  402572:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  402576:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402578:	6061      	str	r1, [r4, #4]
  40257a:	6062      	str	r2, [r4, #4]
  40257c:	6063      	str	r3, [r4, #4]
  40257e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  402582:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  402584:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  402586:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  402588:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  40258a:	4d1d      	ldr	r5, [pc, #116]	; (402600 <nm_bus_init+0xec>)
  40258c:	4628      	mov	r0, r5
  40258e:	4b1d      	ldr	r3, [pc, #116]	; (402604 <nm_bus_init+0xf0>)
  402590:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  402592:	2302      	movs	r3, #2
  402594:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  402596:	2380      	movs	r3, #128	; 0x80
  402598:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40259a:	686b      	ldr	r3, [r5, #4]
  40259c:	f043 0301 	orr.w	r3, r3, #1
  4025a0:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4025a2:	686b      	ldr	r3, [r5, #4]
  4025a4:	f043 0310 	orr.w	r3, r3, #16
  4025a8:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  4025aa:	2101      	movs	r1, #1
  4025ac:	4628      	mov	r0, r5
  4025ae:	4b16      	ldr	r3, [pc, #88]	; (402608 <nm_bus_init+0xf4>)
  4025b0:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  4025b2:	2200      	movs	r2, #0
  4025b4:	2101      	movs	r1, #1
  4025b6:	4628      	mov	r0, r5
  4025b8:	4b14      	ldr	r3, [pc, #80]	; (40260c <nm_bus_init+0xf8>)
  4025ba:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  4025bc:	2201      	movs	r2, #1
  4025be:	4611      	mov	r1, r2
  4025c0:	4628      	mov	r0, r5
  4025c2:	4b13      	ldr	r3, [pc, #76]	; (402610 <nm_bus_init+0xfc>)
  4025c4:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  4025c6:	2200      	movs	r2, #0
  4025c8:	2101      	movs	r1, #1
  4025ca:	4628      	mov	r0, r5
  4025cc:	4b11      	ldr	r3, [pc, #68]	; (402614 <nm_bus_init+0x100>)
  4025ce:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  4025d0:	4911      	ldr	r1, [pc, #68]	; (402618 <nm_bus_init+0x104>)
  4025d2:	4812      	ldr	r0, [pc, #72]	; (40261c <nm_bus_init+0x108>)
  4025d4:	4b12      	ldr	r3, [pc, #72]	; (402620 <nm_bus_init+0x10c>)
  4025d6:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  4025d8:	b2c2      	uxtb	r2, r0
  4025da:	2101      	movs	r1, #1
  4025dc:	4628      	mov	r0, r5
  4025de:	4b11      	ldr	r3, [pc, #68]	; (402624 <nm_bus_init+0x110>)
  4025e0:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  4025e2:	2300      	movs	r3, #0
  4025e4:	461a      	mov	r2, r3
  4025e6:	2101      	movs	r1, #1
  4025e8:	4628      	mov	r0, r5
  4025ea:	4f0f      	ldr	r7, [pc, #60]	; (402628 <nm_bus_init+0x114>)
  4025ec:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4025ee:	2301      	movs	r3, #1
  4025f0:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  4025f2:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  4025f4:	4b0d      	ldr	r3, [pc, #52]	; (40262c <nm_bus_init+0x118>)
  4025f6:	4798      	blx	r3
#endif
	return result;
}
  4025f8:	2000      	movs	r0, #0
  4025fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4025fc:	400e1400 	.word	0x400e1400
  402600:	40008000 	.word	0x40008000
  402604:	00405705 	.word	0x00405705
  402608:	00405731 	.word	0x00405731
  40260c:	004057ab 	.word	0x004057ab
  402610:	004057c9 	.word	0x004057c9
  402614:	004057e7 	.word	0x004057e7
  402618:	11e1a300 	.word	0x11e1a300
  40261c:	02dc6c00 	.word	0x02dc6c00
  402620:	004057fb 	.word	0x004057fb
  402624:	00405811 	.word	0x00405811
  402628:	00405839 	.word	0x00405839
  40262c:	004023c5 	.word	0x004023c5

00402630 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  402630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402634:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  402636:	2803      	cmp	r0, #3
  402638:	d144      	bne.n	4026c4 <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  40263a:	680e      	ldr	r6, [r1, #0]
  40263c:	684d      	ldr	r5, [r1, #4]
  40263e:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  402640:	2300      	movs	r3, #0
  402642:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  402646:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  40264a:	b186      	cbz	r6, 40266e <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  40264c:	2d00      	cmp	r5, #0
  40264e:	d136      	bne.n	4026be <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  402650:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  402654:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  402656:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  402658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40265c:	4b20      	ldr	r3, [pc, #128]	; (4026e0 <nm_bus_ioctl+0xb0>)
  40265e:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  402660:	b32c      	cbz	r4, 4026ae <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  402662:	4f20      	ldr	r7, [pc, #128]	; (4026e4 <nm_bus_ioctl+0xb4>)
  402664:	f8df b094 	ldr.w	fp, [pc, #148]	; 4026fc <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  402668:	f8df a094 	ldr.w	sl, [pc, #148]	; 402700 <nm_bus_ioctl+0xd0>
  40266c:	e006      	b.n	40267c <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40266e:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  402672:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  402676:	ae01      	add	r6, sp, #4
  402678:	e7ee      	b.n	402658 <nm_bus_ioctl+0x28>
	while (u16Sz) {
  40267a:	b1c4      	cbz	r4, 4026ae <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40267c:	2300      	movs	r3, #0
  40267e:	461a      	mov	r2, r3
  402680:	7831      	ldrb	r1, [r6, #0]
  402682:	4638      	mov	r0, r7
  402684:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  402686:	f10d 0205 	add.w	r2, sp, #5
  40268a:	f10d 0106 	add.w	r1, sp, #6
  40268e:	4638      	mov	r0, r7
  402690:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  402692:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402696:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  402698:	3c01      	subs	r4, #1
  40269a:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  40269c:	f1b8 0f00 	cmp.w	r8, #0
  4026a0:	d100      	bne.n	4026a4 <nm_bus_ioctl+0x74>
			pu8Miso++;
  4026a2:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  4026a4:	f1b9 0f00 	cmp.w	r9, #0
  4026a8:	d1e7      	bne.n	40267a <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  4026aa:	3601      	adds	r6, #1
  4026ac:	e7e5      	b.n	40267a <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  4026ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4026b2:	4b0b      	ldr	r3, [pc, #44]	; (4026e0 <nm_bus_ioctl+0xb0>)
  4026b4:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  4026b6:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4026b8:	b003      	add	sp, #12
  4026ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  4026be:	f06f 0005 	mvn.w	r0, #5
		break;
  4026c2:	e7f9      	b.n	4026b8 <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  4026c4:	f240 121f 	movw	r2, #287	; 0x11f
  4026c8:	4907      	ldr	r1, [pc, #28]	; (4026e8 <nm_bus_ioctl+0xb8>)
  4026ca:	4808      	ldr	r0, [pc, #32]	; (4026ec <nm_bus_ioctl+0xbc>)
  4026cc:	4c08      	ldr	r4, [pc, #32]	; (4026f0 <nm_bus_ioctl+0xc0>)
  4026ce:	47a0      	blx	r4
  4026d0:	4808      	ldr	r0, [pc, #32]	; (4026f4 <nm_bus_ioctl+0xc4>)
  4026d2:	47a0      	blx	r4
  4026d4:	4808      	ldr	r0, [pc, #32]	; (4026f8 <nm_bus_ioctl+0xc8>)
  4026d6:	47a0      	blx	r4
			s8Ret = -1;
  4026d8:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  4026dc:	e7ec      	b.n	4026b8 <nm_bus_ioctl+0x88>
  4026de:	bf00      	nop
  4026e0:	400e1400 	.word	0x400e1400
  4026e4:	40008000 	.word	0x40008000
  4026e8:	0040cacc 	.word	0x0040cacc
  4026ec:	0040cadc 	.word	0x0040cadc
  4026f0:	00406611 	.word	0x00406611
  4026f4:	0040caf0 	.word	0x0040caf0
  4026f8:	0040cb08 	.word	0x0040cb08
  4026fc:	00405777 	.word	0x00405777
  402700:	00405747 	.word	0x00405747

00402704 <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  402704:	2202      	movs	r2, #2
  402706:	4b0e      	ldr	r3, [pc, #56]	; (402740 <nm_bus_deinit+0x3c>)
  402708:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40270a:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  40270e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  402712:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402716:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402718:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40271c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402720:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402722:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402726:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40272a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40272c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402734:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402736:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  40273a:	2000      	movs	r0, #0
  40273c:	4770      	bx	lr
  40273e:	bf00      	nop
  402740:	40008000 	.word	0x40008000

00402744 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  402744:	b13a      	cbz	r2, 402756 <m2m_memcpy+0x12>
  402746:	3901      	subs	r1, #1
  402748:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  40274a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40274e:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  402752:	4290      	cmp	r0, r2
  402754:	d1f9      	bne.n	40274a <m2m_memcpy+0x6>
  402756:	4770      	bx	lr

00402758 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  402758:	b122      	cbz	r2, 402764 <m2m_memset+0xc>
  40275a:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  40275c:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  402760:	4290      	cmp	r0, r2
  402762:	d1fb      	bne.n	40275c <m2m_memset+0x4>
  402764:	4770      	bx	lr

00402766 <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  402766:	7803      	ldrb	r3, [r0, #0]
  402768:	b143      	cbz	r3, 40277c <m2m_strlen+0x16>
  40276a:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  40276c:	3301      	adds	r3, #1
  40276e:	b29b      	uxth	r3, r3
	while(*pcStr)
  402770:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  402774:	2a00      	cmp	r2, #0
  402776:	d1f9      	bne.n	40276c <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  402778:	4618      	mov	r0, r3
  40277a:	4770      	bx	lr
	uint16	u16StrLen = 0;
  40277c:	2300      	movs	r3, #0
  40277e:	e7fb      	b.n	402778 <m2m_strlen+0x12>

00402780 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  402780:	4a02      	ldr	r2, [pc, #8]	; (40278c <isr+0xc>)
  402782:	7813      	ldrb	r3, [r2, #0]
  402784:	3301      	adds	r3, #1
  402786:	b2db      	uxtb	r3, r3
  402788:	7013      	strb	r3, [r2, #0]
  40278a:	4770      	bx	lr
  40278c:	2040c343 	.word	0x2040c343

00402790 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402790:	4770      	bx	lr
	...

00402794 <hif_set_rx_done>:
{
  402794:	b500      	push	{lr}
  402796:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  402798:	2001      	movs	r0, #1
  40279a:	4b0b      	ldr	r3, [pc, #44]	; (4027c8 <hif_set_rx_done+0x34>)
  40279c:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  40279e:	a901      	add	r1, sp, #4
  4027a0:	f241 0070 	movw	r0, #4208	; 0x1070
  4027a4:	4b09      	ldr	r3, [pc, #36]	; (4027cc <hif_set_rx_done+0x38>)
  4027a6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4027a8:	4603      	mov	r3, r0
  4027aa:	b118      	cbz	r0, 4027b4 <hif_set_rx_done+0x20>
}
  4027ac:	4618      	mov	r0, r3
  4027ae:	b003      	add	sp, #12
  4027b0:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  4027b4:	9901      	ldr	r1, [sp, #4]
  4027b6:	f041 0102 	orr.w	r1, r1, #2
  4027ba:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4027bc:	f241 0070 	movw	r0, #4208	; 0x1070
  4027c0:	4b03      	ldr	r3, [pc, #12]	; (4027d0 <hif_set_rx_done+0x3c>)
  4027c2:	4798      	blx	r3
  4027c4:	4603      	mov	r3, r0
  4027c6:	e7f1      	b.n	4027ac <hif_set_rx_done+0x18>
  4027c8:	004024ed 	.word	0x004024ed
  4027cc:	00403a81 	.word	0x00403a81
  4027d0:	00403a8d 	.word	0x00403a8d

004027d4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  4027d4:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  4027d6:	4b12      	ldr	r3, [pc, #72]	; (402820 <hif_chip_wake+0x4c>)
  4027d8:	781b      	ldrb	r3, [r3, #0]
  4027da:	b94b      	cbnz	r3, 4027f0 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4027dc:	4b11      	ldr	r3, [pc, #68]	; (402824 <hif_chip_wake+0x50>)
  4027de:	781b      	ldrb	r3, [r3, #0]
  4027e0:	b2db      	uxtb	r3, r3
  4027e2:	2b03      	cmp	r3, #3
  4027e4:	d00c      	beq.n	402800 <hif_chip_wake+0x2c>
  4027e6:	4b0f      	ldr	r3, [pc, #60]	; (402824 <hif_chip_wake+0x50>)
  4027e8:	781b      	ldrb	r3, [r3, #0]
  4027ea:	b2db      	uxtb	r3, r3
  4027ec:	2b04      	cmp	r3, #4
  4027ee:	d007      	beq.n	402800 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4027f0:	4a0b      	ldr	r2, [pc, #44]	; (402820 <hif_chip_wake+0x4c>)
  4027f2:	7813      	ldrb	r3, [r2, #0]
  4027f4:	3301      	adds	r3, #1
  4027f6:	b2db      	uxtb	r3, r3
  4027f8:	7013      	strb	r3, [r2, #0]
  4027fa:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4027fc:	4618      	mov	r0, r3
  4027fe:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  402800:	4b09      	ldr	r3, [pc, #36]	; (402828 <hif_chip_wake+0x54>)
  402802:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402804:	4603      	mov	r3, r0
  402806:	2800      	cmp	r0, #0
  402808:	d1f8      	bne.n	4027fc <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  40280a:	f245 6178 	movw	r1, #22136	; 0x5678
  40280e:	f241 0074 	movw	r0, #4212	; 0x1074
  402812:	4b06      	ldr	r3, [pc, #24]	; (40282c <hif_chip_wake+0x58>)
  402814:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402816:	4603      	mov	r3, r0
  402818:	2800      	cmp	r0, #0
  40281a:	d0e9      	beq.n	4027f0 <hif_chip_wake+0x1c>
  40281c:	e7ee      	b.n	4027fc <hif_chip_wake+0x28>
  40281e:	bf00      	nop
  402820:	2040c341 	.word	0x2040c341
  402824:	2040c340 	.word	0x2040c340
  402828:	004035f1 	.word	0x004035f1
  40282c:	00403a8d 	.word	0x00403a8d

00402830 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  402830:	4b1e      	ldr	r3, [pc, #120]	; (4028ac <hif_chip_sleep+0x7c>)
  402832:	781b      	ldrb	r3, [r3, #0]
  402834:	b123      	cbz	r3, 402840 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  402836:	4a1d      	ldr	r2, [pc, #116]	; (4028ac <hif_chip_sleep+0x7c>)
  402838:	7813      	ldrb	r3, [r2, #0]
  40283a:	3b01      	subs	r3, #1
  40283c:	b2db      	uxtb	r3, r3
  40283e:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  402840:	4b1a      	ldr	r3, [pc, #104]	; (4028ac <hif_chip_sleep+0x7c>)
  402842:	781b      	ldrb	r3, [r3, #0]
  402844:	2b00      	cmp	r3, #0
  402846:	d12e      	bne.n	4028a6 <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  402848:	4b19      	ldr	r3, [pc, #100]	; (4028b0 <hif_chip_sleep+0x80>)
  40284a:	781b      	ldrb	r3, [r3, #0]
  40284c:	b2db      	uxtb	r3, r3
  40284e:	2b03      	cmp	r3, #3
  402850:	d006      	beq.n	402860 <hif_chip_sleep+0x30>
  402852:	4b17      	ldr	r3, [pc, #92]	; (4028b0 <hif_chip_sleep+0x80>)
  402854:	781b      	ldrb	r3, [r3, #0]
  402856:	b2db      	uxtb	r3, r3
  402858:	2b04      	cmp	r3, #4
  40285a:	d001      	beq.n	402860 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  40285c:	2300      	movs	r3, #0
  40285e:	e023      	b.n	4028a8 <hif_chip_sleep+0x78>
{
  402860:	b500      	push	{lr}
  402862:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  402864:	2300      	movs	r3, #0
  402866:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  402868:	f244 3121 	movw	r1, #17185	; 0x4321
  40286c:	f241 0074 	movw	r0, #4212	; 0x1074
  402870:	4b10      	ldr	r3, [pc, #64]	; (4028b4 <hif_chip_sleep+0x84>)
  402872:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402874:	4603      	mov	r3, r0
  402876:	b118      	cbz	r0, 402880 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  402878:	4618      	mov	r0, r3
  40287a:	b003      	add	sp, #12
  40287c:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  402880:	a901      	add	r1, sp, #4
  402882:	2001      	movs	r0, #1
  402884:	4b0c      	ldr	r3, [pc, #48]	; (4028b8 <hif_chip_sleep+0x88>)
  402886:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402888:	4603      	mov	r3, r0
  40288a:	2800      	cmp	r0, #0
  40288c:	d1f4      	bne.n	402878 <hif_chip_sleep+0x48>
			if(reg&0x2)
  40288e:	9901      	ldr	r1, [sp, #4]
  402890:	f011 0f02 	tst.w	r1, #2
  402894:	d0f0      	beq.n	402878 <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  402896:	f021 0102 	bic.w	r1, r1, #2
  40289a:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  40289c:	2001      	movs	r0, #1
  40289e:	4b05      	ldr	r3, [pc, #20]	; (4028b4 <hif_chip_sleep+0x84>)
  4028a0:	4798      	blx	r3
  4028a2:	4603      	mov	r3, r0
  4028a4:	e7e8      	b.n	402878 <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  4028a6:	2300      	movs	r3, #0
}
  4028a8:	4618      	mov	r0, r3
  4028aa:	4770      	bx	lr
  4028ac:	2040c341 	.word	0x2040c341
  4028b0:	2040c340 	.word	0x2040c340
  4028b4:	00403a8d 	.word	0x00403a8d
  4028b8:	00403a81 	.word	0x00403a81

004028bc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4028bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028c0:	b087      	sub	sp, #28
  4028c2:	4607      	mov	r7, r0
  4028c4:	4688      	mov	r8, r1
  4028c6:	4692      	mov	sl, r2
  4028c8:	4699      	mov	r9, r3
  4028ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4028cc:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  4028d0:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  4028d4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4028d8:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4028dc:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4028e0:	2308      	movs	r3, #8
  4028e2:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4028e6:	2c00      	cmp	r4, #0
  4028e8:	f000 809f 	beq.w	402a2a <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4028ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4028f0:	fa16 f383 	uxtah	r3, r6, r3
  4028f4:	442b      	add	r3, r5
  4028f6:	b29b      	uxth	r3, r3
  4028f8:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  4028fc:	4b5c      	ldr	r3, [pc, #368]	; (402a70 <hif_send+0x1b4>)
  4028fe:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  402900:	4683      	mov	fp, r0
  402902:	2800      	cmp	r0, #0
  402904:	f040 80a2 	bne.w	402a4c <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  402908:	2300      	movs	r3, #0
  40290a:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  40290c:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  402910:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  402912:	9b02      	ldr	r3, [sp, #8]
  402914:	431f      	orrs	r7, r3
  402916:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  402918:	9b02      	ldr	r3, [sp, #8]
  40291a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  40291e:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  402920:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  402924:	9b02      	ldr	r3, [sp, #8]
  402926:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40292a:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  40292c:	9902      	ldr	r1, [sp, #8]
  40292e:	f241 008c 	movw	r0, #4236	; 0x108c
  402932:	4b50      	ldr	r3, [pc, #320]	; (402a74 <hif_send+0x1b8>)
  402934:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  402936:	4683      	mov	fp, r0
  402938:	2800      	cmp	r0, #0
  40293a:	f040 8091 	bne.w	402a60 <hif_send+0x1a4>


		reg = 0;
  40293e:	2300      	movs	r3, #0
  402940:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  402942:	9b02      	ldr	r3, [sp, #8]
  402944:	f043 0302 	orr.w	r3, r3, #2
  402948:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  40294a:	9902      	ldr	r1, [sp, #8]
  40294c:	f241 0078 	movw	r0, #4216	; 0x1078
  402950:	4b48      	ldr	r3, [pc, #288]	; (402a74 <hif_send+0x1b8>)
  402952:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  402954:	4683      	mov	fp, r0
  402956:	2800      	cmp	r0, #0
  402958:	f040 8082 	bne.w	402a60 <hif_send+0x1a4>
		dma_addr = 0;
  40295c:	2300      	movs	r3, #0
  40295e:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  402960:	f8ad 3006 	strh.w	r3, [sp, #6]
  402964:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402968:	b29b      	uxth	r3, r3
  40296a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40296e:	d216      	bcs.n	40299e <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  402970:	f241 0878 	movw	r8, #4216	; 0x1078
  402974:	4f40      	ldr	r7, [pc, #256]	; (402a78 <hif_send+0x1bc>)
  402976:	a902      	add	r1, sp, #8
  402978:	4640      	mov	r0, r8
  40297a:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  40297c:	b978      	cbnz	r0, 40299e <hif_send+0xe2>
			if (!(reg & 0x2))
  40297e:	9b02      	ldr	r3, [sp, #8]
  402980:	f013 0f02 	tst.w	r3, #2
  402984:	d059      	beq.n	402a3a <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  402986:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40298a:	3301      	adds	r3, #1
  40298c:	b29b      	uxth	r3, r3
  40298e:	f8ad 3006 	strh.w	r3, [sp, #6]
  402992:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402996:	b29b      	uxth	r3, r3
  402998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40299c:	d3eb      	bcc.n	402976 <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  40299e:	9b03      	ldr	r3, [sp, #12]
  4029a0:	2b00      	cmp	r3, #0
  4029a2:	d061      	beq.n	402a68 <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  4029a4:	9b03      	ldr	r3, [sp, #12]
  4029a6:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  4029a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4029ac:	b29b      	uxth	r3, r3
  4029ae:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  4029b2:	9804      	ldr	r0, [sp, #16]
  4029b4:	2208      	movs	r2, #8
  4029b6:	a905      	add	r1, sp, #20
  4029b8:	4b30      	ldr	r3, [pc, #192]	; (402a7c <hif_send+0x1c0>)
  4029ba:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4029bc:	4683      	mov	fp, r0
  4029be:	2800      	cmp	r0, #0
  4029c0:	d14e      	bne.n	402a60 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4029c2:	9b04      	ldr	r3, [sp, #16]
  4029c4:	3308      	adds	r3, #8
  4029c6:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4029c8:	f1ba 0f00 	cmp.w	sl, #0
  4029cc:	d00a      	beq.n	4029e4 <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  4029ce:	9804      	ldr	r0, [sp, #16]
  4029d0:	464a      	mov	r2, r9
  4029d2:	4651      	mov	r1, sl
  4029d4:	4b29      	ldr	r3, [pc, #164]	; (402a7c <hif_send+0x1c0>)
  4029d6:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4029d8:	4683      	mov	fp, r0
  4029da:	2800      	cmp	r0, #0
  4029dc:	d140      	bne.n	402a60 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  4029de:	9b04      	ldr	r3, [sp, #16]
  4029e0:	444b      	add	r3, r9
  4029e2:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  4029e4:	b17c      	cbz	r4, 402a06 <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  4029e6:	9b04      	ldr	r3, [sp, #16]
  4029e8:	eba5 0509 	sub.w	r5, r5, r9
  4029ec:	441d      	add	r5, r3
  4029ee:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4029f0:	9804      	ldr	r0, [sp, #16]
  4029f2:	4632      	mov	r2, r6
  4029f4:	4621      	mov	r1, r4
  4029f6:	4b21      	ldr	r3, [pc, #132]	; (402a7c <hif_send+0x1c0>)
  4029f8:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4029fa:	4683      	mov	fp, r0
  4029fc:	2800      	cmp	r0, #0
  4029fe:	d12f      	bne.n	402a60 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  402a00:	9b04      	ldr	r3, [sp, #16]
  402a02:	441e      	add	r6, r3
  402a04:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  402a06:	9b03      	ldr	r3, [sp, #12]
  402a08:	009b      	lsls	r3, r3, #2
  402a0a:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  402a0c:	9b02      	ldr	r3, [sp, #8]
  402a0e:	f043 0302 	orr.w	r3, r3, #2
  402a12:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  402a14:	9902      	ldr	r1, [sp, #8]
  402a16:	f241 006c 	movw	r0, #4204	; 0x106c
  402a1a:	4b16      	ldr	r3, [pc, #88]	; (402a74 <hif_send+0x1b8>)
  402a1c:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  402a1e:	4683      	mov	fp, r0
  402a20:	b9f0      	cbnz	r0, 402a60 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  402a22:	4b17      	ldr	r3, [pc, #92]	; (402a80 <hif_send+0x1c4>)
  402a24:	4798      	blx	r3
  402a26:	4683      	mov	fp, r0
  402a28:	e01a      	b.n	402a60 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  402a2a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402a2e:	fa19 f383 	uxtah	r3, r9, r3
  402a32:	b29b      	uxth	r3, r3
  402a34:	f8ad 3016 	strh.w	r3, [sp, #22]
  402a38:	e760      	b.n	4028fc <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  402a3a:	a903      	add	r1, sp, #12
  402a3c:	4811      	ldr	r0, [pc, #68]	; (402a84 <hif_send+0x1c8>)
  402a3e:	4b0e      	ldr	r3, [pc, #56]	; (402a78 <hif_send+0x1bc>)
  402a40:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  402a42:	2800      	cmp	r0, #0
  402a44:	d0ab      	beq.n	40299e <hif_send+0xe2>
					dma_addr = 0;
  402a46:	2300      	movs	r3, #0
  402a48:	9303      	str	r3, [sp, #12]
  402a4a:	e7a8      	b.n	40299e <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  402a4c:	f240 129f 	movw	r2, #415	; 0x19f
  402a50:	490d      	ldr	r1, [pc, #52]	; (402a88 <hif_send+0x1cc>)
  402a52:	480e      	ldr	r0, [pc, #56]	; (402a8c <hif_send+0x1d0>)
  402a54:	4c0e      	ldr	r4, [pc, #56]	; (402a90 <hif_send+0x1d4>)
  402a56:	47a0      	blx	r4
  402a58:	480e      	ldr	r0, [pc, #56]	; (402a94 <hif_send+0x1d8>)
  402a5a:	47a0      	blx	r4
  402a5c:	480e      	ldr	r0, [pc, #56]	; (402a98 <hif_send+0x1dc>)
  402a5e:	47a0      	blx	r4

ERR1:
	return ret;
}
  402a60:	4658      	mov	r0, fp
  402a62:	b007      	add	sp, #28
  402a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  402a68:	f06f 0b02 	mvn.w	fp, #2
  402a6c:	e7f8      	b.n	402a60 <hif_send+0x1a4>
  402a6e:	bf00      	nop
  402a70:	004027d5 	.word	0x004027d5
  402a74:	00403a8d 	.word	0x00403a8d
  402a78:	00403a81 	.word	0x00403a81
  402a7c:	00403af5 	.word	0x00403af5
  402a80:	00402831 	.word	0x00402831
  402a84:	00150400 	.word	0x00150400
  402a88:	0040cb0c 	.word	0x0040cb0c
  402a8c:	0040cadc 	.word	0x0040cadc
  402a90:	00406611 	.word	0x00406611
  402a94:	0040cd60 	.word	0x0040cd60
  402a98:	0040cb08 	.word	0x0040cb08

00402a9c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  402a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402aa0:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  402aa2:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 402d9c <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  402aa6:	4fa2      	ldr	r7, [pc, #648]	; (402d30 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402aa8:	4ea2      	ldr	r6, [pc, #648]	; (402d34 <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  402aaa:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 402da0 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  402aae:	e0d5      	b.n	402c5c <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  402ab0:	2204      	movs	r2, #4
  402ab2:	a904      	add	r1, sp, #16
  402ab4:	9805      	ldr	r0, [sp, #20]
  402ab6:	4ba0      	ldr	r3, [pc, #640]	; (402d38 <hif_handle_isr+0x29c>)
  402ab8:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  402aba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402abe:	b29b      	uxth	r3, r3
  402ac0:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  402ac4:	4604      	mov	r4, r0
  402ac6:	2800      	cmp	r0, #0
  402ac8:	d130      	bne.n	402b2c <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  402aca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402ace:	b29b      	uxth	r3, r3
  402ad0:	429d      	cmp	r5, r3
  402ad2:	d005      	beq.n	402ae0 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  402ad4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402ad8:	b29b      	uxth	r3, r3
  402ada:	1aeb      	subs	r3, r5, r3
  402adc:	2b04      	cmp	r3, #4
  402ade:	dc33      	bgt.n	402b48 <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  402ae0:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402ae4:	b2db      	uxtb	r3, r3
  402ae6:	2b01      	cmp	r3, #1
  402ae8:	d047      	beq.n	402b7a <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  402aea:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402aee:	b2db      	uxtb	r3, r3
  402af0:	2b02      	cmp	r3, #2
  402af2:	d05f      	beq.n	402bb4 <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  402af4:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402af8:	b2db      	uxtb	r3, r3
  402afa:	2b04      	cmp	r3, #4
  402afc:	d068      	beq.n	402bd0 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  402afe:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402b02:	b2db      	uxtb	r3, r3
  402b04:	2b06      	cmp	r3, #6
  402b06:	d071      	beq.n	402bec <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  402b08:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402b0c:	b2db      	uxtb	r3, r3
  402b0e:	2b07      	cmp	r3, #7
  402b10:	d07a      	beq.n	402c08 <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  402b12:	f240 2202 	movw	r2, #514	; 0x202
  402b16:	4641      	mov	r1, r8
  402b18:	4630      	mov	r0, r6
  402b1a:	4c88      	ldr	r4, [pc, #544]	; (402d3c <hif_handle_isr+0x2a0>)
  402b1c:	47a0      	blx	r4
  402b1e:	4888      	ldr	r0, [pc, #544]	; (402d40 <hif_handle_isr+0x2a4>)
  402b20:	47a0      	blx	r4
  402b22:	4888      	ldr	r0, [pc, #544]	; (402d44 <hif_handle_isr+0x2a8>)
  402b24:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  402b26:	f06f 0405 	mvn.w	r4, #5
  402b2a:	e096      	b.n	402c5a <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  402b2c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  402b30:	4641      	mov	r1, r8
  402b32:	4630      	mov	r0, r6
  402b34:	4d81      	ldr	r5, [pc, #516]	; (402d3c <hif_handle_isr+0x2a0>)
  402b36:	47a8      	blx	r5
  402b38:	4883      	ldr	r0, [pc, #524]	; (402d48 <hif_handle_isr+0x2ac>)
  402b3a:	47a8      	blx	r5
  402b3c:	4881      	ldr	r0, [pc, #516]	; (402d44 <hif_handle_isr+0x2a8>)
  402b3e:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402b40:	2001      	movs	r0, #1
  402b42:	4b82      	ldr	r3, [pc, #520]	; (402d4c <hif_handle_isr+0x2b0>)
  402b44:	4798      	blx	r3
  402b46:	e088      	b.n	402c5a <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  402b48:	f240 12df 	movw	r2, #479	; 0x1df
  402b4c:	4641      	mov	r1, r8
  402b4e:	4630      	mov	r0, r6
  402b50:	4c7a      	ldr	r4, [pc, #488]	; (402d3c <hif_handle_isr+0x2a0>)
  402b52:	47a0      	blx	r4
  402b54:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  402b58:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402b5c:	f89d 1011 	ldrb.w	r1, [sp, #17]
  402b60:	9100      	str	r1, [sp, #0]
  402b62:	b292      	uxth	r2, r2
  402b64:	4629      	mov	r1, r5
  402b66:	487a      	ldr	r0, [pc, #488]	; (402d50 <hif_handle_isr+0x2b4>)
  402b68:	47a0      	blx	r4
  402b6a:	4876      	ldr	r0, [pc, #472]	; (402d44 <hif_handle_isr+0x2a8>)
  402b6c:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  402b6e:	2001      	movs	r0, #1
  402b70:	4b76      	ldr	r3, [pc, #472]	; (402d4c <hif_handle_isr+0x2b0>)
  402b72:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  402b74:	f06f 0405 	mvn.w	r4, #5
  402b78:	e06f      	b.n	402c5a <hif_handle_isr+0x1be>
						if(pfWifiCb)
  402b7a:	4b76      	ldr	r3, [pc, #472]	; (402d54 <hif_handle_isr+0x2b8>)
  402b7c:	681b      	ldr	r3, [r3, #0]
  402b7e:	b143      	cbz	r3, 402b92 <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402b80:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402b84:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402b88:	3908      	subs	r1, #8
  402b8a:	9a05      	ldr	r2, [sp, #20]
  402b8c:	3208      	adds	r2, #8
  402b8e:	b289      	uxth	r1, r1
  402b90:	4798      	blx	r3
					if(!gu8HifSizeDone)
  402b92:	4b71      	ldr	r3, [pc, #452]	; (402d58 <hif_handle_isr+0x2bc>)
  402b94:	781b      	ldrb	r3, [r3, #0]
  402b96:	2b00      	cmp	r3, #0
  402b98:	d15c      	bne.n	402c54 <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  402b9a:	f240 2209 	movw	r2, #521	; 0x209
  402b9e:	4641      	mov	r1, r8
  402ba0:	4630      	mov	r0, r6
  402ba2:	4c66      	ldr	r4, [pc, #408]	; (402d3c <hif_handle_isr+0x2a0>)
  402ba4:	47a0      	blx	r4
  402ba6:	486d      	ldr	r0, [pc, #436]	; (402d5c <hif_handle_isr+0x2c0>)
  402ba8:	47a0      	blx	r4
  402baa:	4866      	ldr	r0, [pc, #408]	; (402d44 <hif_handle_isr+0x2a8>)
  402bac:	47a0      	blx	r4
						ret = hif_set_rx_done();
  402bae:	4b6c      	ldr	r3, [pc, #432]	; (402d60 <hif_handle_isr+0x2c4>)
  402bb0:	4798      	blx	r3
  402bb2:	e04f      	b.n	402c54 <hif_handle_isr+0x1b8>
						if(pfIpCb)
  402bb4:	4b6b      	ldr	r3, [pc, #428]	; (402d64 <hif_handle_isr+0x2c8>)
  402bb6:	681b      	ldr	r3, [r3, #0]
  402bb8:	2b00      	cmp	r3, #0
  402bba:	d0ea      	beq.n	402b92 <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402bbc:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402bc0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402bc4:	3908      	subs	r1, #8
  402bc6:	9a05      	ldr	r2, [sp, #20]
  402bc8:	3208      	adds	r2, #8
  402bca:	b289      	uxth	r1, r1
  402bcc:	4798      	blx	r3
  402bce:	e7e0      	b.n	402b92 <hif_handle_isr+0xf6>
						if(pfOtaCb)
  402bd0:	4b65      	ldr	r3, [pc, #404]	; (402d68 <hif_handle_isr+0x2cc>)
  402bd2:	681b      	ldr	r3, [r3, #0]
  402bd4:	2b00      	cmp	r3, #0
  402bd6:	d0dc      	beq.n	402b92 <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402bd8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402bdc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402be0:	3908      	subs	r1, #8
  402be2:	9a05      	ldr	r2, [sp, #20]
  402be4:	3208      	adds	r2, #8
  402be6:	b289      	uxth	r1, r1
  402be8:	4798      	blx	r3
  402bea:	e7d2      	b.n	402b92 <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  402bec:	4b5f      	ldr	r3, [pc, #380]	; (402d6c <hif_handle_isr+0x2d0>)
  402bee:	681b      	ldr	r3, [r3, #0]
  402bf0:	2b00      	cmp	r3, #0
  402bf2:	d0ce      	beq.n	402b92 <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402bf4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402bf8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402bfc:	3908      	subs	r1, #8
  402bfe:	9a05      	ldr	r2, [sp, #20]
  402c00:	3208      	adds	r2, #8
  402c02:	b289      	uxth	r1, r1
  402c04:	4798      	blx	r3
  402c06:	e7c4      	b.n	402b92 <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  402c08:	4b59      	ldr	r3, [pc, #356]	; (402d70 <hif_handle_isr+0x2d4>)
  402c0a:	681b      	ldr	r3, [r3, #0]
  402c0c:	2b00      	cmp	r3, #0
  402c0e:	d0c0      	beq.n	402b92 <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402c10:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402c14:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402c18:	3908      	subs	r1, #8
  402c1a:	9a05      	ldr	r2, [sp, #20]
  402c1c:	3208      	adds	r2, #8
  402c1e:	b289      	uxth	r1, r1
  402c20:	4798      	blx	r3
  402c22:	e7b6      	b.n	402b92 <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  402c24:	f240 2211 	movw	r2, #529	; 0x211
  402c28:	4641      	mov	r1, r8
  402c2a:	4630      	mov	r0, r6
  402c2c:	4c43      	ldr	r4, [pc, #268]	; (402d3c <hif_handle_isr+0x2a0>)
  402c2e:	47a0      	blx	r4
  402c30:	4850      	ldr	r0, [pc, #320]	; (402d74 <hif_handle_isr+0x2d8>)
  402c32:	47a0      	blx	r4
  402c34:	4843      	ldr	r0, [pc, #268]	; (402d44 <hif_handle_isr+0x2a8>)
  402c36:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  402c38:	f06f 0401 	mvn.w	r4, #1
  402c3c:	e02f      	b.n	402c9e <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  402c3e:	f44f 7206 	mov.w	r2, #536	; 0x218
  402c42:	4641      	mov	r1, r8
  402c44:	4630      	mov	r0, r6
  402c46:	4c3d      	ldr	r4, [pc, #244]	; (402d3c <hif_handle_isr+0x2a0>)
  402c48:	47a0      	blx	r4
  402c4a:	9903      	ldr	r1, [sp, #12]
  402c4c:	484a      	ldr	r0, [pc, #296]	; (402d78 <hif_handle_isr+0x2dc>)
  402c4e:	47a0      	blx	r4
  402c50:	483c      	ldr	r0, [pc, #240]	; (402d44 <hif_handle_isr+0x2a8>)
  402c52:	47a0      	blx	r4
	ret = hif_chip_sleep();
  402c54:	4b49      	ldr	r3, [pc, #292]	; (402d7c <hif_handle_isr+0x2e0>)
  402c56:	4798      	blx	r3
  402c58:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  402c5a:	bb04      	cbnz	r4, 402c9e <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  402c5c:	f899 3000 	ldrb.w	r3, [r9]
  402c60:	2b00      	cmp	r3, #0
  402c62:	f000 809f 	beq.w	402da4 <hif_handle_isr+0x308>
		gu8Interrupt--;
  402c66:	f899 3000 	ldrb.w	r3, [r9]
  402c6a:	3b01      	subs	r3, #1
  402c6c:	b2db      	uxtb	r3, r3
  402c6e:	f889 3000 	strb.w	r3, [r9]
  402c72:	e01f      	b.n	402cb4 <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  402c74:	f240 221e 	movw	r2, #542	; 0x21e
  402c78:	4641      	mov	r1, r8
  402c7a:	4630      	mov	r0, r6
  402c7c:	4d2f      	ldr	r5, [pc, #188]	; (402d3c <hif_handle_isr+0x2a0>)
  402c7e:	47a8      	blx	r5
  402c80:	483f      	ldr	r0, [pc, #252]	; (402d80 <hif_handle_isr+0x2e4>)
  402c82:	47a8      	blx	r5
  402c84:	482f      	ldr	r0, [pc, #188]	; (402d44 <hif_handle_isr+0x2a8>)
  402c86:	47a8      	blx	r5
  402c88:	e009      	b.n	402c9e <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  402c8a:	f44f 7209 	mov.w	r2, #548	; 0x224
  402c8e:	4641      	mov	r1, r8
  402c90:	4630      	mov	r0, r6
  402c92:	4d2a      	ldr	r5, [pc, #168]	; (402d3c <hif_handle_isr+0x2a0>)
  402c94:	47a8      	blx	r5
  402c96:	483b      	ldr	r0, [pc, #236]	; (402d84 <hif_handle_isr+0x2e8>)
  402c98:	47a8      	blx	r5
  402c9a:	482a      	ldr	r0, [pc, #168]	; (402d44 <hif_handle_isr+0x2a8>)
  402c9c:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402c9e:	f240 2243 	movw	r2, #579	; 0x243
  402ca2:	4939      	ldr	r1, [pc, #228]	; (402d88 <hif_handle_isr+0x2ec>)
  402ca4:	4630      	mov	r0, r6
  402ca6:	4d25      	ldr	r5, [pc, #148]	; (402d3c <hif_handle_isr+0x2a0>)
  402ca8:	47a8      	blx	r5
  402caa:	4621      	mov	r1, r4
  402cac:	4837      	ldr	r0, [pc, #220]	; (402d8c <hif_handle_isr+0x2f0>)
  402cae:	47a8      	blx	r5
  402cb0:	4824      	ldr	r0, [pc, #144]	; (402d44 <hif_handle_isr+0x2a8>)
  402cb2:	47a8      	blx	r5
	ret = hif_chip_wake();
  402cb4:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  402cb6:	4604      	mov	r4, r0
  402cb8:	2800      	cmp	r0, #0
  402cba:	d1e6      	bne.n	402c8a <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  402cbc:	a903      	add	r1, sp, #12
  402cbe:	f241 0070 	movw	r0, #4208	; 0x1070
  402cc2:	4b33      	ldr	r3, [pc, #204]	; (402d90 <hif_handle_isr+0x2f4>)
  402cc4:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  402cc6:	4604      	mov	r4, r0
  402cc8:	2800      	cmp	r0, #0
  402cca:	d1d3      	bne.n	402c74 <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  402ccc:	9b03      	ldr	r3, [sp, #12]
  402cce:	f013 0f01 	tst.w	r3, #1
  402cd2:	d0b4      	beq.n	402c3e <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  402cd4:	4b1d      	ldr	r3, [pc, #116]	; (402d4c <hif_handle_isr+0x2b0>)
  402cd6:	4798      	blx	r3
				reg &= ~(1<<0);
  402cd8:	9903      	ldr	r1, [sp, #12]
  402cda:	f021 0101 	bic.w	r1, r1, #1
  402cde:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  402ce0:	f241 0070 	movw	r0, #4208	; 0x1070
  402ce4:	4b2b      	ldr	r3, [pc, #172]	; (402d94 <hif_handle_isr+0x2f8>)
  402ce6:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  402ce8:	4604      	mov	r4, r0
  402cea:	2800      	cmp	r0, #0
  402cec:	d1d7      	bne.n	402c9e <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  402cee:	2200      	movs	r2, #0
  402cf0:	4b19      	ldr	r3, [pc, #100]	; (402d58 <hif_handle_isr+0x2bc>)
  402cf2:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  402cf4:	9d03      	ldr	r5, [sp, #12]
  402cf6:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  402cfa:	2d00      	cmp	r5, #0
  402cfc:	d092      	beq.n	402c24 <hif_handle_isr+0x188>
					uint32 address = 0;
  402cfe:	a906      	add	r1, sp, #24
  402d00:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  402d04:	f241 0084 	movw	r0, #4228	; 0x1084
  402d08:	4b21      	ldr	r3, [pc, #132]	; (402d90 <hif_handle_isr+0x2f4>)
  402d0a:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  402d0c:	4604      	mov	r4, r0
  402d0e:	2800      	cmp	r0, #0
  402d10:	f43f aece 	beq.w	402ab0 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  402d14:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  402d18:	4641      	mov	r1, r8
  402d1a:	4630      	mov	r0, r6
  402d1c:	4d07      	ldr	r5, [pc, #28]	; (402d3c <hif_handle_isr+0x2a0>)
  402d1e:	47a8      	blx	r5
  402d20:	481d      	ldr	r0, [pc, #116]	; (402d98 <hif_handle_isr+0x2fc>)
  402d22:	47a8      	blx	r5
  402d24:	4807      	ldr	r0, [pc, #28]	; (402d44 <hif_handle_isr+0x2a8>)
  402d26:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402d28:	2001      	movs	r0, #1
  402d2a:	4b08      	ldr	r3, [pc, #32]	; (402d4c <hif_handle_isr+0x2b0>)
  402d2c:	4798      	blx	r3
  402d2e:	e794      	b.n	402c5a <hif_handle_isr+0x1be>
  402d30:	004027d5 	.word	0x004027d5
  402d34:	0040cadc 	.word	0x0040cadc
  402d38:	00403a99 	.word	0x00403a99
  402d3c:	00406611 	.word	0x00406611
  402d40:	0040cbcc 	.word	0x0040cbcc
  402d44:	0040cb08 	.word	0x0040cb08
  402d48:	0040cb74 	.word	0x0040cb74
  402d4c:	004024ed 	.word	0x004024ed
  402d50:	0040cb8c 	.word	0x0040cb8c
  402d54:	2040c358 	.word	0x2040c358
  402d58:	2040c342 	.word	0x2040c342
  402d5c:	0040cbe4 	.word	0x0040cbe4
  402d60:	00402795 	.word	0x00402795
  402d64:	2040c34c 	.word	0x2040c34c
  402d68:	2040c350 	.word	0x2040c350
  402d6c:	2040c344 	.word	0x2040c344
  402d70:	2040c354 	.word	0x2040c354
  402d74:	0040cc08 	.word	0x0040cc08
  402d78:	0040cc1c 	.word	0x0040cc1c
  402d7c:	00402831 	.word	0x00402831
  402d80:	0040cc38 	.word	0x0040cc38
  402d84:	0040cc5c 	.word	0x0040cc5c
  402d88:	0040cb20 	.word	0x0040cb20
  402d8c:	0040cc7c 	.word	0x0040cc7c
  402d90:	00403a81 	.word	0x00403a81
  402d94:	00403a8d 	.word	0x00403a8d
  402d98:	0040cb4c 	.word	0x0040cb4c
  402d9c:	2040c343 	.word	0x2040c343
  402da0:	0040cb18 	.word	0x0040cb18
			}
		}
	}

	return ret;
}
  402da4:	2000      	movs	r0, #0
  402da6:	b007      	add	sp, #28
  402da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00402dac <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  402dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402db0:	b083      	sub	sp, #12
  402db2:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  402db4:	2a00      	cmp	r2, #0
  402db6:	bf18      	it	ne
  402db8:	2900      	cmpne	r1, #0
  402dba:	d003      	beq.n	402dc4 <hif_receive+0x18>
  402dbc:	4605      	mov	r5, r0
  402dbe:	460f      	mov	r7, r1
  402dc0:	4616      	mov	r6, r2
  402dc2:	b9b8      	cbnz	r0, 402df4 <hif_receive+0x48>
	{
		if(isDone)
  402dc4:	b14c      	cbz	r4, 402dda <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  402dc6:	2201      	movs	r2, #1
  402dc8:	4b32      	ldr	r3, [pc, #200]	; (402e94 <hif_receive+0xe8>)
  402dca:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  402dcc:	4b32      	ldr	r3, [pc, #200]	; (402e98 <hif_receive+0xec>)
  402dce:	4798      	blx	r3
  402dd0:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  402dd2:	4618      	mov	r0, r3
  402dd4:	b003      	add	sp, #12
  402dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  402dda:	f240 2269 	movw	r2, #617	; 0x269
  402dde:	492f      	ldr	r1, [pc, #188]	; (402e9c <hif_receive+0xf0>)
  402de0:	482f      	ldr	r0, [pc, #188]	; (402ea0 <hif_receive+0xf4>)
  402de2:	4c30      	ldr	r4, [pc, #192]	; (402ea4 <hif_receive+0xf8>)
  402de4:	47a0      	blx	r4
  402de6:	4830      	ldr	r0, [pc, #192]	; (402ea8 <hif_receive+0xfc>)
  402de8:	47a0      	blx	r4
  402dea:	4830      	ldr	r0, [pc, #192]	; (402eac <hif_receive+0x100>)
  402dec:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402dee:	f06f 030b 	mvn.w	r3, #11
  402df2:	e7ee      	b.n	402dd2 <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402df4:	4669      	mov	r1, sp
  402df6:	f241 0070 	movw	r0, #4208	; 0x1070
  402dfa:	4b2d      	ldr	r3, [pc, #180]	; (402eb0 <hif_receive+0x104>)
  402dfc:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402dfe:	4603      	mov	r3, r0
  402e00:	2800      	cmp	r0, #0
  402e02:	d1e6      	bne.n	402dd2 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402e04:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  402e08:	a901      	add	r1, sp, #4
  402e0a:	f241 0084 	movw	r0, #4228	; 0x1084
  402e0e:	4b28      	ldr	r3, [pc, #160]	; (402eb0 <hif_receive+0x104>)
  402e10:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402e12:	4603      	mov	r3, r0
  402e14:	2800      	cmp	r0, #0
  402e16:	d1dc      	bne.n	402dd2 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402e18:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  402e1c:	4546      	cmp	r6, r8
  402e1e:	d81c      	bhi.n	402e5a <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  402e20:	9b01      	ldr	r3, [sp, #4]
  402e22:	429d      	cmp	r5, r3
  402e24:	d328      	bcc.n	402e78 <hif_receive+0xcc>
  402e26:	eb05 0906 	add.w	r9, r5, r6
  402e2a:	4443      	add	r3, r8
  402e2c:	4599      	cmp	r9, r3
  402e2e:	d823      	bhi.n	402e78 <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  402e30:	4632      	mov	r2, r6
  402e32:	4639      	mov	r1, r7
  402e34:	4628      	mov	r0, r5
  402e36:	4b1f      	ldr	r3, [pc, #124]	; (402eb4 <hif_receive+0x108>)
  402e38:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402e3a:	4603      	mov	r3, r0
  402e3c:	2800      	cmp	r0, #0
  402e3e:	d1c8      	bne.n	402dd2 <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  402e40:	9a01      	ldr	r2, [sp, #4]
  402e42:	4490      	add	r8, r2
  402e44:	45c8      	cmp	r8, r9
  402e46:	d001      	beq.n	402e4c <hif_receive+0xa0>
  402e48:	2c00      	cmp	r4, #0
  402e4a:	d0c2      	beq.n	402dd2 <hif_receive+0x26>
		gu8HifSizeDone = 1;
  402e4c:	2201      	movs	r2, #1
  402e4e:	4b11      	ldr	r3, [pc, #68]	; (402e94 <hif_receive+0xe8>)
  402e50:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  402e52:	4b11      	ldr	r3, [pc, #68]	; (402e98 <hif_receive+0xec>)
  402e54:	4798      	blx	r3
  402e56:	4603      	mov	r3, r0
  402e58:	e7bb      	b.n	402dd2 <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  402e5a:	f240 227a 	movw	r2, #634	; 0x27a
  402e5e:	490f      	ldr	r1, [pc, #60]	; (402e9c <hif_receive+0xf0>)
  402e60:	480f      	ldr	r0, [pc, #60]	; (402ea0 <hif_receive+0xf4>)
  402e62:	4c10      	ldr	r4, [pc, #64]	; (402ea4 <hif_receive+0xf8>)
  402e64:	47a0      	blx	r4
  402e66:	4642      	mov	r2, r8
  402e68:	4631      	mov	r1, r6
  402e6a:	4813      	ldr	r0, [pc, #76]	; (402eb8 <hif_receive+0x10c>)
  402e6c:	47a0      	blx	r4
  402e6e:	480f      	ldr	r0, [pc, #60]	; (402eac <hif_receive+0x100>)
  402e70:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402e72:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  402e76:	e7ac      	b.n	402dd2 <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  402e78:	f44f 7220 	mov.w	r2, #640	; 0x280
  402e7c:	4907      	ldr	r1, [pc, #28]	; (402e9c <hif_receive+0xf0>)
  402e7e:	4808      	ldr	r0, [pc, #32]	; (402ea0 <hif_receive+0xf4>)
  402e80:	4c08      	ldr	r4, [pc, #32]	; (402ea4 <hif_receive+0xf8>)
  402e82:	47a0      	blx	r4
  402e84:	480d      	ldr	r0, [pc, #52]	; (402ebc <hif_receive+0x110>)
  402e86:	47a0      	blx	r4
  402e88:	4808      	ldr	r0, [pc, #32]	; (402eac <hif_receive+0x100>)
  402e8a:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402e8c:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  402e90:	e79f      	b.n	402dd2 <hif_receive+0x26>
  402e92:	bf00      	nop
  402e94:	2040c342 	.word	0x2040c342
  402e98:	00402795 	.word	0x00402795
  402e9c:	0040cb30 	.word	0x0040cb30
  402ea0:	0040cadc 	.word	0x0040cadc
  402ea4:	00406611 	.word	0x00406611
  402ea8:	0040ccac 	.word	0x0040ccac
  402eac:	0040cb08 	.word	0x0040cb08
  402eb0:	00403a81 	.word	0x00403a81
  402eb4:	00403a99 	.word	0x00403a99
  402eb8:	0040cccc 	.word	0x0040cccc
  402ebc:	0040cd10 	.word	0x0040cd10

00402ec0 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  402ec0:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  402ec2:	1e43      	subs	r3, r0, #1
  402ec4:	2b06      	cmp	r3, #6
  402ec6:	d81d      	bhi.n	402f04 <hif_register_cb+0x44>
  402ec8:	e8df f003 	tbb	[pc, r3]
  402ecc:	0c100408 	.word	0x0c100408
  402ed0:	141c      	.short	0x141c
  402ed2:	18          	.byte	0x18
  402ed3:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  402ed4:	4b13      	ldr	r3, [pc, #76]	; (402f24 <hif_register_cb+0x64>)
  402ed6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402ed8:	2000      	movs	r0, #0
			break;
  402eda:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  402edc:	4b12      	ldr	r3, [pc, #72]	; (402f28 <hif_register_cb+0x68>)
  402ede:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402ee0:	2000      	movs	r0, #0
			break;
  402ee2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  402ee4:	4b11      	ldr	r3, [pc, #68]	; (402f2c <hif_register_cb+0x6c>)
  402ee6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402ee8:	2000      	movs	r0, #0
			break;
  402eea:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  402eec:	4b10      	ldr	r3, [pc, #64]	; (402f30 <hif_register_cb+0x70>)
  402eee:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402ef0:	2000      	movs	r0, #0
			break;
  402ef2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  402ef4:	4b0f      	ldr	r3, [pc, #60]	; (402f34 <hif_register_cb+0x74>)
  402ef6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402ef8:	2000      	movs	r0, #0
			break;
  402efa:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  402efc:	4b0e      	ldr	r3, [pc, #56]	; (402f38 <hif_register_cb+0x78>)
  402efe:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402f00:	2000      	movs	r0, #0
			break;
  402f02:	bd38      	pop	{r3, r4, r5, pc}
  402f04:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  402f06:	f240 22b9 	movw	r2, #697	; 0x2b9
  402f0a:	490c      	ldr	r1, [pc, #48]	; (402f3c <hif_register_cb+0x7c>)
  402f0c:	480c      	ldr	r0, [pc, #48]	; (402f40 <hif_register_cb+0x80>)
  402f0e:	4d0d      	ldr	r5, [pc, #52]	; (402f44 <hif_register_cb+0x84>)
  402f10:	47a8      	blx	r5
  402f12:	4621      	mov	r1, r4
  402f14:	480c      	ldr	r0, [pc, #48]	; (402f48 <hif_register_cb+0x88>)
  402f16:	47a8      	blx	r5
  402f18:	480c      	ldr	r0, [pc, #48]	; (402f4c <hif_register_cb+0x8c>)
  402f1a:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  402f1c:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  402f20:	bd38      	pop	{r3, r4, r5, pc}
  402f22:	bf00      	nop
  402f24:	2040c34c 	.word	0x2040c34c
  402f28:	2040c358 	.word	0x2040c358
  402f2c:	2040c350 	.word	0x2040c350
  402f30:	2040c348 	.word	0x2040c348
  402f34:	2040c344 	.word	0x2040c344
  402f38:	2040c354 	.word	0x2040c354
  402f3c:	0040cb3c 	.word	0x0040cb3c
  402f40:	0040cadc 	.word	0x0040cadc
  402f44:	00406611 	.word	0x00406611
  402f48:	0040cd54 	.word	0x0040cd54
  402f4c:	0040cb08 	.word	0x0040cb08

00402f50 <hif_init>:
{
  402f50:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  402f52:	2400      	movs	r4, #0
  402f54:	4b09      	ldr	r3, [pc, #36]	; (402f7c <hif_init+0x2c>)
  402f56:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  402f58:	4b09      	ldr	r3, [pc, #36]	; (402f80 <hif_init+0x30>)
  402f5a:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  402f5c:	4b09      	ldr	r3, [pc, #36]	; (402f84 <hif_init+0x34>)
  402f5e:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  402f60:	4b09      	ldr	r3, [pc, #36]	; (402f88 <hif_init+0x38>)
  402f62:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  402f64:	4b09      	ldr	r3, [pc, #36]	; (402f8c <hif_init+0x3c>)
  402f66:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  402f68:	4809      	ldr	r0, [pc, #36]	; (402f90 <hif_init+0x40>)
  402f6a:	4b0a      	ldr	r3, [pc, #40]	; (402f94 <hif_init+0x44>)
  402f6c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  402f6e:	490a      	ldr	r1, [pc, #40]	; (402f98 <hif_init+0x48>)
  402f70:	2003      	movs	r0, #3
  402f72:	4b0a      	ldr	r3, [pc, #40]	; (402f9c <hif_init+0x4c>)
  402f74:	4798      	blx	r3
}
  402f76:	4620      	mov	r0, r4
  402f78:	bd10      	pop	{r4, pc}
  402f7a:	bf00      	nop
  402f7c:	2040c358 	.word	0x2040c358
  402f80:	2040c34c 	.word	0x2040c34c
  402f84:	2040c341 	.word	0x2040c341
  402f88:	2040c340 	.word	0x2040c340
  402f8c:	2040c343 	.word	0x2040c343
  402f90:	00402781 	.word	0x00402781
  402f94:	0040246d 	.word	0x0040246d
  402f98:	00402791 	.word	0x00402791
  402f9c:	00402ec1 	.word	0x00402ec1

00402fa0 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402fa0:	b530      	push	{r4, r5, lr}
  402fa2:	b09f      	sub	sp, #124	; 0x7c
  402fa4:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  402fa6:	282c      	cmp	r0, #44	; 0x2c
  402fa8:	d02e      	beq.n	403008 <m2m_wifi_cb+0x68>
  402faa:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  402fac:	281b      	cmp	r0, #27
  402fae:	d03b      	beq.n	403028 <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  402fb0:	2806      	cmp	r0, #6
  402fb2:	d049      	beq.n	403048 <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  402fb4:	280e      	cmp	r0, #14
  402fb6:	d025      	beq.n	403004 <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  402fb8:	2832      	cmp	r0, #50	; 0x32
  402fba:	d055      	beq.n	403068 <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  402fbc:	282f      	cmp	r0, #47	; 0x2f
  402fbe:	d063      	beq.n	403088 <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  402fc0:	2834      	cmp	r0, #52	; 0x34
  402fc2:	d076      	beq.n	4030b2 <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  402fc4:	2811      	cmp	r0, #17
  402fc6:	f000 8093 	beq.w	4030f0 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  402fca:	2813      	cmp	r0, #19
  402fcc:	f000 80a8 	beq.w	403120 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  402fd0:	2804      	cmp	r0, #4
  402fd2:	f000 80b7 	beq.w	403144 <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  402fd6:	2865      	cmp	r0, #101	; 0x65
  402fd8:	f000 80c6 	beq.w	403168 <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  402fdc:	2809      	cmp	r0, #9
  402fde:	f000 80d5 	beq.w	40318c <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  402fe2:	282a      	cmp	r0, #42	; 0x2a
  402fe4:	f000 80e4 	beq.w	4031b0 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  402fe8:	2820      	cmp	r0, #32
  402fea:	f000 80f3 	beq.w	4031d4 <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  402fee:	f44f 7295 	mov.w	r2, #298	; 0x12a
  402ff2:	4986      	ldr	r1, [pc, #536]	; (40320c <m2m_wifi_cb+0x26c>)
  402ff4:	4886      	ldr	r0, [pc, #536]	; (403210 <m2m_wifi_cb+0x270>)
  402ff6:	4d87      	ldr	r5, [pc, #540]	; (403214 <m2m_wifi_cb+0x274>)
  402ff8:	47a8      	blx	r5
  402ffa:	4621      	mov	r1, r4
  402ffc:	4886      	ldr	r0, [pc, #536]	; (403218 <m2m_wifi_cb+0x278>)
  402ffe:	47a8      	blx	r5
  403000:	4886      	ldr	r0, [pc, #536]	; (40321c <m2m_wifi_cb+0x27c>)
  403002:	47a8      	blx	r5
	}
}
  403004:	b01f      	add	sp, #124	; 0x7c
  403006:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  403008:	2300      	movs	r3, #0
  40300a:	2204      	movs	r2, #4
  40300c:	a903      	add	r1, sp, #12
  40300e:	4628      	mov	r0, r5
  403010:	4c83      	ldr	r4, [pc, #524]	; (403220 <m2m_wifi_cb+0x280>)
  403012:	47a0      	blx	r4
  403014:	2800      	cmp	r0, #0
  403016:	d1f5      	bne.n	403004 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403018:	4b82      	ldr	r3, [pc, #520]	; (403224 <m2m_wifi_cb+0x284>)
  40301a:	681b      	ldr	r3, [r3, #0]
  40301c:	2b00      	cmp	r3, #0
  40301e:	d0f1      	beq.n	403004 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  403020:	a903      	add	r1, sp, #12
  403022:	202c      	movs	r0, #44	; 0x2c
  403024:	4798      	blx	r3
  403026:	e7ed      	b.n	403004 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  403028:	2300      	movs	r3, #0
  40302a:	2208      	movs	r2, #8
  40302c:	a903      	add	r1, sp, #12
  40302e:	4628      	mov	r0, r5
  403030:	4c7b      	ldr	r4, [pc, #492]	; (403220 <m2m_wifi_cb+0x280>)
  403032:	47a0      	blx	r4
  403034:	2800      	cmp	r0, #0
  403036:	d1e5      	bne.n	403004 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403038:	4b7a      	ldr	r3, [pc, #488]	; (403224 <m2m_wifi_cb+0x284>)
  40303a:	681b      	ldr	r3, [r3, #0]
  40303c:	2b00      	cmp	r3, #0
  40303e:	d0e1      	beq.n	403004 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  403040:	a903      	add	r1, sp, #12
  403042:	201b      	movs	r0, #27
  403044:	4798      	blx	r3
  403046:	e7dd      	b.n	403004 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  403048:	2301      	movs	r3, #1
  40304a:	2230      	movs	r2, #48	; 0x30
  40304c:	a903      	add	r1, sp, #12
  40304e:	4628      	mov	r0, r5
  403050:	4c73      	ldr	r4, [pc, #460]	; (403220 <m2m_wifi_cb+0x280>)
  403052:	47a0      	blx	r4
  403054:	2800      	cmp	r0, #0
  403056:	d1d5      	bne.n	403004 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  403058:	4b72      	ldr	r3, [pc, #456]	; (403224 <m2m_wifi_cb+0x284>)
  40305a:	681b      	ldr	r3, [r3, #0]
  40305c:	2b00      	cmp	r3, #0
  40305e:	d0d1      	beq.n	403004 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  403060:	a903      	add	r1, sp, #12
  403062:	2006      	movs	r0, #6
  403064:	4798      	blx	r3
  403066:	e7cd      	b.n	403004 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  403068:	2300      	movs	r3, #0
  40306a:	2210      	movs	r2, #16
  40306c:	a903      	add	r1, sp, #12
  40306e:	4628      	mov	r0, r5
  403070:	4c6b      	ldr	r4, [pc, #428]	; (403220 <m2m_wifi_cb+0x280>)
  403072:	47a0      	blx	r4
  403074:	2800      	cmp	r0, #0
  403076:	d1c5      	bne.n	403004 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403078:	4b6a      	ldr	r3, [pc, #424]	; (403224 <m2m_wifi_cb+0x284>)
  40307a:	681b      	ldr	r3, [r3, #0]
  40307c:	2b00      	cmp	r3, #0
  40307e:	d0c1      	beq.n	403004 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  403080:	a903      	add	r1, sp, #12
  403082:	2032      	movs	r0, #50	; 0x32
  403084:	4798      	blx	r3
  403086:	e7bd      	b.n	403004 <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  403088:	2264      	movs	r2, #100	; 0x64
  40308a:	2100      	movs	r1, #0
  40308c:	a803      	add	r0, sp, #12
  40308e:	4b66      	ldr	r3, [pc, #408]	; (403228 <m2m_wifi_cb+0x288>)
  403090:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  403092:	2300      	movs	r3, #0
  403094:	2264      	movs	r2, #100	; 0x64
  403096:	a903      	add	r1, sp, #12
  403098:	4628      	mov	r0, r5
  40309a:	4c61      	ldr	r4, [pc, #388]	; (403220 <m2m_wifi_cb+0x280>)
  40309c:	47a0      	blx	r4
  40309e:	2800      	cmp	r0, #0
  4030a0:	d1b0      	bne.n	403004 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  4030a2:	4b60      	ldr	r3, [pc, #384]	; (403224 <m2m_wifi_cb+0x284>)
  4030a4:	681b      	ldr	r3, [r3, #0]
  4030a6:	2b00      	cmp	r3, #0
  4030a8:	d0ac      	beq.n	403004 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  4030aa:	a903      	add	r1, sp, #12
  4030ac:	202f      	movs	r0, #47	; 0x2f
  4030ae:	4798      	blx	r3
  4030b0:	e7a8      	b.n	403004 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  4030b2:	2300      	movs	r3, #0
  4030b4:	2204      	movs	r2, #4
  4030b6:	a903      	add	r1, sp, #12
  4030b8:	4628      	mov	r0, r5
  4030ba:	4c59      	ldr	r4, [pc, #356]	; (403220 <m2m_wifi_cb+0x280>)
  4030bc:	47a0      	blx	r4
  4030be:	2800      	cmp	r0, #0
  4030c0:	d1a0      	bne.n	403004 <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  4030c2:	485a      	ldr	r0, [pc, #360]	; (40322c <m2m_wifi_cb+0x28c>)
  4030c4:	4c53      	ldr	r4, [pc, #332]	; (403214 <m2m_wifi_cb+0x274>)
  4030c6:	47a0      	blx	r4
  4030c8:	9903      	ldr	r1, [sp, #12]
  4030ca:	b2cb      	uxtb	r3, r1
  4030cc:	9300      	str	r3, [sp, #0]
  4030ce:	f3c1 2307 	ubfx	r3, r1, #8, #8
  4030d2:	f3c1 4207 	ubfx	r2, r1, #16, #8
  4030d6:	0e09      	lsrs	r1, r1, #24
  4030d8:	4855      	ldr	r0, [pc, #340]	; (403230 <m2m_wifi_cb+0x290>)
  4030da:	47a0      	blx	r4
  4030dc:	484f      	ldr	r0, [pc, #316]	; (40321c <m2m_wifi_cb+0x27c>)
  4030de:	47a0      	blx	r4
			if (gpfAppWifiCb)
  4030e0:	4b50      	ldr	r3, [pc, #320]	; (403224 <m2m_wifi_cb+0x284>)
  4030e2:	681b      	ldr	r3, [r3, #0]
  4030e4:	2b00      	cmp	r3, #0
  4030e6:	d08d      	beq.n	403004 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  4030e8:	2100      	movs	r1, #0
  4030ea:	2034      	movs	r0, #52	; 0x34
  4030ec:	4798      	blx	r3
  4030ee:	e789      	b.n	403004 <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  4030f0:	2300      	movs	r3, #0
  4030f2:	4a50      	ldr	r2, [pc, #320]	; (403234 <m2m_wifi_cb+0x294>)
  4030f4:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  4030f6:	2204      	movs	r2, #4
  4030f8:	a903      	add	r1, sp, #12
  4030fa:	4628      	mov	r0, r5
  4030fc:	4c48      	ldr	r4, [pc, #288]	; (403220 <m2m_wifi_cb+0x280>)
  4030fe:	47a0      	blx	r4
  403100:	2800      	cmp	r0, #0
  403102:	f47f af7f 	bne.w	403004 <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  403106:	f89d 200c 	ldrb.w	r2, [sp, #12]
  40310a:	4b4b      	ldr	r3, [pc, #300]	; (403238 <m2m_wifi_cb+0x298>)
  40310c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  40310e:	4b45      	ldr	r3, [pc, #276]	; (403224 <m2m_wifi_cb+0x284>)
  403110:	681b      	ldr	r3, [r3, #0]
  403112:	2b00      	cmp	r3, #0
  403114:	f43f af76 	beq.w	403004 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  403118:	a903      	add	r1, sp, #12
  40311a:	2011      	movs	r0, #17
  40311c:	4798      	blx	r3
  40311e:	e771      	b.n	403004 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  403120:	2300      	movs	r3, #0
  403122:	222c      	movs	r2, #44	; 0x2c
  403124:	a903      	add	r1, sp, #12
  403126:	4628      	mov	r0, r5
  403128:	4c3d      	ldr	r4, [pc, #244]	; (403220 <m2m_wifi_cb+0x280>)
  40312a:	47a0      	blx	r4
  40312c:	2800      	cmp	r0, #0
  40312e:	f47f af69 	bne.w	403004 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403132:	4b3c      	ldr	r3, [pc, #240]	; (403224 <m2m_wifi_cb+0x284>)
  403134:	681b      	ldr	r3, [r3, #0]
  403136:	2b00      	cmp	r3, #0
  403138:	f43f af64 	beq.w	403004 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  40313c:	a903      	add	r1, sp, #12
  40313e:	2013      	movs	r0, #19
  403140:	4798      	blx	r3
  403142:	e75f      	b.n	403004 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  403144:	2300      	movs	r3, #0
  403146:	2204      	movs	r2, #4
  403148:	a91c      	add	r1, sp, #112	; 0x70
  40314a:	4628      	mov	r0, r5
  40314c:	4c34      	ldr	r4, [pc, #208]	; (403220 <m2m_wifi_cb+0x280>)
  40314e:	47a0      	blx	r4
  403150:	2800      	cmp	r0, #0
  403152:	f47f af57 	bne.w	403004 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403156:	4b33      	ldr	r3, [pc, #204]	; (403224 <m2m_wifi_cb+0x284>)
  403158:	681b      	ldr	r3, [r3, #0]
  40315a:	2b00      	cmp	r3, #0
  40315c:	f43f af52 	beq.w	403004 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  403160:	a91c      	add	r1, sp, #112	; 0x70
  403162:	2004      	movs	r0, #4
  403164:	4798      	blx	r3
  403166:	e74d      	b.n	403004 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  403168:	2300      	movs	r3, #0
  40316a:	2204      	movs	r2, #4
  40316c:	a91c      	add	r1, sp, #112	; 0x70
  40316e:	4628      	mov	r0, r5
  403170:	4c2b      	ldr	r4, [pc, #172]	; (403220 <m2m_wifi_cb+0x280>)
  403172:	47a0      	blx	r4
  403174:	2800      	cmp	r0, #0
  403176:	f47f af45 	bne.w	403004 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  40317a:	4b2a      	ldr	r3, [pc, #168]	; (403224 <m2m_wifi_cb+0x284>)
  40317c:	681b      	ldr	r3, [r3, #0]
  40317e:	2b00      	cmp	r3, #0
  403180:	f43f af40 	beq.w	403004 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  403184:	a91c      	add	r1, sp, #112	; 0x70
  403186:	2065      	movs	r0, #101	; 0x65
  403188:	4798      	blx	r3
  40318a:	e73b      	b.n	403004 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  40318c:	2301      	movs	r3, #1
  40318e:	2264      	movs	r2, #100	; 0x64
  403190:	a903      	add	r1, sp, #12
  403192:	4628      	mov	r0, r5
  403194:	4c22      	ldr	r4, [pc, #136]	; (403220 <m2m_wifi_cb+0x280>)
  403196:	47a0      	blx	r4
  403198:	2800      	cmp	r0, #0
  40319a:	f47f af33 	bne.w	403004 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  40319e:	4b21      	ldr	r3, [pc, #132]	; (403224 <m2m_wifi_cb+0x284>)
  4031a0:	681b      	ldr	r3, [r3, #0]
  4031a2:	2b00      	cmp	r3, #0
  4031a4:	f43f af2e 	beq.w	403004 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  4031a8:	a903      	add	r1, sp, #12
  4031aa:	2009      	movs	r0, #9
  4031ac:	4798      	blx	r3
  4031ae:	e729      	b.n	403004 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  4031b0:	2301      	movs	r3, #1
  4031b2:	2204      	movs	r2, #4
  4031b4:	a903      	add	r1, sp, #12
  4031b6:	4628      	mov	r0, r5
  4031b8:	4c19      	ldr	r4, [pc, #100]	; (403220 <m2m_wifi_cb+0x280>)
  4031ba:	47a0      	blx	r4
  4031bc:	2800      	cmp	r0, #0
  4031be:	f47f af21 	bne.w	403004 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  4031c2:	4b18      	ldr	r3, [pc, #96]	; (403224 <m2m_wifi_cb+0x284>)
  4031c4:	681b      	ldr	r3, [r3, #0]
  4031c6:	2b00      	cmp	r3, #0
  4031c8:	f43f af1c 	beq.w	403004 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  4031cc:	a903      	add	r1, sp, #12
  4031ce:	202a      	movs	r0, #42	; 0x2a
  4031d0:	4798      	blx	r3
  4031d2:	e717      	b.n	403004 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  4031d4:	2300      	movs	r3, #0
  4031d6:	2208      	movs	r2, #8
  4031d8:	a903      	add	r1, sp, #12
  4031da:	4628      	mov	r0, r5
  4031dc:	4c10      	ldr	r4, [pc, #64]	; (403220 <m2m_wifi_cb+0x280>)
  4031de:	47a0      	blx	r4
  4031e0:	2800      	cmp	r0, #0
  4031e2:	f47f af0f 	bne.w	403004 <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  4031e6:	2301      	movs	r3, #1
  4031e8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  4031ec:	9903      	ldr	r1, [sp, #12]
  4031ee:	f105 0008 	add.w	r0, r5, #8
  4031f2:	47a0      	blx	r4
  4031f4:	2800      	cmp	r0, #0
  4031f6:	f47f af05 	bne.w	403004 <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  4031fa:	4b0a      	ldr	r3, [pc, #40]	; (403224 <m2m_wifi_cb+0x284>)
  4031fc:	681b      	ldr	r3, [r3, #0]
  4031fe:	2b00      	cmp	r3, #0
  403200:	f43f af00 	beq.w	403004 <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  403204:	a903      	add	r1, sp, #12
  403206:	2020      	movs	r0, #32
  403208:	4798      	blx	r3
  40320a:	e6fb      	b.n	403004 <m2m_wifi_cb+0x64>
  40320c:	0040cd80 	.word	0x0040cd80
  403210:	0040cadc 	.word	0x0040cadc
  403214:	00406611 	.word	0x00406611
  403218:	0040cddc 	.word	0x0040cddc
  40321c:	0040cb08 	.word	0x0040cb08
  403220:	00402dad 	.word	0x00402dad
  403224:	2040c35c 	.word	0x2040c35c
  403228:	00402759 	.word	0x00402759
  40322c:	0040cdb0 	.word	0x0040cdb0
  403230:	0040cdbc 	.word	0x0040cdbc
  403234:	2040c361 	.word	0x2040c361
  403238:	2040c360 	.word	0x2040c360

0040323c <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  40323c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40323e:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  403240:	2301      	movs	r3, #1
  403242:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  403246:	2800      	cmp	r0, #0
  403248:	d050      	beq.n	4032ec <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  40324a:	6802      	ldr	r2, [r0, #0]
  40324c:	4b29      	ldr	r3, [pc, #164]	; (4032f4 <m2m_wifi_init+0xb8>)
  40324e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  403250:	2200      	movs	r2, #0
  403252:	4b29      	ldr	r3, [pc, #164]	; (4032f8 <m2m_wifi_init+0xbc>)
  403254:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  403256:	f10d 0007 	add.w	r0, sp, #7
  40325a:	4b28      	ldr	r3, [pc, #160]	; (4032fc <m2m_wifi_init+0xc0>)
  40325c:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  40325e:	4604      	mov	r4, r0
  403260:	b110      	cbz	r0, 403268 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  403262:	4620      	mov	r0, r4
  403264:	b00b      	add	sp, #44	; 0x2c
  403266:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  403268:	4b25      	ldr	r3, [pc, #148]	; (403300 <m2m_wifi_init+0xc4>)
  40326a:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  40326c:	4604      	mov	r4, r0
  40326e:	2800      	cmp	r0, #0
  403270:	d138      	bne.n	4032e4 <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  403272:	4924      	ldr	r1, [pc, #144]	; (403304 <m2m_wifi_init+0xc8>)
  403274:	2001      	movs	r0, #1
  403276:	4b24      	ldr	r3, [pc, #144]	; (403308 <m2m_wifi_init+0xcc>)
  403278:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  40327a:	a802      	add	r0, sp, #8
  40327c:	4b23      	ldr	r3, [pc, #140]	; (40330c <m2m_wifi_init+0xd0>)
  40327e:	4798      	blx	r3
  403280:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  403282:	4f23      	ldr	r7, [pc, #140]	; (403310 <m2m_wifi_init+0xd4>)
  403284:	4638      	mov	r0, r7
  403286:	4d23      	ldr	r5, [pc, #140]	; (403314 <m2m_wifi_init+0xd8>)
  403288:	47a8      	blx	r5
  40328a:	f89d 300e 	ldrb.w	r3, [sp, #14]
  40328e:	f89d 200d 	ldrb.w	r2, [sp, #13]
  403292:	f89d 100c 	ldrb.w	r1, [sp, #12]
  403296:	4820      	ldr	r0, [pc, #128]	; (403318 <m2m_wifi_init+0xdc>)
  403298:	47a8      	blx	r5
  40329a:	4e20      	ldr	r6, [pc, #128]	; (40331c <m2m_wifi_init+0xe0>)
  40329c:	4630      	mov	r0, r6
  40329e:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  4032a0:	4638      	mov	r0, r7
  4032a2:	47a8      	blx	r5
  4032a4:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4032a8:	f89d 2010 	ldrb.w	r2, [sp, #16]
  4032ac:	f89d 100f 	ldrb.w	r1, [sp, #15]
  4032b0:	481b      	ldr	r0, [pc, #108]	; (403320 <m2m_wifi_init+0xe4>)
  4032b2:	47a8      	blx	r5
  4032b4:	4630      	mov	r0, r6
  4032b6:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  4032b8:	4638      	mov	r0, r7
  4032ba:	47a8      	blx	r5
  4032bc:	2300      	movs	r3, #0
  4032be:	2203      	movs	r2, #3
  4032c0:	2113      	movs	r1, #19
  4032c2:	4818      	ldr	r0, [pc, #96]	; (403324 <m2m_wifi_init+0xe8>)
  4032c4:	47a8      	blx	r5
  4032c6:	4630      	mov	r0, r6
  4032c8:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  4032ca:	f114 0f0d 	cmn.w	r4, #13
  4032ce:	d1c8      	bne.n	403262 <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  4032d0:	f240 12d5 	movw	r2, #469	; 0x1d5
  4032d4:	4914      	ldr	r1, [pc, #80]	; (403328 <m2m_wifi_init+0xec>)
  4032d6:	4815      	ldr	r0, [pc, #84]	; (40332c <m2m_wifi_init+0xf0>)
  4032d8:	47a8      	blx	r5
  4032da:	4815      	ldr	r0, [pc, #84]	; (403330 <m2m_wifi_init+0xf4>)
  4032dc:	47a8      	blx	r5
  4032de:	4630      	mov	r0, r6
  4032e0:	47a8      	blx	r5
  4032e2:	e7be      	b.n	403262 <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  4032e4:	2000      	movs	r0, #0
  4032e6:	4b13      	ldr	r3, [pc, #76]	; (403334 <m2m_wifi_init+0xf8>)
  4032e8:	4798      	blx	r3
  4032ea:	e7ba      	b.n	403262 <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  4032ec:	f06f 040b 	mvn.w	r4, #11
  4032f0:	e7b7      	b.n	403262 <m2m_wifi_init+0x26>
  4032f2:	bf00      	nop
  4032f4:	2040c35c 	.word	0x2040c35c
  4032f8:	2040c361 	.word	0x2040c361
  4032fc:	00403c01 	.word	0x00403c01
  403300:	00402f51 	.word	0x00402f51
  403304:	00402fa1 	.word	0x00402fa1
  403308:	00402ec1 	.word	0x00402ec1
  40330c:	00403b51 	.word	0x00403b51
  403310:	0040cdb0 	.word	0x0040cdb0
  403314:	00406611 	.word	0x00406611
  403318:	0040ce9c 	.word	0x0040ce9c
  40331c:	0040cb08 	.word	0x0040cb08
  403320:	0040ceb8 	.word	0x0040ceb8
  403324:	0040ced4 	.word	0x0040ced4
  403328:	0040cd8c 	.word	0x0040cd8c
  40332c:	0040cadc 	.word	0x0040cadc
  403330:	0040cef0 	.word	0x0040cef0
  403334:	00403ccd 	.word	0x00403ccd

00403338 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  403338:	b508      	push	{r3, lr}
	return hif_handle_isr();
  40333a:	4b01      	ldr	r3, [pc, #4]	; (403340 <m2m_wifi_handle_events+0x8>)
  40333c:	4798      	blx	r3
}
  40333e:	bd08      	pop	{r3, pc}
  403340:	00402a9d 	.word	0x00402a9d

00403344 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  403344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403348:	b0a0      	sub	sp, #128	; 0x80
  40334a:	4680      	mov	r8, r0
  40334c:	460d      	mov	r5, r1
  40334e:	4614      	mov	r4, r2
  403350:	461e      	mov	r6, r3
  403352:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  403356:	2a01      	cmp	r2, #1
  403358:	d003      	beq.n	403362 <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  40335a:	2b00      	cmp	r3, #0
  40335c:	d037      	beq.n	4033ce <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  40335e:	2a02      	cmp	r2, #2
  403360:	d042      	beq.n	4033e8 <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  403362:	1e6b      	subs	r3, r5, #1
  403364:	b2db      	uxtb	r3, r3
  403366:	2b1f      	cmp	r3, #31
  403368:	d875      	bhi.n	403456 <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  40336a:	2fff      	cmp	r7, #255	; 0xff
  40336c:	d001      	beq.n	403372 <m2m_wifi_connect_sc+0x2e>
  40336e:	2f0d      	cmp	r7, #13
  403370:	d87e      	bhi.n	403470 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  403372:	462a      	mov	r2, r5
  403374:	4641      	mov	r1, r8
  403376:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  40337a:	4b77      	ldr	r3, [pc, #476]	; (403558 <m2m_wifi_connect_sc+0x214>)
  40337c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  40337e:	ab20      	add	r3, sp, #128	; 0x80
  403380:	441d      	add	r5, r3
  403382:	2300      	movs	r3, #0
  403384:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  403388:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  40338c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  403390:	3300      	adds	r3, #0
  403392:	bf18      	it	ne
  403394:	2301      	movne	r3, #1
  403396:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  40339a:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  40339e:	2c03      	cmp	r4, #3
  4033a0:	d073      	beq.n	40348a <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  4033a2:	2c02      	cmp	r4, #2
  4033a4:	f000 80aa 	beq.w	4034fc <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  4033a8:	2c04      	cmp	r4, #4
  4033aa:	f000 80c1 	beq.w	403530 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  4033ae:	2c01      	cmp	r4, #1
  4033b0:	f040 80c4 	bne.w	40353c <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  4033b4:	2300      	movs	r3, #0
  4033b6:	9302      	str	r3, [sp, #8]
  4033b8:	9301      	str	r3, [sp, #4]
  4033ba:	9300      	str	r3, [sp, #0]
  4033bc:	236c      	movs	r3, #108	; 0x6c
  4033be:	aa05      	add	r2, sp, #20
  4033c0:	2128      	movs	r1, #40	; 0x28
  4033c2:	2001      	movs	r0, #1
  4033c4:	4c65      	ldr	r4, [pc, #404]	; (40355c <m2m_wifi_connect_sc+0x218>)
  4033c6:	47a0      	blx	r4

ERR1:
	return ret;
}
  4033c8:	b020      	add	sp, #128	; 0x80
  4033ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  4033ce:	f240 2203 	movw	r2, #515	; 0x203
  4033d2:	4963      	ldr	r1, [pc, #396]	; (403560 <m2m_wifi_connect_sc+0x21c>)
  4033d4:	4863      	ldr	r0, [pc, #396]	; (403564 <m2m_wifi_connect_sc+0x220>)
  4033d6:	4c64      	ldr	r4, [pc, #400]	; (403568 <m2m_wifi_connect_sc+0x224>)
  4033d8:	47a0      	blx	r4
  4033da:	4864      	ldr	r0, [pc, #400]	; (40356c <m2m_wifi_connect_sc+0x228>)
  4033dc:	47a0      	blx	r4
  4033de:	4864      	ldr	r0, [pc, #400]	; (403570 <m2m_wifi_connect_sc+0x22c>)
  4033e0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4033e2:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4033e6:	e7ef      	b.n	4033c8 <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4033e8:	4618      	mov	r0, r3
  4033ea:	4b62      	ldr	r3, [pc, #392]	; (403574 <m2m_wifi_connect_sc+0x230>)
  4033ec:	4798      	blx	r3
  4033ee:	2840      	cmp	r0, #64	; 0x40
  4033f0:	d1b7      	bne.n	403362 <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  4033f2:	7833      	ldrb	r3, [r6, #0]
  4033f4:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4033f8:	b2d2      	uxtb	r2, r2
  4033fa:	2a06      	cmp	r2, #6
  4033fc:	d91e      	bls.n	40343c <m2m_wifi_connect_sc+0xf8>
  4033fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403402:	b2d2      	uxtb	r2, r2
  403404:	2a36      	cmp	r2, #54	; 0x36
  403406:	d819      	bhi.n	40343c <m2m_wifi_connect_sc+0xf8>
  403408:	3b47      	subs	r3, #71	; 0x47
  40340a:	b2db      	uxtb	r3, r3
  40340c:	2b19      	cmp	r3, #25
  40340e:	d915      	bls.n	40343c <m2m_wifi_connect_sc+0xf8>
  403410:	4631      	mov	r1, r6
  403412:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  403416:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40341a:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  40341e:	b2d2      	uxtb	r2, r2
  403420:	2a06      	cmp	r2, #6
  403422:	d90b      	bls.n	40343c <m2m_wifi_connect_sc+0xf8>
  403424:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  403428:	b2d2      	uxtb	r2, r2
  40342a:	2a36      	cmp	r2, #54	; 0x36
  40342c:	d806      	bhi.n	40343c <m2m_wifi_connect_sc+0xf8>
  40342e:	3b47      	subs	r3, #71	; 0x47
  403430:	b2db      	uxtb	r3, r3
  403432:	2b19      	cmp	r3, #25
  403434:	d902      	bls.n	40343c <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  403436:	4288      	cmp	r0, r1
  403438:	d1ed      	bne.n	403416 <m2m_wifi_connect_sc+0xd2>
  40343a:	e792      	b.n	403362 <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  40343c:	f240 220f 	movw	r2, #527	; 0x20f
  403440:	4947      	ldr	r1, [pc, #284]	; (403560 <m2m_wifi_connect_sc+0x21c>)
  403442:	4848      	ldr	r0, [pc, #288]	; (403564 <m2m_wifi_connect_sc+0x220>)
  403444:	4c48      	ldr	r4, [pc, #288]	; (403568 <m2m_wifi_connect_sc+0x224>)
  403446:	47a0      	blx	r4
  403448:	484b      	ldr	r0, [pc, #300]	; (403578 <m2m_wifi_connect_sc+0x234>)
  40344a:	47a0      	blx	r4
  40344c:	4848      	ldr	r0, [pc, #288]	; (403570 <m2m_wifi_connect_sc+0x22c>)
  40344e:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  403450:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  403454:	e7b8      	b.n	4033c8 <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  403456:	f240 2219 	movw	r2, #537	; 0x219
  40345a:	4941      	ldr	r1, [pc, #260]	; (403560 <m2m_wifi_connect_sc+0x21c>)
  40345c:	4841      	ldr	r0, [pc, #260]	; (403564 <m2m_wifi_connect_sc+0x220>)
  40345e:	4c42      	ldr	r4, [pc, #264]	; (403568 <m2m_wifi_connect_sc+0x224>)
  403460:	47a0      	blx	r4
  403462:	4846      	ldr	r0, [pc, #280]	; (40357c <m2m_wifi_connect_sc+0x238>)
  403464:	47a0      	blx	r4
  403466:	4842      	ldr	r0, [pc, #264]	; (403570 <m2m_wifi_connect_sc+0x22c>)
  403468:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  40346a:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40346e:	e7ab      	b.n	4033c8 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  403470:	f240 2222 	movw	r2, #546	; 0x222
  403474:	493a      	ldr	r1, [pc, #232]	; (403560 <m2m_wifi_connect_sc+0x21c>)
  403476:	483b      	ldr	r0, [pc, #236]	; (403564 <m2m_wifi_connect_sc+0x220>)
  403478:	4c3b      	ldr	r4, [pc, #236]	; (403568 <m2m_wifi_connect_sc+0x224>)
  40347a:	47a0      	blx	r4
  40347c:	4840      	ldr	r0, [pc, #256]	; (403580 <m2m_wifi_connect_sc+0x23c>)
  40347e:	47a0      	blx	r4
  403480:	483b      	ldr	r0, [pc, #236]	; (403570 <m2m_wifi_connect_sc+0x22c>)
  403482:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  403484:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403488:	e79e      	b.n	4033c8 <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  40348a:	7833      	ldrb	r3, [r6, #0]
  40348c:	3b01      	subs	r3, #1
  40348e:	b2db      	uxtb	r3, r3
  403490:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  403494:	2b03      	cmp	r3, #3
  403496:	d813      	bhi.n	4034c0 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  403498:	7872      	ldrb	r2, [r6, #1]
  40349a:	1e53      	subs	r3, r2, #1
  40349c:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  4034a0:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  4034a4:	2b0b      	cmp	r3, #11
  4034a6:	d11a      	bne.n	4034de <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  4034a8:	1cb1      	adds	r1, r6, #2
  4034aa:	f10d 0016 	add.w	r0, sp, #22
  4034ae:	4b2a      	ldr	r3, [pc, #168]	; (403558 <m2m_wifi_connect_sc+0x214>)
  4034b0:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  4034b2:	7873      	ldrb	r3, [r6, #1]
  4034b4:	aa20      	add	r2, sp, #128	; 0x80
  4034b6:	4413      	add	r3, r2
  4034b8:	2200      	movs	r2, #0
  4034ba:	f803 2c6a 	strb.w	r2, [r3, #-106]
  4034be:	e779      	b.n	4033b4 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  4034c0:	f240 2239 	movw	r2, #569	; 0x239
  4034c4:	4926      	ldr	r1, [pc, #152]	; (403560 <m2m_wifi_connect_sc+0x21c>)
  4034c6:	4827      	ldr	r0, [pc, #156]	; (403564 <m2m_wifi_connect_sc+0x220>)
  4034c8:	4c27      	ldr	r4, [pc, #156]	; (403568 <m2m_wifi_connect_sc+0x224>)
  4034ca:	47a0      	blx	r4
  4034cc:	f89d 1014 	ldrb.w	r1, [sp, #20]
  4034d0:	482c      	ldr	r0, [pc, #176]	; (403584 <m2m_wifi_connect_sc+0x240>)
  4034d2:	47a0      	blx	r4
  4034d4:	4826      	ldr	r0, [pc, #152]	; (403570 <m2m_wifi_connect_sc+0x22c>)
  4034d6:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4034d8:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4034dc:	e774      	b.n	4033c8 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  4034de:	f44f 7210 	mov.w	r2, #576	; 0x240
  4034e2:	491f      	ldr	r1, [pc, #124]	; (403560 <m2m_wifi_connect_sc+0x21c>)
  4034e4:	481f      	ldr	r0, [pc, #124]	; (403564 <m2m_wifi_connect_sc+0x220>)
  4034e6:	4c20      	ldr	r4, [pc, #128]	; (403568 <m2m_wifi_connect_sc+0x224>)
  4034e8:	47a0      	blx	r4
  4034ea:	f89d 1015 	ldrb.w	r1, [sp, #21]
  4034ee:	4826      	ldr	r0, [pc, #152]	; (403588 <m2m_wifi_connect_sc+0x244>)
  4034f0:	47a0      	blx	r4
  4034f2:	481f      	ldr	r0, [pc, #124]	; (403570 <m2m_wifi_connect_sc+0x22c>)
  4034f4:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4034f6:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4034fa:	e765      	b.n	4033c8 <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  4034fc:	4630      	mov	r0, r6
  4034fe:	4b1d      	ldr	r3, [pc, #116]	; (403574 <m2m_wifi_connect_sc+0x230>)
  403500:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  403502:	1e43      	subs	r3, r0, #1
  403504:	b29b      	uxth	r3, r3
  403506:	2b3f      	cmp	r3, #63	; 0x3f
  403508:	d805      	bhi.n	403516 <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  40350a:	1c42      	adds	r2, r0, #1
  40350c:	4631      	mov	r1, r6
  40350e:	a805      	add	r0, sp, #20
  403510:	4b11      	ldr	r3, [pc, #68]	; (403558 <m2m_wifi_connect_sc+0x214>)
  403512:	4798      	blx	r3
  403514:	e74e      	b.n	4033b4 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  403516:	f240 224f 	movw	r2, #591	; 0x24f
  40351a:	4911      	ldr	r1, [pc, #68]	; (403560 <m2m_wifi_connect_sc+0x21c>)
  40351c:	4811      	ldr	r0, [pc, #68]	; (403564 <m2m_wifi_connect_sc+0x220>)
  40351e:	4c12      	ldr	r4, [pc, #72]	; (403568 <m2m_wifi_connect_sc+0x224>)
  403520:	47a0      	blx	r4
  403522:	481a      	ldr	r0, [pc, #104]	; (40358c <m2m_wifi_connect_sc+0x248>)
  403524:	47a0      	blx	r4
  403526:	4812      	ldr	r0, [pc, #72]	; (403570 <m2m_wifi_connect_sc+0x22c>)
  403528:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40352a:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40352e:	e74b      	b.n	4033c8 <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  403530:	223e      	movs	r2, #62	; 0x3e
  403532:	4631      	mov	r1, r6
  403534:	a805      	add	r0, sp, #20
  403536:	4b08      	ldr	r3, [pc, #32]	; (403558 <m2m_wifi_connect_sc+0x214>)
  403538:	4798      	blx	r3
  40353a:	e73b      	b.n	4033b4 <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  40353c:	f240 225f 	movw	r2, #607	; 0x25f
  403540:	4907      	ldr	r1, [pc, #28]	; (403560 <m2m_wifi_connect_sc+0x21c>)
  403542:	4808      	ldr	r0, [pc, #32]	; (403564 <m2m_wifi_connect_sc+0x220>)
  403544:	4c08      	ldr	r4, [pc, #32]	; (403568 <m2m_wifi_connect_sc+0x224>)
  403546:	47a0      	blx	r4
  403548:	4811      	ldr	r0, [pc, #68]	; (403590 <m2m_wifi_connect_sc+0x24c>)
  40354a:	47a0      	blx	r4
  40354c:	4808      	ldr	r0, [pc, #32]	; (403570 <m2m_wifi_connect_sc+0x22c>)
  40354e:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403550:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  403554:	e738      	b.n	4033c8 <m2m_wifi_connect_sc+0x84>
  403556:	bf00      	nop
  403558:	00402745 	.word	0x00402745
  40355c:	004028bd 	.word	0x004028bd
  403560:	0040cd9c 	.word	0x0040cd9c
  403564:	0040cadc 	.word	0x0040cadc
  403568:	00406611 	.word	0x00406611
  40356c:	0040cdf0 	.word	0x0040cdf0
  403570:	0040cb08 	.word	0x0040cb08
  403574:	00402767 	.word	0x00402767
  403578:	0040ce04 	.word	0x0040ce04
  40357c:	0040ce14 	.word	0x0040ce14
  403580:	0040ce28 	.word	0x0040ce28
  403584:	0040ce34 	.word	0x0040ce34
  403588:	0040ce50 	.word	0x0040ce50
  40358c:	0040ce6c 	.word	0x0040ce6c
  403590:	0040ce88 	.word	0x0040ce88

00403594 <m2m_wifi_connect>:
{
  403594:	b510      	push	{r4, lr}
  403596:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  403598:	2400      	movs	r4, #0
  40359a:	9401      	str	r4, [sp, #4]
  40359c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  4035a0:	9400      	str	r4, [sp, #0]
  4035a2:	4c02      	ldr	r4, [pc, #8]	; (4035ac <m2m_wifi_connect+0x18>)
  4035a4:	47a0      	blx	r4
}
  4035a6:	b002      	add	sp, #8
  4035a8:	bd10      	pop	{r4, pc}
  4035aa:	bf00      	nop
  4035ac:	00403345 	.word	0x00403345

004035b0 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  4035b0:	2000      	movs	r0, #0
  4035b2:	4770      	bx	lr

004035b4 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  4035b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4035b6:	b083      	sub	sp, #12
  4035b8:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4035ba:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  4035be:	4e0a      	ldr	r6, [pc, #40]	; (4035e8 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4035c0:	4f0a      	ldr	r7, [pc, #40]	; (4035ec <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  4035c2:	4621      	mov	r1, r4
  4035c4:	4628      	mov	r0, r5
  4035c6:	47b0      	blx	r6
		if(val32 != 0) {		
  4035c8:	b154      	cbz	r4, 4035e0 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  4035ca:	a902      	add	r1, sp, #8
  4035cc:	2300      	movs	r3, #0
  4035ce:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4035d2:	4628      	mov	r0, r5
  4035d4:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  4035d6:	2800      	cmp	r0, #0
  4035d8:	d1f3      	bne.n	4035c2 <chip_apply_conf+0xe>
				if(reg == val32)
  4035da:	9b01      	ldr	r3, [sp, #4]
  4035dc:	429c      	cmp	r4, r3
  4035de:	d1f0      	bne.n	4035c2 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  4035e0:	2000      	movs	r0, #0
  4035e2:	b003      	add	sp, #12
  4035e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4035e6:	bf00      	nop
  4035e8:	00403a8d 	.word	0x00403a8d
  4035ec:	00403a81 	.word	0x00403a81

004035f0 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  4035f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035f4:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  4035f6:	2001      	movs	r0, #1
  4035f8:	4b3c      	ldr	r3, [pc, #240]	; (4036ec <nm_clkless_wake+0xfc>)
  4035fa:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  4035fc:	a901      	add	r1, sp, #4
  4035fe:	2001      	movs	r0, #1
  403600:	4b3b      	ldr	r3, [pc, #236]	; (4036f0 <nm_clkless_wake+0x100>)
  403602:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  403604:	4682      	mov	sl, r0
  403606:	b938      	cbnz	r0, 403618 <nm_clkless_wake+0x28>
  403608:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40360a:	f04f 0801 	mov.w	r8, #1
  40360e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 403718 <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  403612:	4d36      	ldr	r5, [pc, #216]	; (4036ec <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  403614:	4f37      	ldr	r7, [pc, #220]	; (4036f4 <nm_clkless_wake+0x104>)
  403616:	e020      	b.n	40365a <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  403618:	2272      	movs	r2, #114	; 0x72
  40361a:	4937      	ldr	r1, [pc, #220]	; (4036f8 <nm_clkless_wake+0x108>)
  40361c:	4837      	ldr	r0, [pc, #220]	; (4036fc <nm_clkless_wake+0x10c>)
  40361e:	4c38      	ldr	r4, [pc, #224]	; (403700 <nm_clkless_wake+0x110>)
  403620:	47a0      	blx	r4
  403622:	4838      	ldr	r0, [pc, #224]	; (403704 <nm_clkless_wake+0x114>)
  403624:	47a0      	blx	r4
  403626:	4838      	ldr	r0, [pc, #224]	; (403708 <nm_clkless_wake+0x118>)
  403628:	47a0      	blx	r4
		goto _WAKE_EXIT;
  40362a:	e009      	b.n	403640 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  40362c:	2296      	movs	r2, #150	; 0x96
  40362e:	4932      	ldr	r1, [pc, #200]	; (4036f8 <nm_clkless_wake+0x108>)
  403630:	4832      	ldr	r0, [pc, #200]	; (4036fc <nm_clkless_wake+0x10c>)
  403632:	4c33      	ldr	r4, [pc, #204]	; (403700 <nm_clkless_wake+0x110>)
  403634:	47a0      	blx	r4
  403636:	4835      	ldr	r0, [pc, #212]	; (40370c <nm_clkless_wake+0x11c>)
  403638:	47a0      	blx	r4
  40363a:	4833      	ldr	r0, [pc, #204]	; (403708 <nm_clkless_wake+0x118>)
  40363c:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40363e:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  403640:	4650      	mov	r0, sl
  403642:	b003      	add	sp, #12
  403644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  403648:	9901      	ldr	r1, [sp, #4]
  40364a:	f041 0102 	orr.w	r1, r1, #2
  40364e:	4640      	mov	r0, r8
  403650:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  403652:	9b00      	ldr	r3, [sp, #0]
  403654:	f013 0f04 	tst.w	r3, #4
  403658:	d1f2      	bne.n	403640 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  40365a:	9901      	ldr	r1, [sp, #4]
  40365c:	f041 0102 	orr.w	r1, r1, #2
  403660:	4640      	mov	r0, r8
  403662:	47c8      	blx	r9
		nm_bsp_sleep(1);
  403664:	4640      	mov	r0, r8
  403666:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403668:	4669      	mov	r1, sp
  40366a:	4b29      	ldr	r3, [pc, #164]	; (403710 <nm_clkless_wake+0x120>)
  40366c:	6818      	ldr	r0, [r3, #0]
  40366e:	4b20      	ldr	r3, [pc, #128]	; (4036f0 <nm_clkless_wake+0x100>)
  403670:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  403672:	b908      	cbnz	r0, 403678 <nm_clkless_wake+0x88>
  403674:	9b00      	ldr	r3, [sp, #0]
  403676:	b9bb      	cbnz	r3, 4036a8 <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  403678:	4e25      	ldr	r6, [pc, #148]	; (403710 <nm_clkless_wake+0x120>)
  40367a:	230e      	movs	r3, #14
  40367c:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  40367e:	4640      	mov	r0, r8
  403680:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403682:	4669      	mov	r1, sp
  403684:	6830      	ldr	r0, [r6, #0]
  403686:	4b1a      	ldr	r3, [pc, #104]	; (4036f0 <nm_clkless_wake+0x100>)
  403688:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40368a:	b908      	cbnz	r0, 403690 <nm_clkless_wake+0xa0>
  40368c:	9b00      	ldr	r3, [sp, #0]
  40368e:	b95b      	cbnz	r3, 4036a8 <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  403690:	4e1f      	ldr	r6, [pc, #124]	; (403710 <nm_clkless_wake+0x120>)
  403692:	2313      	movs	r3, #19
  403694:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  403696:	4640      	mov	r0, r8
  403698:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40369a:	4669      	mov	r1, sp
  40369c:	6830      	ldr	r0, [r6, #0]
  40369e:	4b14      	ldr	r3, [pc, #80]	; (4036f0 <nm_clkless_wake+0x100>)
  4036a0:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4036a2:	4606      	mov	r6, r0
  4036a4:	2800      	cmp	r0, #0
  4036a6:	d1c1      	bne.n	40362c <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4036a8:	4e19      	ldr	r6, [pc, #100]	; (403710 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4036aa:	9b00      	ldr	r3, [sp, #0]
  4036ac:	f013 0f04 	tst.w	r3, #4
  4036b0:	d1c6      	bne.n	403640 <nm_clkless_wake+0x50>
  4036b2:	3401      	adds	r4, #1
  4036b4:	fba7 2304 	umull	r2, r3, r7, r4
  4036b8:	085b      	lsrs	r3, r3, #1
  4036ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4036be:	429c      	cmp	r4, r3
  4036c0:	d1c2      	bne.n	403648 <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  4036c2:	2002      	movs	r0, #2
  4036c4:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4036c6:	4669      	mov	r1, sp
  4036c8:	6830      	ldr	r0, [r6, #0]
  4036ca:	4b09      	ldr	r3, [pc, #36]	; (4036f0 <nm_clkless_wake+0x100>)
  4036cc:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  4036ce:	9b00      	ldr	r3, [sp, #0]
  4036d0:	f013 0f04 	tst.w	r3, #4
  4036d4:	d1e9      	bne.n	4036aa <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  4036d6:	22aa      	movs	r2, #170	; 0xaa
  4036d8:	4907      	ldr	r1, [pc, #28]	; (4036f8 <nm_clkless_wake+0x108>)
  4036da:	4808      	ldr	r0, [pc, #32]	; (4036fc <nm_clkless_wake+0x10c>)
  4036dc:	f8df b020 	ldr.w	fp, [pc, #32]	; 403700 <nm_clkless_wake+0x110>
  4036e0:	47d8      	blx	fp
  4036e2:	480c      	ldr	r0, [pc, #48]	; (403714 <nm_clkless_wake+0x124>)
  4036e4:	47d8      	blx	fp
  4036e6:	4808      	ldr	r0, [pc, #32]	; (403708 <nm_clkless_wake+0x118>)
  4036e8:	47d8      	blx	fp
  4036ea:	e7de      	b.n	4036aa <nm_clkless_wake+0xba>
  4036ec:	004023a1 	.word	0x004023a1
  4036f0:	00403a81 	.word	0x00403a81
  4036f4:	aaaaaaab 	.word	0xaaaaaaab
  4036f8:	0040cf0c 	.word	0x0040cf0c
  4036fc:	0040cadc 	.word	0x0040cadc
  403700:	00406611 	.word	0x00406611
  403704:	0040cf7c 	.word	0x0040cf7c
  403708:	0040cb08 	.word	0x0040cb08
  40370c:	0040cf9c 	.word	0x0040cf9c
  403710:	20400014 	.word	0x20400014
  403714:	0040cfbc 	.word	0x0040cfbc
  403718:	00403a8d 	.word	0x00403a8d

0040371c <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  40371c:	b500      	push	{lr}
  40371e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  403720:	a901      	add	r1, sp, #4
  403722:	f241 4008 	movw	r0, #5128	; 0x1408
  403726:	4b15      	ldr	r3, [pc, #84]	; (40377c <enable_interrupts+0x60>)
  403728:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40372a:	b9e8      	cbnz	r0, 403768 <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  40372c:	9901      	ldr	r1, [sp, #4]
  40372e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  403732:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  403734:	f241 4008 	movw	r0, #5128	; 0x1408
  403738:	4b11      	ldr	r3, [pc, #68]	; (403780 <enable_interrupts+0x64>)
  40373a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40373c:	b9b8      	cbnz	r0, 40376e <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  40373e:	a901      	add	r1, sp, #4
  403740:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  403744:	4b0d      	ldr	r3, [pc, #52]	; (40377c <enable_interrupts+0x60>)
  403746:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403748:	b9a0      	cbnz	r0, 403774 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  40374a:	9901      	ldr	r1, [sp, #4]
  40374c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403750:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  403752:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  403756:	4b0a      	ldr	r3, [pc, #40]	; (403780 <enable_interrupts+0x64>)
  403758:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40375a:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  40375c:	bf18      	it	ne
  40375e:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  403762:	b003      	add	sp, #12
  403764:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  403768:	f06f 0005 	mvn.w	r0, #5
  40376c:	e7f9      	b.n	403762 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  40376e:	f06f 0005 	mvn.w	r0, #5
  403772:	e7f6      	b.n	403762 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  403774:	f06f 0005 	mvn.w	r0, #5
  403778:	e7f3      	b.n	403762 <enable_interrupts+0x46>
  40377a:	bf00      	nop
  40377c:	00403a81 	.word	0x00403a81
  403780:	00403a8d 	.word	0x00403a8d

00403784 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  403784:	b510      	push	{r4, lr}
  403786:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  403788:	4b25      	ldr	r3, [pc, #148]	; (403820 <nmi_get_chipid+0x9c>)
  40378a:	681c      	ldr	r4, [r3, #0]
  40378c:	b124      	cbz	r4, 403798 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  40378e:	4b24      	ldr	r3, [pc, #144]	; (403820 <nmi_get_chipid+0x9c>)
  403790:	681c      	ldr	r4, [r3, #0]
}
  403792:	4620      	mov	r0, r4
  403794:	b002      	add	sp, #8
  403796:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  403798:	4619      	mov	r1, r3
  40379a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40379e:	4b21      	ldr	r3, [pc, #132]	; (403824 <nmi_get_chipid+0xa0>)
  4037a0:	4798      	blx	r3
  4037a2:	b118      	cbz	r0, 4037ac <nmi_get_chipid+0x28>
			chipid = 0;
  4037a4:	2200      	movs	r2, #0
  4037a6:	4b1e      	ldr	r3, [pc, #120]	; (403820 <nmi_get_chipid+0x9c>)
  4037a8:	601a      	str	r2, [r3, #0]
			return 0;
  4037aa:	e7f2      	b.n	403792 <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4037ac:	a901      	add	r1, sp, #4
  4037ae:	f241 30f4 	movw	r0, #5108	; 0x13f4
  4037b2:	4b1c      	ldr	r3, [pc, #112]	; (403824 <nmi_get_chipid+0xa0>)
  4037b4:	4798      	blx	r3
  4037b6:	b118      	cbz	r0, 4037c0 <nmi_get_chipid+0x3c>
			chipid = 0;
  4037b8:	2200      	movs	r2, #0
  4037ba:	4b19      	ldr	r3, [pc, #100]	; (403820 <nmi_get_chipid+0x9c>)
  4037bc:	601a      	str	r2, [r3, #0]
			return 0;
  4037be:	e7e8      	b.n	403792 <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  4037c0:	4b17      	ldr	r3, [pc, #92]	; (403820 <nmi_get_chipid+0x9c>)
  4037c2:	681b      	ldr	r3, [r3, #0]
  4037c4:	4a18      	ldr	r2, [pc, #96]	; (403828 <nmi_get_chipid+0xa4>)
  4037c6:	4293      	cmp	r3, r2
  4037c8:	d00d      	beq.n	4037e6 <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  4037ca:	4a18      	ldr	r2, [pc, #96]	; (40382c <nmi_get_chipid+0xa8>)
  4037cc:	4293      	cmp	r3, r2
  4037ce:	d011      	beq.n	4037f4 <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  4037d0:	4a17      	ldr	r2, [pc, #92]	; (403830 <nmi_get_chipid+0xac>)
  4037d2:	4293      	cmp	r3, r2
  4037d4:	d018      	beq.n	403808 <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  4037d6:	4a12      	ldr	r2, [pc, #72]	; (403820 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  4037d8:	6813      	ldr	r3, [r2, #0]
  4037da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  4037de:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  4037e2:	6013      	str	r3, [r2, #0]
  4037e4:	e7d3      	b.n	40378e <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  4037e6:	9b01      	ldr	r3, [sp, #4]
  4037e8:	2b01      	cmp	r3, #1
  4037ea:	d0f4      	beq.n	4037d6 <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  4037ec:	3201      	adds	r2, #1
  4037ee:	4b0c      	ldr	r3, [pc, #48]	; (403820 <nmi_get_chipid+0x9c>)
  4037f0:	601a      	str	r2, [r3, #0]
  4037f2:	e7f0      	b.n	4037d6 <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  4037f4:	9b01      	ldr	r3, [sp, #4]
  4037f6:	2b03      	cmp	r3, #3
  4037f8:	d0ed      	beq.n	4037d6 <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  4037fa:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  4037fc:	bf0c      	ite	eq
  4037fe:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  403800:	4a0c      	ldrne	r2, [pc, #48]	; (403834 <nmi_get_chipid+0xb0>)
  403802:	4b07      	ldr	r3, [pc, #28]	; (403820 <nmi_get_chipid+0x9c>)
  403804:	601a      	str	r2, [r3, #0]
  403806:	e7e6      	b.n	4037d6 <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  403808:	4905      	ldr	r1, [pc, #20]	; (403820 <nmi_get_chipid+0x9c>)
  40380a:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  40380e:	4b05      	ldr	r3, [pc, #20]	; (403824 <nmi_get_chipid+0xa0>)
  403810:	4798      	blx	r3
  403812:	2800      	cmp	r0, #0
  403814:	d0df      	beq.n	4037d6 <nmi_get_chipid+0x52>
			chipid = 0;
  403816:	2200      	movs	r2, #0
  403818:	4b01      	ldr	r3, [pc, #4]	; (403820 <nmi_get_chipid+0x9c>)
  40381a:	601a      	str	r2, [r3, #0]
			return 0;
  40381c:	e7b9      	b.n	403792 <nmi_get_chipid+0xe>
  40381e:	bf00      	nop
  403820:	2040c364 	.word	0x2040c364
  403824:	00403a81 	.word	0x00403a81
  403828:	001002a0 	.word	0x001002a0
  40382c:	001002b0 	.word	0x001002b0
  403830:	001000f0 	.word	0x001000f0
  403834:	001002b2 	.word	0x001002b2

00403838 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  403838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40383c:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40383e:	f241 0514 	movw	r5, #4116	; 0x1014
  403842:	4c28      	ldr	r4, [pc, #160]	; (4038e4 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403844:	4e28      	ldr	r6, [pc, #160]	; (4038e8 <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403846:	4628      	mov	r0, r5
  403848:	47a0      	blx	r4
		if (reg & 0x80000000) {
  40384a:	2800      	cmp	r0, #0
  40384c:	db02      	blt.n	403854 <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40384e:	2001      	movs	r0, #1
  403850:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403852:	e7f8      	b.n	403846 <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  403854:	4825      	ldr	r0, [pc, #148]	; (4038ec <wait_for_bootrom+0xb4>)
  403856:	4b23      	ldr	r3, [pc, #140]	; (4038e4 <wait_for_bootrom+0xac>)
  403858:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  40385a:	f010 0f01 	tst.w	r0, #1
  40385e:	d110      	bne.n	403882 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  403860:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4038e8 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  403864:	4e1f      	ldr	r6, [pc, #124]	; (4038e4 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  403866:	4d22      	ldr	r5, [pc, #136]	; (4038f0 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  403868:	2001      	movs	r0, #1
  40386a:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  40386c:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403870:	47b0      	blx	r6
  403872:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  403874:	462a      	mov	r2, r5
  403876:	4601      	mov	r1, r0
  403878:	481e      	ldr	r0, [pc, #120]	; (4038f4 <wait_for_bootrom+0xbc>)
  40387a:	4b1f      	ldr	r3, [pc, #124]	; (4038f8 <wait_for_bootrom+0xc0>)
  40387c:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  40387e:	42ac      	cmp	r4, r5
  403880:	d1f2      	bne.n	403868 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  403882:	2f02      	cmp	r7, #2
  403884:	d019      	beq.n	4038ba <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  403886:	2f03      	cmp	r7, #3
  403888:	d022      	beq.n	4038d0 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  40388a:	2f04      	cmp	r7, #4
  40388c:	bf14      	ite	ne
  40388e:	2400      	movne	r4, #0
  403890:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  403892:	4b1a      	ldr	r3, [pc, #104]	; (4038fc <wait_for_bootrom+0xc4>)
  403894:	4798      	blx	r3
  403896:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40389a:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  40389e:	bf0c      	ite	eq
  4038a0:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  4038a4:	4620      	movne	r0, r4
  4038a6:	4b16      	ldr	r3, [pc, #88]	; (403900 <wait_for_bootrom+0xc8>)
  4038a8:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  4038aa:	4916      	ldr	r1, [pc, #88]	; (403904 <wait_for_bootrom+0xcc>)
  4038ac:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4038b0:	4b15      	ldr	r3, [pc, #84]	; (403908 <wait_for_bootrom+0xd0>)
  4038b2:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  4038b4:	2000      	movs	r0, #0
  4038b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4038ba:	4914      	ldr	r1, [pc, #80]	; (40390c <wait_for_bootrom+0xd4>)
  4038bc:	4814      	ldr	r0, [pc, #80]	; (403910 <wait_for_bootrom+0xd8>)
  4038be:	4c12      	ldr	r4, [pc, #72]	; (403908 <wait_for_bootrom+0xd0>)
  4038c0:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4038c2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4038c6:	f241 008c 	movw	r0, #4236	; 0x108c
  4038ca:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4038cc:	2400      	movs	r4, #0
  4038ce:	e7e0      	b.n	403892 <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4038d0:	490e      	ldr	r1, [pc, #56]	; (40390c <wait_for_bootrom+0xd4>)
  4038d2:	480f      	ldr	r0, [pc, #60]	; (403910 <wait_for_bootrom+0xd8>)
  4038d4:	4c0c      	ldr	r4, [pc, #48]	; (403908 <wait_for_bootrom+0xd0>)
  4038d6:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  4038d8:	2100      	movs	r1, #0
  4038da:	f241 008c 	movw	r0, #4236	; 0x108c
  4038de:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4038e0:	2400      	movs	r4, #0
  4038e2:	e7d6      	b.n	403892 <wait_for_bootrom+0x5a>
  4038e4:	00403a75 	.word	0x00403a75
  4038e8:	004023a1 	.word	0x004023a1
  4038ec:	000207bc 	.word	0x000207bc
  4038f0:	10add09e 	.word	0x10add09e
  4038f4:	0040cfe0 	.word	0x0040cfe0
  4038f8:	00406611 	.word	0x00406611
  4038fc:	00403785 	.word	0x00403785
  403900:	004035b5 	.word	0x004035b5
  403904:	ef522f61 	.word	0xef522f61
  403908:	00403a8d 	.word	0x00403a8d
  40390c:	3c1cd57d 	.word	0x3c1cd57d
  403910:	000207ac 	.word	0x000207ac

00403914 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  403914:	b5f0      	push	{r4, r5, r6, r7, lr}
  403916:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  403918:	f241 038c 	movw	r3, #4236	; 0x108c
  40391c:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  40391e:	4b18      	ldr	r3, [pc, #96]	; (403980 <wait_for_firmware_start+0x6c>)
  403920:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  403922:	3802      	subs	r0, #2
  403924:	b2c0      	uxtb	r0, r0
  403926:	2801      	cmp	r0, #1
  403928:	d911      	bls.n	40394e <wait_for_firmware_start+0x3a>
{
  40392a:	f04f 34ff 	mov.w	r4, #4294967295
  40392e:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403930:	2702      	movs	r7, #2
  403932:	4e14      	ldr	r6, [pc, #80]	; (403984 <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  403934:	4d14      	ldr	r5, [pc, #80]	; (403988 <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  403936:	9b00      	ldr	r3, [sp, #0]
  403938:	4298      	cmp	r0, r3
  40393a:	d012      	beq.n	403962 <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  40393c:	4638      	mov	r0, r7
  40393e:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  403940:	9801      	ldr	r0, [sp, #4]
  403942:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  403944:	3c01      	subs	r4, #1
  403946:	d1f6      	bne.n	403936 <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  403948:	f06f 0004 	mvn.w	r0, #4
  40394c:	e00e      	b.n	40396c <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  40394e:	4b0f      	ldr	r3, [pc, #60]	; (40398c <wait_for_firmware_start+0x78>)
  403950:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  403952:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  403956:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  40395a:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  40395e:	9300      	str	r3, [sp, #0]
  403960:	e7e3      	b.n	40392a <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  403962:	9a00      	ldr	r2, [sp, #0]
  403964:	4b06      	ldr	r3, [pc, #24]	; (403980 <wait_for_firmware_start+0x6c>)
  403966:	429a      	cmp	r2, r3
  403968:	d002      	beq.n	403970 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  40396a:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  40396c:	b003      	add	sp, #12
  40396e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  403970:	2100      	movs	r1, #0
  403972:	f241 008c 	movw	r0, #4236	; 0x108c
  403976:	4b06      	ldr	r3, [pc, #24]	; (403990 <wait_for_firmware_start+0x7c>)
  403978:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  40397a:	2000      	movs	r0, #0
  40397c:	e7f6      	b.n	40396c <wait_for_firmware_start+0x58>
  40397e:	bf00      	nop
  403980:	02532636 	.word	0x02532636
  403984:	004023a1 	.word	0x004023a1
  403988:	00403a75 	.word	0x00403a75
  40398c:	000207ac 	.word	0x000207ac
  403990:	00403a8d 	.word	0x00403a8d

00403994 <chip_deinit>:

sint8 chip_deinit(void)
{
  403994:	b5f0      	push	{r4, r5, r6, r7, lr}
  403996:	b083      	sub	sp, #12
	uint32 reg = 0;
  403998:	a902      	add	r1, sp, #8
  40399a:	2300      	movs	r3, #0
  40399c:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4039a0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4039a4:	4b24      	ldr	r3, [pc, #144]	; (403a38 <chip_deinit+0xa4>)
  4039a6:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  4039a8:	bb20      	cbnz	r0, 4039f4 <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  4039aa:	9901      	ldr	r1, [sp, #4]
  4039ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4039b0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4039b2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4039b6:	4b21      	ldr	r3, [pc, #132]	; (403a3c <chip_deinit+0xa8>)
  4039b8:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  4039ba:	4605      	mov	r5, r0
  4039bc:	bb28      	cbnz	r0, 403a0a <chip_deinit+0x76>
  4039be:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4039c0:	4e1d      	ldr	r6, [pc, #116]	; (403a38 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4039c2:	4f1e      	ldr	r7, [pc, #120]	; (403a3c <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4039c4:	a901      	add	r1, sp, #4
  4039c6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4039ca:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  4039cc:	4605      	mov	r5, r0
  4039ce:	bb38      	cbnz	r0, 403a20 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  4039d0:	9901      	ldr	r1, [sp, #4]
  4039d2:	f411 6f80 	tst.w	r1, #1024	; 0x400
  4039d6:	d00a      	beq.n	4039ee <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  4039d8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4039dc:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4039de:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4039e2:	47b8      	blx	r7
  4039e4:	4605      	mov	r5, r0
  4039e6:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4039e8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4039ec:	d1ea      	bne.n	4039c4 <chip_deinit+0x30>

	return ret;
}
  4039ee:	4628      	mov	r0, r5
  4039f0:	b003      	add	sp, #12
  4039f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  4039f4:	f240 2231 	movw	r2, #561	; 0x231
  4039f8:	4911      	ldr	r1, [pc, #68]	; (403a40 <chip_deinit+0xac>)
  4039fa:	4812      	ldr	r0, [pc, #72]	; (403a44 <chip_deinit+0xb0>)
  4039fc:	4c12      	ldr	r4, [pc, #72]	; (403a48 <chip_deinit+0xb4>)
  4039fe:	47a0      	blx	r4
  403a00:	4812      	ldr	r0, [pc, #72]	; (403a4c <chip_deinit+0xb8>)
  403a02:	47a0      	blx	r4
  403a04:	4812      	ldr	r0, [pc, #72]	; (403a50 <chip_deinit+0xbc>)
  403a06:	47a0      	blx	r4
  403a08:	e7cf      	b.n	4039aa <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  403a0a:	f240 2237 	movw	r2, #567	; 0x237
  403a0e:	490c      	ldr	r1, [pc, #48]	; (403a40 <chip_deinit+0xac>)
  403a10:	480c      	ldr	r0, [pc, #48]	; (403a44 <chip_deinit+0xb0>)
  403a12:	4c0d      	ldr	r4, [pc, #52]	; (403a48 <chip_deinit+0xb4>)
  403a14:	47a0      	blx	r4
  403a16:	480f      	ldr	r0, [pc, #60]	; (403a54 <chip_deinit+0xc0>)
  403a18:	47a0      	blx	r4
  403a1a:	480d      	ldr	r0, [pc, #52]	; (403a50 <chip_deinit+0xbc>)
  403a1c:	47a0      	blx	r4
		return ret;
  403a1e:	e7e6      	b.n	4039ee <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  403a20:	f240 223e 	movw	r2, #574	; 0x23e
  403a24:	4906      	ldr	r1, [pc, #24]	; (403a40 <chip_deinit+0xac>)
  403a26:	4807      	ldr	r0, [pc, #28]	; (403a44 <chip_deinit+0xb0>)
  403a28:	4c07      	ldr	r4, [pc, #28]	; (403a48 <chip_deinit+0xb4>)
  403a2a:	47a0      	blx	r4
  403a2c:	480a      	ldr	r0, [pc, #40]	; (403a58 <chip_deinit+0xc4>)
  403a2e:	47a0      	blx	r4
  403a30:	4807      	ldr	r0, [pc, #28]	; (403a50 <chip_deinit+0xbc>)
  403a32:	47a0      	blx	r4
			return ret;
  403a34:	e7db      	b.n	4039ee <chip_deinit+0x5a>
  403a36:	bf00      	nop
  403a38:	00403a81 	.word	0x00403a81
  403a3c:	00403a8d 	.word	0x00403a8d
  403a40:	0040cf1c 	.word	0x0040cf1c
  403a44:	0040cadc 	.word	0x0040cadc
  403a48:	00406611 	.word	0x00406611
  403a4c:	0040cf28 	.word	0x0040cf28
  403a50:	0040cb08 	.word	0x0040cb08
  403a54:	0040cf44 	.word	0x0040cf44
  403a58:	0040cf60 	.word	0x0040cf60

00403a5c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  403a5c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  403a5e:	4b01      	ldr	r3, [pc, #4]	; (403a64 <nm_bus_iface_init+0x8>)
  403a60:	4798      	blx	r3

	return ret;
}
  403a62:	bd08      	pop	{r3, pc}
  403a64:	00402515 	.word	0x00402515

00403a68 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  403a68:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  403a6a:	4b01      	ldr	r3, [pc, #4]	; (403a70 <nm_bus_iface_deinit+0x8>)
  403a6c:	4798      	blx	r3

	return ret;
}
  403a6e:	bd08      	pop	{r3, pc}
  403a70:	00402705 	.word	0x00402705

00403a74 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  403a74:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  403a76:	4b01      	ldr	r3, [pc, #4]	; (403a7c <nm_read_reg+0x8>)
  403a78:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  403a7a:	bd08      	pop	{r3, pc}
  403a7c:	004042c9 	.word	0x004042c9

00403a80 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403a80:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  403a82:	4b01      	ldr	r3, [pc, #4]	; (403a88 <nm_read_reg_with_ret+0x8>)
  403a84:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  403a86:	bd08      	pop	{r3, pc}
  403a88:	004042e1 	.word	0x004042e1

00403a8c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403a8c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  403a8e:	4b01      	ldr	r3, [pc, #4]	; (403a94 <nm_write_reg+0x8>)
  403a90:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  403a92:	bd08      	pop	{r3, pc}
  403a94:	004042f9 	.word	0x004042f9

00403a98 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  403a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403a9c:	4607      	mov	r7, r0
  403a9e:	4689      	mov	r9, r1
  403aa0:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  403aa2:	4b12      	ldr	r3, [pc, #72]	; (403aec <nm_read_block+0x54>)
  403aa4:	f8b3 8000 	ldrh.w	r8, [r3]
  403aa8:	f1a8 0808 	sub.w	r8, r8, #8
  403aac:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403ab0:	4542      	cmp	r2, r8
  403ab2:	d919      	bls.n	403ae8 <nm_read_block+0x50>
  403ab4:	4644      	mov	r4, r8
  403ab6:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  403ab8:	f8df a034 	ldr.w	sl, [pc, #52]	; 403af0 <nm_read_block+0x58>
  403abc:	4642      	mov	r2, r8
  403abe:	eb09 0106 	add.w	r1, r9, r6
  403ac2:	4638      	mov	r0, r7
  403ac4:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  403ac6:	4603      	mov	r3, r0
  403ac8:	b958      	cbnz	r0, 403ae2 <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  403aca:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  403acc:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  403ace:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403ad0:	42a5      	cmp	r5, r4
  403ad2:	d8f3      	bhi.n	403abc <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  403ad4:	b2aa      	uxth	r2, r5
  403ad6:	eb09 0106 	add.w	r1, r9, r6
  403ada:	4638      	mov	r0, r7
  403adc:	4b04      	ldr	r3, [pc, #16]	; (403af0 <nm_read_block+0x58>)
  403ade:	4798      	blx	r3
  403ae0:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403ae2:	4618      	mov	r0, r3
  403ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  403ae8:	2600      	movs	r6, #0
  403aea:	e7f3      	b.n	403ad4 <nm_read_block+0x3c>
  403aec:	20400010 	.word	0x20400010
  403af0:	00404425 	.word	0x00404425

00403af4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  403af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403af8:	4607      	mov	r7, r0
  403afa:	4689      	mov	r9, r1
  403afc:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  403afe:	4b12      	ldr	r3, [pc, #72]	; (403b48 <nm_write_block+0x54>)
  403b00:	f8b3 8000 	ldrh.w	r8, [r3]
  403b04:	f1a8 0808 	sub.w	r8, r8, #8
  403b08:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403b0c:	4542      	cmp	r2, r8
  403b0e:	d919      	bls.n	403b44 <nm_write_block+0x50>
  403b10:	4644      	mov	r4, r8
  403b12:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403b14:	f8df a034 	ldr.w	sl, [pc, #52]	; 403b4c <nm_write_block+0x58>
  403b18:	4642      	mov	r2, r8
  403b1a:	eb09 0106 	add.w	r1, r9, r6
  403b1e:	4638      	mov	r0, r7
  403b20:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  403b22:	4603      	mov	r3, r0
  403b24:	b958      	cbnz	r0, 403b3e <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  403b26:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  403b28:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  403b2a:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403b2c:	42a5      	cmp	r5, r4
  403b2e:	d8f3      	bhi.n	403b18 <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403b30:	b2aa      	uxth	r2, r5
  403b32:	eb09 0106 	add.w	r1, r9, r6
  403b36:	4638      	mov	r0, r7
  403b38:	4b04      	ldr	r3, [pc, #16]	; (403b4c <nm_write_block+0x58>)
  403b3a:	4798      	blx	r3
  403b3c:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403b3e:	4618      	mov	r0, r3
  403b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  403b44:	2600      	movs	r6, #0
  403b46:	e7f3      	b.n	403b30 <nm_write_block+0x3c>
  403b48:	20400010 	.word	0x20400010
  403b4c:	004044ed 	.word	0x004044ed

00403b50 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  403b50:	b530      	push	{r4, r5, lr}
  403b52:	b083      	sub	sp, #12
  403b54:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  403b56:	a902      	add	r1, sp, #8
  403b58:	2300      	movs	r3, #0
  403b5a:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  403b5e:	4824      	ldr	r0, [pc, #144]	; (403bf0 <nm_get_firmware_info+0xa0>)
  403b60:	4b24      	ldr	r3, [pc, #144]	; (403bf4 <nm_get_firmware_info+0xa4>)
  403b62:	4798      	blx	r3
  403b64:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  403b66:	9a01      	ldr	r2, [sp, #4]
  403b68:	4b23      	ldr	r3, [pc, #140]	; (403bf8 <nm_get_firmware_info+0xa8>)
  403b6a:	429a      	cmp	r2, r3
  403b6c:	d039      	beq.n	403be2 <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  403b6e:	9b01      	ldr	r3, [sp, #4]
  403b70:	0c1a      	lsrs	r2, r3, #16
  403b72:	b291      	uxth	r1, r2
  403b74:	0a08      	lsrs	r0, r1, #8
  403b76:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  403b78:	f3c1 1103 	ubfx	r1, r1, #4, #4
  403b7c:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  403b7e:	f002 020f 	and.w	r2, r2, #15
  403b82:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  403b84:	b29a      	uxth	r2, r3
  403b86:	0a11      	lsrs	r1, r2, #8
  403b88:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  403b8a:	f3c2 1203 	ubfx	r2, r2, #4, #4
  403b8e:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  403b90:	f003 030f 	and.w	r3, r3, #15
  403b94:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  403b96:	4b19      	ldr	r3, [pc, #100]	; (403bfc <nm_get_firmware_info+0xac>)
  403b98:	4798      	blx	r3
  403b9a:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  403b9c:	7922      	ldrb	r2, [r4, #4]
  403b9e:	79a3      	ldrb	r3, [r4, #6]
  403ba0:	f003 030f 	and.w	r3, r3, #15
  403ba4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403ba8:	7962      	ldrb	r2, [r4, #5]
  403baa:	0112      	lsls	r2, r2, #4
  403bac:	b2d2      	uxtb	r2, r2
  403bae:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  403bb0:	79e1      	ldrb	r1, [r4, #7]
  403bb2:	7a62      	ldrb	r2, [r4, #9]
  403bb4:	f002 020f 	and.w	r2, r2, #15
  403bb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  403bbc:	7a21      	ldrb	r1, [r4, #8]
  403bbe:	0109      	lsls	r1, r1, #4
  403bc0:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  403bc2:	430a      	orrs	r2, r1
  403bc4:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  403bc8:	428a      	cmp	r2, r1
  403bca:	bf88      	it	hi
  403bcc:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  403bd0:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  403bd4:	4293      	cmp	r3, r2
	}
	return ret;
}
  403bd6:	bf8c      	ite	hi
  403bd8:	4628      	movhi	r0, r5
  403bda:	f06f 000c 	mvnls.w	r0, #12
  403bde:	b003      	add	sp, #12
  403be0:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  403be2:	a901      	add	r1, sp, #4
  403be4:	f241 0048 	movw	r0, #4168	; 0x1048
  403be8:	4b02      	ldr	r3, [pc, #8]	; (403bf4 <nm_get_firmware_info+0xa4>)
  403bea:	4798      	blx	r3
  403bec:	4605      	mov	r5, r0
  403bee:	e7be      	b.n	403b6e <nm_get_firmware_info+0x1e>
  403bf0:	000207ac 	.word	0x000207ac
  403bf4:	00403a81 	.word	0x00403a81
  403bf8:	d75dc1c3 	.word	0xd75dc1c3
  403bfc:	00403785 	.word	0x00403785

00403c00 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  403c00:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  403c02:	2800      	cmp	r0, #0
  403c04:	d037      	beq.n	403c76 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  403c06:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  403c08:	1e63      	subs	r3, r4, #1
  403c0a:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  403c0c:	2b04      	cmp	r3, #4
  403c0e:	bf28      	it	cs
  403c10:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  403c12:	2000      	movs	r0, #0
  403c14:	4b1e      	ldr	r3, [pc, #120]	; (403c90 <nm_drv_init+0x90>)
  403c16:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403c18:	4605      	mov	r5, r0
  403c1a:	2800      	cmp	r0, #0
  403c1c:	d12d      	bne.n	403c7a <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  403c1e:	481d      	ldr	r0, [pc, #116]	; (403c94 <nm_drv_init+0x94>)
  403c20:	4d1d      	ldr	r5, [pc, #116]	; (403c98 <nm_drv_init+0x98>)
  403c22:	47a8      	blx	r5
  403c24:	4b1d      	ldr	r3, [pc, #116]	; (403c9c <nm_drv_init+0x9c>)
  403c26:	4798      	blx	r3
  403c28:	4601      	mov	r1, r0
  403c2a:	481d      	ldr	r0, [pc, #116]	; (403ca0 <nm_drv_init+0xa0>)
  403c2c:	47a8      	blx	r5
  403c2e:	481d      	ldr	r0, [pc, #116]	; (403ca4 <nm_drv_init+0xa4>)
  403c30:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  403c32:	4b1d      	ldr	r3, [pc, #116]	; (403ca8 <nm_drv_init+0xa8>)
  403c34:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  403c36:	4620      	mov	r0, r4
  403c38:	4b1c      	ldr	r3, [pc, #112]	; (403cac <nm_drv_init+0xac>)
  403c3a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403c3c:	4605      	mov	r5, r0
  403c3e:	b9b0      	cbnz	r0, 403c6e <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  403c40:	4620      	mov	r0, r4
  403c42:	4b1b      	ldr	r3, [pc, #108]	; (403cb0 <nm_drv_init+0xb0>)
  403c44:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403c46:	4605      	mov	r5, r0
  403c48:	b988      	cbnz	r0, 403c6e <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  403c4a:	3c02      	subs	r4, #2
  403c4c:	b2e4      	uxtb	r4, r4
  403c4e:	2c01      	cmp	r4, #1
  403c50:	d90f      	bls.n	403c72 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  403c52:	4b18      	ldr	r3, [pc, #96]	; (403cb4 <nm_drv_init+0xb4>)
  403c54:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403c56:	4605      	mov	r5, r0
  403c58:	b158      	cbz	r0, 403c72 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  403c5a:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  403c5e:	4916      	ldr	r1, [pc, #88]	; (403cb8 <nm_drv_init+0xb8>)
  403c60:	4816      	ldr	r0, [pc, #88]	; (403cbc <nm_drv_init+0xbc>)
  403c62:	4c0d      	ldr	r4, [pc, #52]	; (403c98 <nm_drv_init+0x98>)
  403c64:	47a0      	blx	r4
  403c66:	4816      	ldr	r0, [pc, #88]	; (403cc0 <nm_drv_init+0xc0>)
  403c68:	47a0      	blx	r4
  403c6a:	480e      	ldr	r0, [pc, #56]	; (403ca4 <nm_drv_init+0xa4>)
  403c6c:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  403c6e:	4b15      	ldr	r3, [pc, #84]	; (403cc4 <nm_drv_init+0xc4>)
  403c70:	4798      	blx	r3
ERR1:
	return ret;
}
  403c72:	4628      	mov	r0, r5
  403c74:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  403c76:	2401      	movs	r4, #1
  403c78:	e7cb      	b.n	403c12 <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  403c7a:	f44f 7292 	mov.w	r2, #292	; 0x124
  403c7e:	490e      	ldr	r1, [pc, #56]	; (403cb8 <nm_drv_init+0xb8>)
  403c80:	480e      	ldr	r0, [pc, #56]	; (403cbc <nm_drv_init+0xbc>)
  403c82:	4c05      	ldr	r4, [pc, #20]	; (403c98 <nm_drv_init+0x98>)
  403c84:	47a0      	blx	r4
  403c86:	4810      	ldr	r0, [pc, #64]	; (403cc8 <nm_drv_init+0xc8>)
  403c88:	47a0      	blx	r4
  403c8a:	4806      	ldr	r0, [pc, #24]	; (403ca4 <nm_drv_init+0xa4>)
  403c8c:	47a0      	blx	r4
		goto ERR1;
  403c8e:	e7f0      	b.n	403c72 <nm_drv_init+0x72>
  403c90:	00403a5d 	.word	0x00403a5d
  403c94:	0040cdb0 	.word	0x0040cdb0
  403c98:	00406611 	.word	0x00406611
  403c9c:	00403785 	.word	0x00403785
  403ca0:	0040d0a8 	.word	0x0040d0a8
  403ca4:	0040cb08 	.word	0x0040cb08
  403ca8:	00404311 	.word	0x00404311
  403cac:	00403839 	.word	0x00403839
  403cb0:	00403915 	.word	0x00403915
  403cb4:	0040371d 	.word	0x0040371d
  403cb8:	0040cff0 	.word	0x0040cff0
  403cbc:	0040cadc 	.word	0x0040cadc
  403cc0:	0040d06c 	.word	0x0040d06c
  403cc4:	00403a69 	.word	0x00403a69
  403cc8:	0040d08c 	.word	0x0040d08c

00403ccc <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  403ccc:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  403cce:	4b19      	ldr	r3, [pc, #100]	; (403d34 <nm_drv_deinit+0x68>)
  403cd0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403cd2:	b958      	cbnz	r0, 403cec <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  403cd4:	2000      	movs	r0, #0
  403cd6:	4b18      	ldr	r3, [pc, #96]	; (403d38 <nm_drv_deinit+0x6c>)
  403cd8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403cda:	4604      	mov	r4, r0
  403cdc:	b998      	cbnz	r0, 403d06 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  403cde:	4b17      	ldr	r3, [pc, #92]	; (403d3c <nm_drv_deinit+0x70>)
  403ce0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403ce2:	4604      	mov	r4, r0
  403ce4:	b9d0      	cbnz	r0, 403d1c <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  403ce6:	4b16      	ldr	r3, [pc, #88]	; (403d40 <nm_drv_deinit+0x74>)
  403ce8:	4798      	blx	r3
  403cea:	e00a      	b.n	403d02 <nm_drv_deinit+0x36>
  403cec:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  403cee:	f44f 72ba 	mov.w	r2, #372	; 0x174
  403cf2:	4914      	ldr	r1, [pc, #80]	; (403d44 <nm_drv_deinit+0x78>)
  403cf4:	4814      	ldr	r0, [pc, #80]	; (403d48 <nm_drv_deinit+0x7c>)
  403cf6:	4d15      	ldr	r5, [pc, #84]	; (403d4c <nm_drv_deinit+0x80>)
  403cf8:	47a8      	blx	r5
  403cfa:	4815      	ldr	r0, [pc, #84]	; (403d50 <nm_drv_deinit+0x84>)
  403cfc:	47a8      	blx	r5
  403cfe:	4815      	ldr	r0, [pc, #84]	; (403d54 <nm_drv_deinit+0x88>)
  403d00:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  403d02:	4620      	mov	r0, r4
  403d04:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  403d06:	f240 127b 	movw	r2, #379	; 0x17b
  403d0a:	490e      	ldr	r1, [pc, #56]	; (403d44 <nm_drv_deinit+0x78>)
  403d0c:	480e      	ldr	r0, [pc, #56]	; (403d48 <nm_drv_deinit+0x7c>)
  403d0e:	4d0f      	ldr	r5, [pc, #60]	; (403d4c <nm_drv_deinit+0x80>)
  403d10:	47a8      	blx	r5
  403d12:	4811      	ldr	r0, [pc, #68]	; (403d58 <nm_drv_deinit+0x8c>)
  403d14:	47a8      	blx	r5
  403d16:	480f      	ldr	r0, [pc, #60]	; (403d54 <nm_drv_deinit+0x88>)
  403d18:	47a8      	blx	r5
		goto ERR1;
  403d1a:	e7f2      	b.n	403d02 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  403d1c:	f240 1281 	movw	r2, #385	; 0x181
  403d20:	4908      	ldr	r1, [pc, #32]	; (403d44 <nm_drv_deinit+0x78>)
  403d22:	4809      	ldr	r0, [pc, #36]	; (403d48 <nm_drv_deinit+0x7c>)
  403d24:	4d09      	ldr	r5, [pc, #36]	; (403d4c <nm_drv_deinit+0x80>)
  403d26:	47a8      	blx	r5
  403d28:	480c      	ldr	r0, [pc, #48]	; (403d5c <nm_drv_deinit+0x90>)
  403d2a:	47a8      	blx	r5
  403d2c:	4809      	ldr	r0, [pc, #36]	; (403d54 <nm_drv_deinit+0x88>)
  403d2e:	47a8      	blx	r5
		goto ERR1;
  403d30:	e7e7      	b.n	403d02 <nm_drv_deinit+0x36>
  403d32:	bf00      	nop
  403d34:	00403995 	.word	0x00403995
  403d38:	00404d71 	.word	0x00404d71
  403d3c:	00403a69 	.word	0x00403a69
  403d40:	004042bd 	.word	0x004042bd
  403d44:	0040cffc 	.word	0x0040cffc
  403d48:	0040cadc 	.word	0x0040cadc
  403d4c:	00406611 	.word	0x00406611
  403d50:	0040d00c 	.word	0x0040d00c
  403d54:	0040cb08 	.word	0x0040cb08
  403d58:	0040d02c 	.word	0x0040d02c
  403d5c:	0040d050 	.word	0x0040d050

00403d60 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  403d60:	b500      	push	{lr}
  403d62:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  403d64:	2300      	movs	r3, #0
  403d66:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  403d68:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  403d6a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403d6e:	a901      	add	r1, sp, #4
  403d70:	2003      	movs	r0, #3
  403d72:	4b02      	ldr	r3, [pc, #8]	; (403d7c <nmi_spi_read+0x1c>)
  403d74:	4798      	blx	r3
}
  403d76:	b005      	add	sp, #20
  403d78:	f85d fb04 	ldr.w	pc, [sp], #4
  403d7c:	00402631 	.word	0x00402631

00403d80 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  403d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403d84:	b082      	sub	sp, #8
  403d86:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  403d88:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  403d8c:	b2db      	uxtb	r3, r3
  403d8e:	2b01      	cmp	r3, #1
  403d90:	d927      	bls.n	403de2 <spi_cmd_rsp+0x62>
  403d92:	28cf      	cmp	r0, #207	; 0xcf
  403d94:	d025      	beq.n	403de2 <spi_cmd_rsp+0x62>
{
  403d96:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403d98:	f04f 0801 	mov.w	r8, #1
  403d9c:	4f23      	ldr	r7, [pc, #140]	; (403e2c <spi_cmd_rsp+0xac>)
  403d9e:	4641      	mov	r1, r8
  403da0:	f10d 0007 	add.w	r0, sp, #7
  403da4:	47b8      	blx	r7
  403da6:	4606      	mov	r6, r0
  403da8:	bb20      	cbnz	r0, 403df4 <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  403daa:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403dae:	42ab      	cmp	r3, r5
  403db0:	d02c      	beq.n	403e0c <spi_cmd_rsp+0x8c>
  403db2:	1e63      	subs	r3, r4, #1
  403db4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403db8:	d1f1      	bne.n	403d9e <spi_cmd_rsp+0x1e>
  403dba:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403dbc:	2701      	movs	r7, #1
  403dbe:	4d1b      	ldr	r5, [pc, #108]	; (403e2c <spi_cmd_rsp+0xac>)
  403dc0:	4639      	mov	r1, r7
  403dc2:	f10d 0007 	add.w	r0, sp, #7
  403dc6:	47a8      	blx	r5
  403dc8:	bb10      	cbnz	r0, 403e10 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  403dca:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403dce:	b353      	cbz	r3, 403e26 <spi_cmd_rsp+0xa6>
  403dd0:	1e63      	subs	r3, r4, #1
  403dd2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403dd6:	d1f3      	bne.n	403dc0 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  403dd8:	2601      	movs	r6, #1

_fail_:

	return result;
}
  403dda:	4630      	mov	r0, r6
  403ddc:	b002      	add	sp, #8
  403dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403de2:	2101      	movs	r1, #1
  403de4:	f10d 0007 	add.w	r0, sp, #7
  403de8:	4b10      	ldr	r3, [pc, #64]	; (403e2c <spi_cmd_rsp+0xac>)
  403dea:	4798      	blx	r3
  403dec:	2800      	cmp	r0, #0
  403dee:	d0d2      	beq.n	403d96 <spi_cmd_rsp+0x16>
			result = N_FAIL;
  403df0:	2600      	movs	r6, #0
  403df2:	e7f2      	b.n	403dda <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403df4:	f240 1227 	movw	r2, #295	; 0x127
  403df8:	490d      	ldr	r1, [pc, #52]	; (403e30 <spi_cmd_rsp+0xb0>)
  403dfa:	480e      	ldr	r0, [pc, #56]	; (403e34 <spi_cmd_rsp+0xb4>)
  403dfc:	4c0e      	ldr	r4, [pc, #56]	; (403e38 <spi_cmd_rsp+0xb8>)
  403dfe:	47a0      	blx	r4
  403e00:	480e      	ldr	r0, [pc, #56]	; (403e3c <spi_cmd_rsp+0xbc>)
  403e02:	47a0      	blx	r4
  403e04:	480e      	ldr	r0, [pc, #56]	; (403e40 <spi_cmd_rsp+0xc0>)
  403e06:	47a0      	blx	r4
			result = N_FAIL;
  403e08:	2600      	movs	r6, #0
			goto _fail_;
  403e0a:	e7e6      	b.n	403dda <spi_cmd_rsp+0x5a>
  403e0c:	240b      	movs	r4, #11
  403e0e:	e7d5      	b.n	403dbc <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403e10:	f240 1235 	movw	r2, #309	; 0x135
  403e14:	4906      	ldr	r1, [pc, #24]	; (403e30 <spi_cmd_rsp+0xb0>)
  403e16:	4807      	ldr	r0, [pc, #28]	; (403e34 <spi_cmd_rsp+0xb4>)
  403e18:	4c07      	ldr	r4, [pc, #28]	; (403e38 <spi_cmd_rsp+0xb8>)
  403e1a:	47a0      	blx	r4
  403e1c:	4807      	ldr	r0, [pc, #28]	; (403e3c <spi_cmd_rsp+0xbc>)
  403e1e:	47a0      	blx	r4
  403e20:	4807      	ldr	r0, [pc, #28]	; (403e40 <spi_cmd_rsp+0xc0>)
  403e22:	47a0      	blx	r4
			goto _fail_;
  403e24:	e7d9      	b.n	403dda <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  403e26:	2601      	movs	r6, #1
  403e28:	e7d7      	b.n	403dda <spi_cmd_rsp+0x5a>
  403e2a:	bf00      	nop
  403e2c:	00403d61 	.word	0x00403d61
  403e30:	0040d0c0 	.word	0x0040d0c0
  403e34:	0040cadc 	.word	0x0040cadc
  403e38:	00406611 	.word	0x00406611
  403e3c:	0040d500 	.word	0x0040d500
  403e40:	0040cb08 	.word	0x0040cb08

00403e44 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  403e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e48:	b085      	sub	sp, #20
  403e4a:	4683      	mov	fp, r0
  403e4c:	468a      	mov	sl, r1
  403e4e:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  403e50:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403e54:	4d37      	ldr	r5, [pc, #220]	; (403f34 <spi_data_read+0xf0>)
  403e56:	e027      	b.n	403ea8 <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  403e58:	f240 1257 	movw	r2, #343	; 0x157
  403e5c:	4936      	ldr	r1, [pc, #216]	; (403f38 <spi_data_read+0xf4>)
  403e5e:	4837      	ldr	r0, [pc, #220]	; (403f3c <spi_data_read+0xf8>)
  403e60:	4c37      	ldr	r4, [pc, #220]	; (403f40 <spi_data_read+0xfc>)
  403e62:	47a0      	blx	r4
  403e64:	4837      	ldr	r0, [pc, #220]	; (403f44 <spi_data_read+0x100>)
  403e66:	47a0      	blx	r4
  403e68:	4837      	ldr	r0, [pc, #220]	; (403f48 <spi_data_read+0x104>)
  403e6a:	47a0      	blx	r4
  403e6c:	2300      	movs	r3, #0
  403e6e:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  403e70:	9801      	ldr	r0, [sp, #4]
  403e72:	b005      	add	sp, #20
  403e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  403e78:	2c00      	cmp	r4, #0
  403e7a:	dd2e      	ble.n	403eda <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  403e7c:	4641      	mov	r1, r8
  403e7e:	eb0b 0009 	add.w	r0, fp, r9
  403e82:	47a8      	blx	r5
  403e84:	4604      	mov	r4, r0
  403e86:	2800      	cmp	r0, #0
  403e88:	d134      	bne.n	403ef4 <spi_data_read+0xb0>
		if(!clockless)
  403e8a:	b91f      	cbnz	r7, 403e94 <spi_data_read+0x50>
			if (!gu8Crc_off) {
  403e8c:	4b2f      	ldr	r3, [pc, #188]	; (403f4c <spi_data_read+0x108>)
  403e8e:	781b      	ldrb	r3, [r3, #0]
  403e90:	2b00      	cmp	r3, #0
  403e92:	d03a      	beq.n	403f0a <spi_data_read+0xc6>
		ix += nbytes;
  403e94:	44c1      	add	r9, r8
  403e96:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  403e9a:	ebaa 0a08 	sub.w	sl, sl, r8
  403e9e:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  403ea2:	f1ba 0f00 	cmp.w	sl, #0
  403ea6:	d041      	beq.n	403f2c <spi_data_read+0xe8>
  403ea8:	46d0      	mov	r8, sl
  403eaa:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  403eae:	bf28      	it	cs
  403eb0:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  403eb4:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403eb6:	2601      	movs	r6, #1
  403eb8:	4631      	mov	r1, r6
  403eba:	f10d 000b 	add.w	r0, sp, #11
  403ebe:	47a8      	blx	r5
  403ec0:	9001      	str	r0, [sp, #4]
  403ec2:	2800      	cmp	r0, #0
  403ec4:	d1c8      	bne.n	403e58 <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  403ec6:	f89d 300b 	ldrb.w	r3, [sp, #11]
  403eca:	091b      	lsrs	r3, r3, #4
  403ecc:	2b0f      	cmp	r3, #15
  403ece:	d0d3      	beq.n	403e78 <spi_data_read+0x34>
  403ed0:	3c01      	subs	r4, #1
  403ed2:	b224      	sxth	r4, r4
		} while (retry--);
  403ed4:	f1b4 3fff 	cmp.w	r4, #4294967295
  403ed8:	d1ee      	bne.n	403eb8 <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  403eda:	f240 1263 	movw	r2, #355	; 0x163
  403ede:	4916      	ldr	r1, [pc, #88]	; (403f38 <spi_data_read+0xf4>)
  403ee0:	4816      	ldr	r0, [pc, #88]	; (403f3c <spi_data_read+0xf8>)
  403ee2:	4c17      	ldr	r4, [pc, #92]	; (403f40 <spi_data_read+0xfc>)
  403ee4:	47a0      	blx	r4
  403ee6:	f89d 100b 	ldrb.w	r1, [sp, #11]
  403eea:	4819      	ldr	r0, [pc, #100]	; (403f50 <spi_data_read+0x10c>)
  403eec:	47a0      	blx	r4
  403eee:	4816      	ldr	r0, [pc, #88]	; (403f48 <spi_data_read+0x104>)
  403ef0:	47a0      	blx	r4
			break;
  403ef2:	e7bd      	b.n	403e70 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  403ef4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  403ef8:	490f      	ldr	r1, [pc, #60]	; (403f38 <spi_data_read+0xf4>)
  403efa:	4810      	ldr	r0, [pc, #64]	; (403f3c <spi_data_read+0xf8>)
  403efc:	4c10      	ldr	r4, [pc, #64]	; (403f40 <spi_data_read+0xfc>)
  403efe:	47a0      	blx	r4
  403f00:	4814      	ldr	r0, [pc, #80]	; (403f54 <spi_data_read+0x110>)
  403f02:	47a0      	blx	r4
  403f04:	4810      	ldr	r0, [pc, #64]	; (403f48 <spi_data_read+0x104>)
  403f06:	47a0      	blx	r4
			break;
  403f08:	e7b2      	b.n	403e70 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  403f0a:	2102      	movs	r1, #2
  403f0c:	a803      	add	r0, sp, #12
  403f0e:	47a8      	blx	r5
  403f10:	2800      	cmp	r0, #0
  403f12:	d0bf      	beq.n	403e94 <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  403f14:	f240 1277 	movw	r2, #375	; 0x177
  403f18:	4907      	ldr	r1, [pc, #28]	; (403f38 <spi_data_read+0xf4>)
  403f1a:	4808      	ldr	r0, [pc, #32]	; (403f3c <spi_data_read+0xf8>)
  403f1c:	4d08      	ldr	r5, [pc, #32]	; (403f40 <spi_data_read+0xfc>)
  403f1e:	47a8      	blx	r5
  403f20:	480d      	ldr	r0, [pc, #52]	; (403f58 <spi_data_read+0x114>)
  403f22:	47a8      	blx	r5
  403f24:	4808      	ldr	r0, [pc, #32]	; (403f48 <spi_data_read+0x104>)
  403f26:	47a8      	blx	r5
					result = N_FAIL;
  403f28:	9401      	str	r4, [sp, #4]
					break;
  403f2a:	e7a1      	b.n	403e70 <spi_data_read+0x2c>
  403f2c:	2301      	movs	r3, #1
  403f2e:	9301      	str	r3, [sp, #4]
  403f30:	e79e      	b.n	403e70 <spi_data_read+0x2c>
  403f32:	bf00      	nop
  403f34:	00403d61 	.word	0x00403d61
  403f38:	0040d0cc 	.word	0x0040d0cc
  403f3c:	0040cadc 	.word	0x0040cadc
  403f40:	00406611 	.word	0x00406611
  403f44:	0040d534 	.word	0x0040d534
  403f48:	0040cb08 	.word	0x0040cb08
  403f4c:	2040c368 	.word	0x2040c368
  403f50:	0040d568 	.word	0x0040d568
  403f54:	0040d598 	.word	0x0040d598
  403f58:	0040d5cc 	.word	0x0040d5cc

00403f5c <nmi_spi_write>:
{
  403f5c:	b500      	push	{lr}
  403f5e:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  403f60:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  403f62:	2300      	movs	r3, #0
  403f64:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  403f66:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403f6a:	a901      	add	r1, sp, #4
  403f6c:	2003      	movs	r0, #3
  403f6e:	4b02      	ldr	r3, [pc, #8]	; (403f78 <nmi_spi_write+0x1c>)
  403f70:	4798      	blx	r3
}
  403f72:	b005      	add	sp, #20
  403f74:	f85d fb04 	ldr.w	pc, [sp], #4
  403f78:	00402631 	.word	0x00402631

00403f7c <spi_cmd>:
{
  403f7c:	b570      	push	{r4, r5, r6, lr}
  403f7e:	b084      	sub	sp, #16
  403f80:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  403f84:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  403f88:	38c1      	subs	r0, #193	; 0xc1
  403f8a:	280e      	cmp	r0, #14
  403f8c:	f200 80a2 	bhi.w	4040d4 <spi_cmd+0x158>
  403f90:	e8df f000 	tbb	[pc, r0]
  403f94:	19664545 	.word	0x19664545
  403f98:	5454332a 	.word	0x5454332a
  403f9c:	a0a0087f 	.word	0xa0a0087f
  403fa0:	a0a0      	.short	0xa0a0
  403fa2:	3c          	.byte	0x3c
  403fa3:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  403fa4:	0c0b      	lsrs	r3, r1, #16
  403fa6:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403faa:	0a0b      	lsrs	r3, r1, #8
  403fac:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  403fb0:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  403fb4:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  403fb6:	4b55      	ldr	r3, [pc, #340]	; (40410c <spi_cmd+0x190>)
  403fb8:	781b      	ldrb	r3, [r3, #0]
  403fba:	2b00      	cmp	r3, #0
  403fbc:	f000 808c 	beq.w	4040d8 <spi_cmd+0x15c>
			len-=1;
  403fc0:	3901      	subs	r1, #1
  403fc2:	b2c9      	uxtb	r1, r1
  403fc4:	e09a      	b.n	4040fc <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  403fc6:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403fca:	b944      	cbnz	r4, 403fde <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  403fcc:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  403fd0:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  403fd4:	2300      	movs	r3, #0
  403fd6:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403fda:	2105      	movs	r1, #5
		break;
  403fdc:	e7eb      	b.n	403fb6 <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403fde:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403fe2:	f88d 3005 	strb.w	r3, [sp, #5]
  403fe6:	e7f3      	b.n	403fd0 <spi_cmd+0x54>
		bc[1] = 0x00;
  403fe8:	2300      	movs	r3, #0
  403fea:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403fee:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403ff2:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403ff6:	2105      	movs	r1, #5
		break;
  403ff8:	e7dd      	b.n	403fb6 <spi_cmd+0x3a>
		bc[1] = 0x00;
  403ffa:	2300      	movs	r3, #0
  403ffc:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  404000:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  404004:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  404008:	2105      	movs	r1, #5
		break;
  40400a:	e7d4      	b.n	403fb6 <spi_cmd+0x3a>
		bc[1] = 0xff;
  40400c:	23ff      	movs	r3, #255	; 0xff
  40400e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  404012:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  404016:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  40401a:	2105      	movs	r1, #5
		break;
  40401c:	e7cb      	b.n	403fb6 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  40401e:	0c0a      	lsrs	r2, r1, #16
  404020:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404024:	0a0a      	lsrs	r2, r1, #8
  404026:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  40402a:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  40402e:	0a1a      	lsrs	r2, r3, #8
  404030:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  404034:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  404038:	2107      	movs	r1, #7
		break;
  40403a:	e7bc      	b.n	403fb6 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  40403c:	0c0a      	lsrs	r2, r1, #16
  40403e:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404042:	0a0a      	lsrs	r2, r1, #8
  404044:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  404048:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  40404c:	0c1a      	lsrs	r2, r3, #16
  40404e:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  404052:	0a1a      	lsrs	r2, r3, #8
  404054:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  404058:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  40405c:	2108      	movs	r1, #8
		break;
  40405e:	e7aa      	b.n	403fb6 <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  404060:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  404064:	b984      	cbnz	r4, 404088 <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  404066:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  40406a:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  40406e:	0e13      	lsrs	r3, r2, #24
  404070:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  404074:	0c13      	lsrs	r3, r2, #16
  404076:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  40407a:	0a13      	lsrs	r3, r2, #8
  40407c:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  404080:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  404084:	2108      	movs	r1, #8
		break;
  404086:	e796      	b.n	403fb6 <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  404088:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40408c:	f88d 3005 	strb.w	r3, [sp, #5]
  404090:	e7eb      	b.n	40406a <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  404092:	0c0b      	lsrs	r3, r1, #16
  404094:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  404098:	0a0b      	lsrs	r3, r1, #8
  40409a:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  40409e:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  4040a2:	0e13      	lsrs	r3, r2, #24
  4040a4:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  4040a8:	0c13      	lsrs	r3, r2, #16
  4040aa:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  4040ae:	0a13      	lsrs	r3, r2, #8
  4040b0:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  4040b4:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  4040b8:	2109      	movs	r1, #9
		break;
  4040ba:	e77c      	b.n	403fb6 <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  4040bc:	f44f 7284 	mov.w	r2, #264	; 0x108
  4040c0:	4913      	ldr	r1, [pc, #76]	; (404110 <spi_cmd+0x194>)
  4040c2:	4814      	ldr	r0, [pc, #80]	; (404114 <spi_cmd+0x198>)
  4040c4:	4c14      	ldr	r4, [pc, #80]	; (404118 <spi_cmd+0x19c>)
  4040c6:	47a0      	blx	r4
  4040c8:	4814      	ldr	r0, [pc, #80]	; (40411c <spi_cmd+0x1a0>)
  4040ca:	47a0      	blx	r4
  4040cc:	4814      	ldr	r0, [pc, #80]	; (404120 <spi_cmd+0x1a4>)
  4040ce:	47a0      	blx	r4
			result = N_FAIL;
  4040d0:	2000      	movs	r0, #0
  4040d2:	e019      	b.n	404108 <spi_cmd+0x18c>
	switch (cmd) {
  4040d4:	2000      	movs	r0, #0
  4040d6:	e017      	b.n	404108 <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  4040d8:	1e4e      	subs	r6, r1, #1
  4040da:	ab01      	add	r3, sp, #4
  4040dc:	199d      	adds	r5, r3, r6
  4040de:	207f      	movs	r0, #127	; 0x7f
  4040e0:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  4040e2:	4c10      	ldr	r4, [pc, #64]	; (404124 <spi_cmd+0x1a8>)
  4040e4:	f812 3b01 	ldrb.w	r3, [r2], #1
  4040e8:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  4040ec:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  4040ee:	4295      	cmp	r5, r2
  4040f0:	d1f8      	bne.n	4040e4 <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  4040f2:	ab04      	add	r3, sp, #16
  4040f4:	441e      	add	r6, r3
  4040f6:	0043      	lsls	r3, r0, #1
  4040f8:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  4040fc:	a801      	add	r0, sp, #4
  4040fe:	4b0a      	ldr	r3, [pc, #40]	; (404128 <spi_cmd+0x1ac>)
  404100:	4798      	blx	r3
  404102:	2800      	cmp	r0, #0
  404104:	d1da      	bne.n	4040bc <spi_cmd+0x140>
  404106:	2001      	movs	r0, #1
}
  404108:	b004      	add	sp, #16
  40410a:	bd70      	pop	{r4, r5, r6, pc}
  40410c:	2040c368 	.word	0x2040c368
  404110:	0040d0b8 	.word	0x0040d0b8
  404114:	0040cadc 	.word	0x0040cadc
  404118:	00406611 	.word	0x00406611
  40411c:	0040d4d4 	.word	0x0040d4d4
  404120:	0040cb08 	.word	0x0040cb08
  404124:	0040d134 	.word	0x0040d134
  404128:	00403f5d 	.word	0x00403f5d

0040412c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  40412c:	b570      	push	{r4, r5, r6, lr}
  40412e:	b082      	sub	sp, #8
  404130:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  404132:	2831      	cmp	r0, #49	; 0x31
  404134:	bf35      	itete	cc
  404136:	2301      	movcc	r3, #1
  404138:	2300      	movcs	r3, #0
  40413a:	25c3      	movcc	r5, #195	; 0xc3
  40413c:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  40413e:	9300      	str	r3, [sp, #0]
  404140:	2304      	movs	r3, #4
  404142:	460a      	mov	r2, r1
  404144:	4601      	mov	r1, r0
  404146:	4628      	mov	r0, r5
  404148:	4e15      	ldr	r6, [pc, #84]	; (4041a0 <spi_write_reg+0x74>)
  40414a:	47b0      	blx	r6
	if (result != N_OK) {
  40414c:	2801      	cmp	r0, #1
  40414e:	d00d      	beq.n	40416c <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  404150:	f240 12eb 	movw	r2, #491	; 0x1eb
  404154:	4913      	ldr	r1, [pc, #76]	; (4041a4 <spi_write_reg+0x78>)
  404156:	4814      	ldr	r0, [pc, #80]	; (4041a8 <spi_write_reg+0x7c>)
  404158:	4d14      	ldr	r5, [pc, #80]	; (4041ac <spi_write_reg+0x80>)
  40415a:	47a8      	blx	r5
  40415c:	4621      	mov	r1, r4
  40415e:	4814      	ldr	r0, [pc, #80]	; (4041b0 <spi_write_reg+0x84>)
  404160:	47a8      	blx	r5
  404162:	4814      	ldr	r0, [pc, #80]	; (4041b4 <spi_write_reg+0x88>)
  404164:	47a8      	blx	r5
		return N_FAIL;
  404166:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  404168:	b002      	add	sp, #8
  40416a:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  40416c:	4628      	mov	r0, r5
  40416e:	4b12      	ldr	r3, [pc, #72]	; (4041b8 <spi_write_reg+0x8c>)
  404170:	4798      	blx	r3
	if (result != N_OK) {
  404172:	2801      	cmp	r0, #1
  404174:	d0f8      	beq.n	404168 <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  404176:	f240 12f1 	movw	r2, #497	; 0x1f1
  40417a:	490a      	ldr	r1, [pc, #40]	; (4041a4 <spi_write_reg+0x78>)
  40417c:	480a      	ldr	r0, [pc, #40]	; (4041a8 <spi_write_reg+0x7c>)
  40417e:	4d0b      	ldr	r5, [pc, #44]	; (4041ac <spi_write_reg+0x80>)
  404180:	47a8      	blx	r5
  404182:	4621      	mov	r1, r4
  404184:	480d      	ldr	r0, [pc, #52]	; (4041bc <spi_write_reg+0x90>)
  404186:	47a8      	blx	r5
  404188:	480a      	ldr	r0, [pc, #40]	; (4041b4 <spi_write_reg+0x88>)
  40418a:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40418c:	2400      	movs	r4, #0
  40418e:	9400      	str	r4, [sp, #0]
  404190:	4623      	mov	r3, r4
  404192:	4622      	mov	r2, r4
  404194:	4621      	mov	r1, r4
  404196:	20cf      	movs	r0, #207	; 0xcf
  404198:	4d01      	ldr	r5, [pc, #4]	; (4041a0 <spi_write_reg+0x74>)
  40419a:	47a8      	blx	r5
		return N_FAIL;
  40419c:	4620      	mov	r0, r4
  40419e:	e7e3      	b.n	404168 <spi_write_reg+0x3c>
  4041a0:	00403f7d 	.word	0x00403f7d
  4041a4:	0040d0ec 	.word	0x0040d0ec
  4041a8:	0040cadc 	.word	0x0040cadc
  4041ac:	00406611 	.word	0x00406611
  4041b0:	0040d684 	.word	0x0040d684
  4041b4:	0040cb08 	.word	0x0040cb08
  4041b8:	00403d81 	.word	0x00403d81
  4041bc:	0040d6b0 	.word	0x0040d6b0

004041c0 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  4041c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4041c4:	b084      	sub	sp, #16
  4041c6:	4604      	mov	r4, r0
  4041c8:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  4041ca:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  4041ce:	bf35      	itete	cc
  4041d0:	2601      	movcc	r6, #1
  4041d2:	2600      	movcs	r6, #0
  4041d4:	25c4      	movcc	r5, #196	; 0xc4
  4041d6:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  4041d8:	9600      	str	r6, [sp, #0]
  4041da:	2304      	movs	r3, #4
  4041dc:	2200      	movs	r2, #0
  4041de:	4601      	mov	r1, r0
  4041e0:	4628      	mov	r0, r5
  4041e2:	4f2c      	ldr	r7, [pc, #176]	; (404294 <spi_read_reg+0xd4>)
  4041e4:	47b8      	blx	r7
	if (result != N_OK) {
  4041e6:	2801      	cmp	r0, #1
  4041e8:	d00e      	beq.n	404208 <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  4041ea:	f240 2245 	movw	r2, #581	; 0x245
  4041ee:	492a      	ldr	r1, [pc, #168]	; (404298 <spi_read_reg+0xd8>)
  4041f0:	482a      	ldr	r0, [pc, #168]	; (40429c <spi_read_reg+0xdc>)
  4041f2:	4d2b      	ldr	r5, [pc, #172]	; (4042a0 <spi_read_reg+0xe0>)
  4041f4:	47a8      	blx	r5
  4041f6:	4621      	mov	r1, r4
  4041f8:	482a      	ldr	r0, [pc, #168]	; (4042a4 <spi_read_reg+0xe4>)
  4041fa:	47a8      	blx	r5
  4041fc:	482a      	ldr	r0, [pc, #168]	; (4042a8 <spi_read_reg+0xe8>)
  4041fe:	47a8      	blx	r5
		return N_FAIL;
  404200:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  404202:	b004      	add	sp, #16
  404204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  404208:	4628      	mov	r0, r5
  40420a:	4b28      	ldr	r3, [pc, #160]	; (4042ac <spi_read_reg+0xec>)
  40420c:	4798      	blx	r3
	if (result != N_OK) {
  40420e:	2801      	cmp	r0, #1
  404210:	d014      	beq.n	40423c <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  404212:	f240 224b 	movw	r2, #587	; 0x24b
  404216:	4920      	ldr	r1, [pc, #128]	; (404298 <spi_read_reg+0xd8>)
  404218:	4820      	ldr	r0, [pc, #128]	; (40429c <spi_read_reg+0xdc>)
  40421a:	4d21      	ldr	r5, [pc, #132]	; (4042a0 <spi_read_reg+0xe0>)
  40421c:	47a8      	blx	r5
  40421e:	4621      	mov	r1, r4
  404220:	4823      	ldr	r0, [pc, #140]	; (4042b0 <spi_read_reg+0xf0>)
  404222:	47a8      	blx	r5
  404224:	4820      	ldr	r0, [pc, #128]	; (4042a8 <spi_read_reg+0xe8>)
  404226:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404228:	2400      	movs	r4, #0
  40422a:	9400      	str	r4, [sp, #0]
  40422c:	4623      	mov	r3, r4
  40422e:	4622      	mov	r2, r4
  404230:	4621      	mov	r1, r4
  404232:	20cf      	movs	r0, #207	; 0xcf
  404234:	4d17      	ldr	r5, [pc, #92]	; (404294 <spi_read_reg+0xd4>)
  404236:	47a8      	blx	r5
		return N_FAIL;
  404238:	4620      	mov	r0, r4
  40423a:	e7e2      	b.n	404202 <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  40423c:	4632      	mov	r2, r6
  40423e:	2104      	movs	r1, #4
  404240:	a803      	add	r0, sp, #12
  404242:	4b1c      	ldr	r3, [pc, #112]	; (4042b4 <spi_read_reg+0xf4>)
  404244:	4798      	blx	r3
	if (result != N_OK) {
  404246:	2801      	cmp	r0, #1
  404248:	d110      	bne.n	40426c <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  40424a:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  40424e:	f89d 300e 	ldrb.w	r3, [sp, #14]
  404252:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  404254:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  404258:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  40425c:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  40425e:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  404262:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  404266:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  40426a:	e7ca      	b.n	404202 <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  40426c:	f240 2253 	movw	r2, #595	; 0x253
  404270:	4909      	ldr	r1, [pc, #36]	; (404298 <spi_read_reg+0xd8>)
  404272:	480a      	ldr	r0, [pc, #40]	; (40429c <spi_read_reg+0xdc>)
  404274:	4c0a      	ldr	r4, [pc, #40]	; (4042a0 <spi_read_reg+0xe0>)
  404276:	47a0      	blx	r4
  404278:	480f      	ldr	r0, [pc, #60]	; (4042b8 <spi_read_reg+0xf8>)
  40427a:	47a0      	blx	r4
  40427c:	480a      	ldr	r0, [pc, #40]	; (4042a8 <spi_read_reg+0xe8>)
  40427e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404280:	2400      	movs	r4, #0
  404282:	9400      	str	r4, [sp, #0]
  404284:	4623      	mov	r3, r4
  404286:	4622      	mov	r2, r4
  404288:	4621      	mov	r1, r4
  40428a:	20cf      	movs	r0, #207	; 0xcf
  40428c:	4d01      	ldr	r5, [pc, #4]	; (404294 <spi_read_reg+0xd4>)
  40428e:	47a8      	blx	r5
		return N_FAIL;
  404290:	4620      	mov	r0, r4
  404292:	e7b6      	b.n	404202 <spi_read_reg+0x42>
  404294:	00403f7d 	.word	0x00403f7d
  404298:	0040d10c 	.word	0x0040d10c
  40429c:	0040cadc 	.word	0x0040cadc
  4042a0:	00406611 	.word	0x00406611
  4042a4:	0040d604 	.word	0x0040d604
  4042a8:	0040cb08 	.word	0x0040cb08
  4042ac:	00403d81 	.word	0x00403d81
  4042b0:	0040d630 	.word	0x0040d630
  4042b4:	00403e45 	.word	0x00403e45
  4042b8:	0040d664 	.word	0x0040d664

004042bc <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  4042bc:	2000      	movs	r0, #0
  4042be:	4b01      	ldr	r3, [pc, #4]	; (4042c4 <nm_spi_deinit+0x8>)
  4042c0:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  4042c2:	4770      	bx	lr
  4042c4:	2040c368 	.word	0x2040c368

004042c8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  4042c8:	b500      	push	{lr}
  4042ca:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  4042cc:	a901      	add	r1, sp, #4
  4042ce:	4b03      	ldr	r3, [pc, #12]	; (4042dc <nm_spi_read_reg+0x14>)
  4042d0:	4798      	blx	r3

	return u32Val;
}
  4042d2:	9801      	ldr	r0, [sp, #4]
  4042d4:	b003      	add	sp, #12
  4042d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4042da:	bf00      	nop
  4042dc:	004041c1 	.word	0x004041c1

004042e0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4042e0:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  4042e2:	4b04      	ldr	r3, [pc, #16]	; (4042f4 <nm_spi_read_reg_with_ret+0x14>)
  4042e4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4042e6:	2801      	cmp	r0, #1

	return s8Ret;
}
  4042e8:	bf0c      	ite	eq
  4042ea:	2000      	moveq	r0, #0
  4042ec:	f06f 0005 	mvnne.w	r0, #5
  4042f0:	bd08      	pop	{r3, pc}
  4042f2:	bf00      	nop
  4042f4:	004041c1 	.word	0x004041c1

004042f8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4042f8:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  4042fa:	4b04      	ldr	r3, [pc, #16]	; (40430c <nm_spi_write_reg+0x14>)
  4042fc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4042fe:	2801      	cmp	r0, #1

	return s8Ret;
}
  404300:	bf0c      	ite	eq
  404302:	2000      	moveq	r0, #0
  404304:	f06f 0005 	mvnne.w	r0, #5
  404308:	bd08      	pop	{r3, pc}
  40430a:	bf00      	nop
  40430c:	0040412d 	.word	0x0040412d

00404310 <nm_spi_init>:
{
  404310:	b530      	push	{r4, r5, lr}
  404312:	b083      	sub	sp, #12
	uint32 reg =0;
  404314:	2300      	movs	r3, #0
  404316:	a902      	add	r1, sp, #8
  404318:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  40431c:	4a34      	ldr	r2, [pc, #208]	; (4043f0 <nm_spi_init+0xe0>)
  40431e:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  404320:	f64e 0024 	movw	r0, #59428	; 0xe824
  404324:	4b33      	ldr	r3, [pc, #204]	; (4043f4 <nm_spi_init+0xe4>)
  404326:	4798      	blx	r3
  404328:	b348      	cbz	r0, 40437e <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  40432a:	4b31      	ldr	r3, [pc, #196]	; (4043f0 <nm_spi_init+0xe0>)
  40432c:	781b      	ldrb	r3, [r3, #0]
  40432e:	b97b      	cbnz	r3, 404350 <nm_spi_init+0x40>
		reg &= ~0x70;
  404330:	9900      	ldr	r1, [sp, #0]
  404332:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  404336:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  40433a:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  40433c:	f64e 0024 	movw	r0, #59428	; 0xe824
  404340:	4b2d      	ldr	r3, [pc, #180]	; (4043f8 <nm_spi_init+0xe8>)
  404342:	4798      	blx	r3
  404344:	4604      	mov	r4, r0
  404346:	2800      	cmp	r0, #0
  404348:	d039      	beq.n	4043be <nm_spi_init+0xae>
		gu8Crc_off = 1;
  40434a:	2201      	movs	r2, #1
  40434c:	4b28      	ldr	r3, [pc, #160]	; (4043f0 <nm_spi_init+0xe0>)
  40434e:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  404350:	a901      	add	r1, sp, #4
  404352:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  404356:	4b27      	ldr	r3, [pc, #156]	; (4043f4 <nm_spi_init+0xe4>)
  404358:	4798      	blx	r3
  40435a:	2800      	cmp	r0, #0
  40435c:	d03a      	beq.n	4043d4 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  40435e:	f64e 0024 	movw	r0, #59428	; 0xe824
  404362:	4b26      	ldr	r3, [pc, #152]	; (4043fc <nm_spi_init+0xec>)
  404364:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  404366:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  40436a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  40436e:	f64e 0024 	movw	r0, #59428	; 0xe824
  404372:	4b23      	ldr	r3, [pc, #140]	; (404400 <nm_spi_init+0xf0>)
  404374:	4798      	blx	r3
	return M2M_SUCCESS;
  404376:	2400      	movs	r4, #0
}
  404378:	4620      	mov	r0, r4
  40437a:	b003      	add	sp, #12
  40437c:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  40437e:	2201      	movs	r2, #1
  404380:	4b1b      	ldr	r3, [pc, #108]	; (4043f0 <nm_spi_init+0xe0>)
  404382:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  404384:	f240 22c5 	movw	r2, #709	; 0x2c5
  404388:	491e      	ldr	r1, [pc, #120]	; (404404 <nm_spi_init+0xf4>)
  40438a:	481f      	ldr	r0, [pc, #124]	; (404408 <nm_spi_init+0xf8>)
  40438c:	4c1f      	ldr	r4, [pc, #124]	; (40440c <nm_spi_init+0xfc>)
  40438e:	47a0      	blx	r4
  404390:	481f      	ldr	r0, [pc, #124]	; (404410 <nm_spi_init+0x100>)
  404392:	47a0      	blx	r4
  404394:	481f      	ldr	r0, [pc, #124]	; (404414 <nm_spi_init+0x104>)
  404396:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  404398:	4669      	mov	r1, sp
  40439a:	f64e 0024 	movw	r0, #59428	; 0xe824
  40439e:	4b15      	ldr	r3, [pc, #84]	; (4043f4 <nm_spi_init+0xe4>)
  4043a0:	4798      	blx	r3
  4043a2:	4604      	mov	r4, r0
  4043a4:	2800      	cmp	r0, #0
  4043a6:	d1c0      	bne.n	40432a <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  4043a8:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  4043ac:	4915      	ldr	r1, [pc, #84]	; (404404 <nm_spi_init+0xf4>)
  4043ae:	4816      	ldr	r0, [pc, #88]	; (404408 <nm_spi_init+0xf8>)
  4043b0:	4d16      	ldr	r5, [pc, #88]	; (40440c <nm_spi_init+0xfc>)
  4043b2:	47a8      	blx	r5
  4043b4:	4818      	ldr	r0, [pc, #96]	; (404418 <nm_spi_init+0x108>)
  4043b6:	47a8      	blx	r5
  4043b8:	4816      	ldr	r0, [pc, #88]	; (404414 <nm_spi_init+0x104>)
  4043ba:	47a8      	blx	r5
			return 0;
  4043bc:	e7dc      	b.n	404378 <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  4043be:	f240 22d2 	movw	r2, #722	; 0x2d2
  4043c2:	4910      	ldr	r1, [pc, #64]	; (404404 <nm_spi_init+0xf4>)
  4043c4:	4810      	ldr	r0, [pc, #64]	; (404408 <nm_spi_init+0xf8>)
  4043c6:	4d11      	ldr	r5, [pc, #68]	; (40440c <nm_spi_init+0xfc>)
  4043c8:	47a8      	blx	r5
  4043ca:	4814      	ldr	r0, [pc, #80]	; (40441c <nm_spi_init+0x10c>)
  4043cc:	47a8      	blx	r5
  4043ce:	4811      	ldr	r0, [pc, #68]	; (404414 <nm_spi_init+0x104>)
  4043d0:	47a8      	blx	r5
			return 0;
  4043d2:	e7d1      	b.n	404378 <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  4043d4:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  4043d8:	490a      	ldr	r1, [pc, #40]	; (404404 <nm_spi_init+0xf4>)
  4043da:	480b      	ldr	r0, [pc, #44]	; (404408 <nm_spi_init+0xf8>)
  4043dc:	4c0b      	ldr	r4, [pc, #44]	; (40440c <nm_spi_init+0xfc>)
  4043de:	47a0      	blx	r4
  4043e0:	480f      	ldr	r0, [pc, #60]	; (404420 <nm_spi_init+0x110>)
  4043e2:	47a0      	blx	r4
  4043e4:	480b      	ldr	r0, [pc, #44]	; (404414 <nm_spi_init+0x104>)
  4043e6:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  4043e8:	f06f 0405 	mvn.w	r4, #5
  4043ec:	e7c4      	b.n	404378 <nm_spi_init+0x68>
  4043ee:	bf00      	nop
  4043f0:	2040c368 	.word	0x2040c368
  4043f4:	004041c1 	.word	0x004041c1
  4043f8:	0040412d 	.word	0x0040412d
  4043fc:	004042c9 	.word	0x004042c9
  404400:	004042f9 	.word	0x004042f9
  404404:	0040d128 	.word	0x0040d128
  404408:	0040cadc 	.word	0x0040cadc
  40440c:	00406611 	.word	0x00406611
  404410:	0040d234 	.word	0x0040d234
  404414:	0040cb08 	.word	0x0040cb08
  404418:	0040d284 	.word	0x0040d284
  40441c:	0040d2b4 	.word	0x0040d2b4
  404420:	0040d2e8 	.word	0x0040d2e8

00404424 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  404424:	b5f0      	push	{r4, r5, r6, r7, lr}
  404426:	b083      	sub	sp, #12
  404428:	4604      	mov	r4, r0
  40442a:	460f      	mov	r7, r1
  40442c:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  40442e:	2200      	movs	r2, #0
  404430:	9200      	str	r2, [sp, #0]
  404432:	462b      	mov	r3, r5
  404434:	4601      	mov	r1, r0
  404436:	20c8      	movs	r0, #200	; 0xc8
  404438:	4e22      	ldr	r6, [pc, #136]	; (4044c4 <nm_spi_read_block+0xa0>)
  40443a:	47b0      	blx	r6
	if (result != N_OK) {
  40443c:	2801      	cmp	r0, #1
  40443e:	d00e      	beq.n	40445e <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  404440:	f44f 721d 	mov.w	r2, #628	; 0x274
  404444:	4920      	ldr	r1, [pc, #128]	; (4044c8 <nm_spi_read_block+0xa4>)
  404446:	4821      	ldr	r0, [pc, #132]	; (4044cc <nm_spi_read_block+0xa8>)
  404448:	4d21      	ldr	r5, [pc, #132]	; (4044d0 <nm_spi_read_block+0xac>)
  40444a:	47a8      	blx	r5
  40444c:	4621      	mov	r1, r4
  40444e:	4821      	ldr	r0, [pc, #132]	; (4044d4 <nm_spi_read_block+0xb0>)
  404450:	47a8      	blx	r5
  404452:	4821      	ldr	r0, [pc, #132]	; (4044d8 <nm_spi_read_block+0xb4>)
  404454:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  404456:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  40445a:	b003      	add	sp, #12
  40445c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  40445e:	20c8      	movs	r0, #200	; 0xc8
  404460:	4b1e      	ldr	r3, [pc, #120]	; (4044dc <nm_spi_read_block+0xb8>)
  404462:	4798      	blx	r3
	if (result != N_OK) {
  404464:	2801      	cmp	r0, #1
  404466:	d012      	beq.n	40448e <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  404468:	f240 227a 	movw	r2, #634	; 0x27a
  40446c:	4916      	ldr	r1, [pc, #88]	; (4044c8 <nm_spi_read_block+0xa4>)
  40446e:	4817      	ldr	r0, [pc, #92]	; (4044cc <nm_spi_read_block+0xa8>)
  404470:	4d17      	ldr	r5, [pc, #92]	; (4044d0 <nm_spi_read_block+0xac>)
  404472:	47a8      	blx	r5
  404474:	4621      	mov	r1, r4
  404476:	481a      	ldr	r0, [pc, #104]	; (4044e0 <nm_spi_read_block+0xbc>)
  404478:	47a8      	blx	r5
  40447a:	4817      	ldr	r0, [pc, #92]	; (4044d8 <nm_spi_read_block+0xb4>)
  40447c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40447e:	2100      	movs	r1, #0
  404480:	9100      	str	r1, [sp, #0]
  404482:	460b      	mov	r3, r1
  404484:	460a      	mov	r2, r1
  404486:	20cf      	movs	r0, #207	; 0xcf
  404488:	4c0e      	ldr	r4, [pc, #56]	; (4044c4 <nm_spi_read_block+0xa0>)
  40448a:	47a0      	blx	r4
  40448c:	e7e3      	b.n	404456 <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  40448e:	2200      	movs	r2, #0
  404490:	4629      	mov	r1, r5
  404492:	4638      	mov	r0, r7
  404494:	4b13      	ldr	r3, [pc, #76]	; (4044e4 <nm_spi_read_block+0xc0>)
  404496:	4798      	blx	r3
	if (result != N_OK) {
  404498:	2801      	cmp	r0, #1
  40449a:	d011      	beq.n	4044c0 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  40449c:	f44f 7221 	mov.w	r2, #644	; 0x284
  4044a0:	4909      	ldr	r1, [pc, #36]	; (4044c8 <nm_spi_read_block+0xa4>)
  4044a2:	480a      	ldr	r0, [pc, #40]	; (4044cc <nm_spi_read_block+0xa8>)
  4044a4:	4c0a      	ldr	r4, [pc, #40]	; (4044d0 <nm_spi_read_block+0xac>)
  4044a6:	47a0      	blx	r4
  4044a8:	480f      	ldr	r0, [pc, #60]	; (4044e8 <nm_spi_read_block+0xc4>)
  4044aa:	47a0      	blx	r4
  4044ac:	480a      	ldr	r0, [pc, #40]	; (4044d8 <nm_spi_read_block+0xb4>)
  4044ae:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4044b0:	2100      	movs	r1, #0
  4044b2:	9100      	str	r1, [sp, #0]
  4044b4:	460b      	mov	r3, r1
  4044b6:	460a      	mov	r2, r1
  4044b8:	20cf      	movs	r0, #207	; 0xcf
  4044ba:	4c02      	ldr	r4, [pc, #8]	; (4044c4 <nm_spi_read_block+0xa0>)
  4044bc:	47a0      	blx	r4
  4044be:	e7ca      	b.n	404456 <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4044c0:	2000      	movs	r0, #0
  4044c2:	e7ca      	b.n	40445a <nm_spi_read_block+0x36>
  4044c4:	00403f7d 	.word	0x00403f7d
  4044c8:	0040d11c 	.word	0x0040d11c
  4044cc:	0040cadc 	.word	0x0040cadc
  4044d0:	00406611 	.word	0x00406611
  4044d4:	0040d310 	.word	0x0040d310
  4044d8:	0040cb08 	.word	0x0040cb08
  4044dc:	00403d81 	.word	0x00403d81
  4044e0:	0040d340 	.word	0x0040d340
  4044e4:	00403e45 	.word	0x00403e45
  4044e8:	0040d378 	.word	0x0040d378

004044ec <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4044ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4044f0:	b085      	sub	sp, #20
  4044f2:	4604      	mov	r4, r0
  4044f4:	4688      	mov	r8, r1
  4044f6:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  4044f8:	2200      	movs	r2, #0
  4044fa:	9200      	str	r2, [sp, #0]
  4044fc:	462b      	mov	r3, r5
  4044fe:	4601      	mov	r1, r0
  404500:	20c7      	movs	r0, #199	; 0xc7
  404502:	4e4d      	ldr	r6, [pc, #308]	; (404638 <nm_spi_write_block+0x14c>)
  404504:	47b0      	blx	r6
	if (result != N_OK) {
  404506:	2801      	cmp	r0, #1
  404508:	d00f      	beq.n	40452a <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  40450a:	f240 220f 	movw	r2, #527	; 0x20f
  40450e:	494b      	ldr	r1, [pc, #300]	; (40463c <nm_spi_write_block+0x150>)
  404510:	484b      	ldr	r0, [pc, #300]	; (404640 <nm_spi_write_block+0x154>)
  404512:	4d4c      	ldr	r5, [pc, #304]	; (404644 <nm_spi_write_block+0x158>)
  404514:	47a8      	blx	r5
  404516:	4621      	mov	r1, r4
  404518:	484b      	ldr	r0, [pc, #300]	; (404648 <nm_spi_write_block+0x15c>)
  40451a:	47a8      	blx	r5
  40451c:	484b      	ldr	r0, [pc, #300]	; (40464c <nm_spi_write_block+0x160>)
  40451e:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  404520:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  404524:	b005      	add	sp, #20
  404526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  40452a:	20c7      	movs	r0, #199	; 0xc7
  40452c:	4b48      	ldr	r3, [pc, #288]	; (404650 <nm_spi_write_block+0x164>)
  40452e:	4798      	blx	r3
	if (result != N_OK) {
  404530:	2801      	cmp	r0, #1
  404532:	d012      	beq.n	40455a <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  404534:	f240 2215 	movw	r2, #533	; 0x215
  404538:	4940      	ldr	r1, [pc, #256]	; (40463c <nm_spi_write_block+0x150>)
  40453a:	4841      	ldr	r0, [pc, #260]	; (404640 <nm_spi_write_block+0x154>)
  40453c:	4d41      	ldr	r5, [pc, #260]	; (404644 <nm_spi_write_block+0x158>)
  40453e:	47a8      	blx	r5
  404540:	4621      	mov	r1, r4
  404542:	4844      	ldr	r0, [pc, #272]	; (404654 <nm_spi_write_block+0x168>)
  404544:	47a8      	blx	r5
  404546:	4841      	ldr	r0, [pc, #260]	; (40464c <nm_spi_write_block+0x160>)
  404548:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40454a:	2100      	movs	r1, #0
  40454c:	9100      	str	r1, [sp, #0]
  40454e:	460b      	mov	r3, r1
  404550:	460a      	mov	r2, r1
  404552:	20cf      	movs	r0, #207	; 0xcf
  404554:	4c38      	ldr	r4, [pc, #224]	; (404638 <nm_spi_write_block+0x14c>)
  404556:	47a0      	blx	r4
  404558:	e7e2      	b.n	404520 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  40455a:	2400      	movs	r4, #0
  40455c:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  404560:	4f3d      	ldr	r7, [pc, #244]	; (404658 <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  404562:	f8df 910c 	ldr.w	r9, [pc, #268]	; 404670 <nm_spi_write_block+0x184>
  404566:	e01d      	b.n	4045a4 <nm_spi_write_block+0xb8>
				order = 0x2;
  404568:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40456c:	bf94      	ite	ls
  40456e:	2303      	movls	r3, #3
  404570:	2302      	movhi	r3, #2
		cmd |= order;
  404572:	f063 030f 	orn	r3, r3, #15
  404576:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  40457a:	2101      	movs	r1, #1
  40457c:	f10d 000b 	add.w	r0, sp, #11
  404580:	47b8      	blx	r7
  404582:	b9e8      	cbnz	r0, 4045c0 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  404584:	4631      	mov	r1, r6
  404586:	eb08 0004 	add.w	r0, r8, r4
  40458a:	47b8      	blx	r7
  40458c:	2800      	cmp	r0, #0
  40458e:	d135      	bne.n	4045fc <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  404590:	f899 3000 	ldrb.w	r3, [r9]
  404594:	2b00      	cmp	r3, #0
  404596:	d03c      	beq.n	404612 <nm_spi_write_block+0x126>
		ix += nbytes;
  404598:	4434      	add	r4, r6
  40459a:	b224      	sxth	r4, r4
		sz -= nbytes;
  40459c:	1bad      	subs	r5, r5, r6
  40459e:	b2ad      	uxth	r5, r5
	} while (sz);
  4045a0:	2d00      	cmp	r5, #0
  4045a2:	d046      	beq.n	404632 <nm_spi_write_block+0x146>
  4045a4:	462e      	mov	r6, r5
  4045a6:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4045aa:	bf28      	it	cs
  4045ac:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  4045b0:	2c00      	cmp	r4, #0
  4045b2:	d1d9      	bne.n	404568 <nm_spi_write_block+0x7c>
				order = 0x1;
  4045b4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4045b8:	bf94      	ite	ls
  4045ba:	2303      	movls	r3, #3
  4045bc:	2301      	movhi	r3, #1
  4045be:	e7d8      	b.n	404572 <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  4045c0:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4045c4:	4925      	ldr	r1, [pc, #148]	; (40465c <nm_spi_write_block+0x170>)
  4045c6:	481e      	ldr	r0, [pc, #120]	; (404640 <nm_spi_write_block+0x154>)
  4045c8:	4c1e      	ldr	r4, [pc, #120]	; (404644 <nm_spi_write_block+0x158>)
  4045ca:	47a0      	blx	r4
  4045cc:	4824      	ldr	r0, [pc, #144]	; (404660 <nm_spi_write_block+0x174>)
  4045ce:	47a0      	blx	r4
  4045d0:	481e      	ldr	r0, [pc, #120]	; (40464c <nm_spi_write_block+0x160>)
  4045d2:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4045d4:	f240 2226 	movw	r2, #550	; 0x226
  4045d8:	4918      	ldr	r1, [pc, #96]	; (40463c <nm_spi_write_block+0x150>)
  4045da:	4819      	ldr	r0, [pc, #100]	; (404640 <nm_spi_write_block+0x154>)
  4045dc:	4c19      	ldr	r4, [pc, #100]	; (404644 <nm_spi_write_block+0x158>)
  4045de:	47a0      	blx	r4
  4045e0:	4820      	ldr	r0, [pc, #128]	; (404664 <nm_spi_write_block+0x178>)
  4045e2:	47a0      	blx	r4
  4045e4:	4819      	ldr	r0, [pc, #100]	; (40464c <nm_spi_write_block+0x160>)
  4045e6:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4045e8:	2400      	movs	r4, #0
  4045ea:	9400      	str	r4, [sp, #0]
  4045ec:	4623      	mov	r3, r4
  4045ee:	4622      	mov	r2, r4
  4045f0:	4621      	mov	r1, r4
  4045f2:	20cf      	movs	r0, #207	; 0xcf
  4045f4:	4d10      	ldr	r5, [pc, #64]	; (404638 <nm_spi_write_block+0x14c>)
  4045f6:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4045f8:	4620      	mov	r0, r4
  4045fa:	e793      	b.n	404524 <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  4045fc:	f240 12b1 	movw	r2, #433	; 0x1b1
  404600:	4916      	ldr	r1, [pc, #88]	; (40465c <nm_spi_write_block+0x170>)
  404602:	480f      	ldr	r0, [pc, #60]	; (404640 <nm_spi_write_block+0x154>)
  404604:	4c0f      	ldr	r4, [pc, #60]	; (404644 <nm_spi_write_block+0x158>)
  404606:	47a0      	blx	r4
  404608:	4817      	ldr	r0, [pc, #92]	; (404668 <nm_spi_write_block+0x17c>)
  40460a:	47a0      	blx	r4
  40460c:	480f      	ldr	r0, [pc, #60]	; (40464c <nm_spi_write_block+0x160>)
  40460e:	47a0      	blx	r4
  404610:	e7e0      	b.n	4045d4 <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  404612:	2102      	movs	r1, #2
  404614:	a803      	add	r0, sp, #12
  404616:	47b8      	blx	r7
  404618:	2800      	cmp	r0, #0
  40461a:	d0bd      	beq.n	404598 <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  40461c:	f240 12bb 	movw	r2, #443	; 0x1bb
  404620:	490e      	ldr	r1, [pc, #56]	; (40465c <nm_spi_write_block+0x170>)
  404622:	4807      	ldr	r0, [pc, #28]	; (404640 <nm_spi_write_block+0x154>)
  404624:	4c07      	ldr	r4, [pc, #28]	; (404644 <nm_spi_write_block+0x158>)
  404626:	47a0      	blx	r4
  404628:	4810      	ldr	r0, [pc, #64]	; (40466c <nm_spi_write_block+0x180>)
  40462a:	47a0      	blx	r4
  40462c:	4807      	ldr	r0, [pc, #28]	; (40464c <nm_spi_write_block+0x160>)
  40462e:	47a0      	blx	r4
  404630:	e7d0      	b.n	4045d4 <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  404632:	2000      	movs	r0, #0
  404634:	e776      	b.n	404524 <nm_spi_write_block+0x38>
  404636:	bf00      	nop
  404638:	00403f7d 	.word	0x00403f7d
  40463c:	0040d0fc 	.word	0x0040d0fc
  404640:	0040cadc 	.word	0x0040cadc
  404644:	00406611 	.word	0x00406611
  404648:	0040d3a0 	.word	0x0040d3a0
  40464c:	0040cb08 	.word	0x0040cb08
  404650:	00403d81 	.word	0x00403d81
  404654:	0040d3d0 	.word	0x0040d3d0
  404658:	00403f5d 	.word	0x00403f5d
  40465c:	0040d0dc 	.word	0x0040d0dc
  404660:	0040d408 	.word	0x0040d408
  404664:	0040d4ac 	.word	0x0040d4ac
  404668:	0040d440 	.word	0x0040d440
  40466c:	0040d474 	.word	0x0040d474
  404670:	2040c368 	.word	0x2040c368

00404674 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  404674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404678:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  40467c:	b194      	cbz	r4, 4046a4 <Socket_ReadSocketData+0x30>
  40467e:	4681      	mov	r9, r0
  404680:	460e      	mov	r6, r1
  404682:	4692      	mov	sl, r2
  404684:	4698      	mov	r8, r3
  404686:	0103      	lsls	r3, r0, #4
  404688:	4922      	ldr	r1, [pc, #136]	; (404714 <Socket_ReadSocketData+0xa0>)
  40468a:	58cb      	ldr	r3, [r1, r3]
  40468c:	b153      	cbz	r3, 4046a4 <Socket_ReadSocketData+0x30>
  40468e:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  404692:	889b      	ldrh	r3, [r3, #4]
  404694:	b29b      	uxth	r3, r3
  404696:	b12b      	cbz	r3, 4046a4 <Socket_ReadSocketData+0x30>
  404698:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40469c:	7a9b      	ldrb	r3, [r3, #10]
  40469e:	b2db      	uxtb	r3, r3
  4046a0:	2b01      	cmp	r3, #1
  4046a2:	d001      	beq.n	4046a8 <Socket_ReadSocketData+0x34>
  4046a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  4046a8:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4046aa:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4046ae:	f8df b07c 	ldr.w	fp, [pc, #124]	; 40472c <Socket_ReadSocketData+0xb8>
  4046b2:	e006      	b.n	4046c2 <Socket_ReadSocketData+0x4e>
  4046b4:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  4046b6:	2301      	movs	r3, #1
  4046b8:	e00b      	b.n	4046d2 <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  4046ba:	1b64      	subs	r4, r4, r5
  4046bc:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4046be:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  4046c0:	b1ec      	cbz	r4, 4046fe <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4046c2:	88bb      	ldrh	r3, [r7, #4]
  4046c4:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  4046c6:	b21b      	sxth	r3, r3
  4046c8:	2b00      	cmp	r3, #0
  4046ca:	ddf3      	ble.n	4046b4 <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4046cc:	88bd      	ldrh	r5, [r7, #4]
  4046ce:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  4046d0:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4046d2:	6839      	ldr	r1, [r7, #0]
  4046d4:	462a      	mov	r2, r5
  4046d6:	4640      	mov	r0, r8
  4046d8:	47d8      	blx	fp
  4046da:	b990      	cbnz	r0, 404702 <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4046dc:	683b      	ldr	r3, [r7, #0]
  4046de:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4046e0:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  4046e2:	88f3      	ldrh	r3, [r6, #6]
  4046e4:	1b5b      	subs	r3, r3, r5
  4046e6:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  4046e8:	4b0b      	ldr	r3, [pc, #44]	; (404718 <Socket_ReadSocketData+0xa4>)
  4046ea:	681b      	ldr	r3, [r3, #0]
  4046ec:	2b00      	cmp	r3, #0
  4046ee:	d0e4      	beq.n	4046ba <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  4046f0:	4b09      	ldr	r3, [pc, #36]	; (404718 <Socket_ReadSocketData+0xa4>)
  4046f2:	681b      	ldr	r3, [r3, #0]
  4046f4:	4632      	mov	r2, r6
  4046f6:	4651      	mov	r1, sl
  4046f8:	4648      	mov	r0, r9
  4046fa:	4798      	blx	r3
  4046fc:	e7dd      	b.n	4046ba <Socket_ReadSocketData+0x46>
  4046fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  404702:	4806      	ldr	r0, [pc, #24]	; (40471c <Socket_ReadSocketData+0xa8>)
  404704:	4d06      	ldr	r5, [pc, #24]	; (404720 <Socket_ReadSocketData+0xac>)
  404706:	47a8      	blx	r5
  404708:	4621      	mov	r1, r4
  40470a:	4806      	ldr	r0, [pc, #24]	; (404724 <Socket_ReadSocketData+0xb0>)
  40470c:	47a8      	blx	r5
  40470e:	4806      	ldr	r0, [pc, #24]	; (404728 <Socket_ReadSocketData+0xb4>)
  404710:	47a8      	blx	r5
	}
}
  404712:	e7c7      	b.n	4046a4 <Socket_ReadSocketData+0x30>
  404714:	2040ca70 	.word	0x2040ca70
  404718:	2040cb20 	.word	0x2040cb20
  40471c:	0040cdb0 	.word	0x0040cdb0
  404720:	00406611 	.word	0x00406611
  404724:	0040d6e8 	.word	0x0040d6e8
  404728:	0040cb08 	.word	0x0040cb08
  40472c:	00402dad 	.word	0x00402dad

00404730 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  404730:	b5f0      	push	{r4, r5, r6, r7, lr}
  404732:	b099      	sub	sp, #100	; 0x64
  404734:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  404736:	2841      	cmp	r0, #65	; 0x41
  404738:	d049      	beq.n	4047ce <m2m_ip_cb+0x9e>
  40473a:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  40473c:	2842      	cmp	r0, #66	; 0x42
  40473e:	d05f      	beq.n	404800 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  404740:	2843      	cmp	r0, #67	; 0x43
  404742:	d075      	beq.n	404830 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  404744:	2844      	cmp	r0, #68	; 0x44
  404746:	f000 80b0 	beq.w	4048aa <m2m_ip_cb+0x17a>
  40474a:	284b      	cmp	r0, #75	; 0x4b
  40474c:	f000 80ad 	beq.w	4048aa <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  404750:	284a      	cmp	r0, #74	; 0x4a
  404752:	f000 80cc 	beq.w	4048ee <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  404756:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  40475a:	b2db      	uxtb	r3, r3
  40475c:	2b07      	cmp	r3, #7
  40475e:	f200 80f4 	bhi.w	40494a <m2m_ip_cb+0x21a>
  404762:	2285      	movs	r2, #133	; 0x85
  404764:	fa22 f303 	lsr.w	r3, r2, r3
  404768:	f013 0f01 	tst.w	r3, #1
  40476c:	f000 80ed 	beq.w	40494a <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  404770:	2848      	cmp	r0, #72	; 0x48
  404772:	bf14      	ite	ne
  404774:	2706      	movne	r7, #6
  404776:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  404778:	2300      	movs	r3, #0
  40477a:	2210      	movs	r2, #16
  40477c:	a903      	add	r1, sp, #12
  40477e:	4620      	mov	r0, r4
  404780:	4e93      	ldr	r6, [pc, #588]	; (4049d0 <m2m_ip_cb+0x2a0>)
  404782:	47b0      	blx	r6
  404784:	2800      	cmp	r0, #0
  404786:	f040 80b0 	bne.w	4048ea <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  40478a:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  40478e:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  404792:	4a90      	ldr	r2, [pc, #576]	; (4049d4 <m2m_ip_cb+0x2a4>)
  404794:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404798:	2300      	movs	r3, #0
  40479a:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  40479c:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  4047a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  4047a4:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  4047a8:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  4047ac:	9e04      	ldr	r6, [sp, #16]
  4047ae:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4047b0:	88d2      	ldrh	r2, [r2, #6]
  4047b2:	b292      	uxth	r2, r2
  4047b4:	4291      	cmp	r1, r2
  4047b6:	f000 80ac 	beq.w	404912 <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4047ba:	2d10      	cmp	r5, #16
  4047bc:	f240 8095 	bls.w	4048ea <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  4047c0:	2301      	movs	r3, #1
  4047c2:	2200      	movs	r2, #0
  4047c4:	4611      	mov	r1, r2
  4047c6:	4610      	mov	r0, r2
  4047c8:	4c81      	ldr	r4, [pc, #516]	; (4049d0 <m2m_ip_cb+0x2a0>)
  4047ca:	47a0      	blx	r4
	{
  4047cc:	e08d      	b.n	4048ea <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4047ce:	2300      	movs	r3, #0
  4047d0:	2204      	movs	r2, #4
  4047d2:	a907      	add	r1, sp, #28
  4047d4:	4620      	mov	r0, r4
  4047d6:	4c7e      	ldr	r4, [pc, #504]	; (4049d0 <m2m_ip_cb+0x2a0>)
  4047d8:	47a0      	blx	r4
  4047da:	2800      	cmp	r0, #0
  4047dc:	f040 8085 	bne.w	4048ea <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  4047e0:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4047e4:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4047e8:	4b7b      	ldr	r3, [pc, #492]	; (4049d8 <m2m_ip_cb+0x2a8>)
  4047ea:	681b      	ldr	r3, [r3, #0]
  4047ec:	2b00      	cmp	r3, #0
  4047ee:	d07c      	beq.n	4048ea <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  4047f0:	4b79      	ldr	r3, [pc, #484]	; (4049d8 <m2m_ip_cb+0x2a8>)
  4047f2:	681b      	ldr	r3, [r3, #0]
  4047f4:	aa03      	add	r2, sp, #12
  4047f6:	2101      	movs	r1, #1
  4047f8:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4047fc:	4798      	blx	r3
  4047fe:	e074      	b.n	4048ea <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  404800:	2300      	movs	r3, #0
  404802:	2204      	movs	r2, #4
  404804:	a907      	add	r1, sp, #28
  404806:	4620      	mov	r0, r4
  404808:	4c71      	ldr	r4, [pc, #452]	; (4049d0 <m2m_ip_cb+0x2a0>)
  40480a:	47a0      	blx	r4
  40480c:	2800      	cmp	r0, #0
  40480e:	d16c      	bne.n	4048ea <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  404810:	f89d 301d 	ldrb.w	r3, [sp, #29]
  404814:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  404818:	4b6f      	ldr	r3, [pc, #444]	; (4049d8 <m2m_ip_cb+0x2a8>)
  40481a:	681b      	ldr	r3, [r3, #0]
  40481c:	2b00      	cmp	r3, #0
  40481e:	d064      	beq.n	4048ea <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  404820:	4b6d      	ldr	r3, [pc, #436]	; (4049d8 <m2m_ip_cb+0x2a8>)
  404822:	681b      	ldr	r3, [r3, #0]
  404824:	aa03      	add	r2, sp, #12
  404826:	2102      	movs	r1, #2
  404828:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  40482c:	4798      	blx	r3
  40482e:	e05c      	b.n	4048ea <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  404830:	2300      	movs	r3, #0
  404832:	220c      	movs	r2, #12
  404834:	eb0d 0102 	add.w	r1, sp, r2
  404838:	4620      	mov	r0, r4
  40483a:	4c65      	ldr	r4, [pc, #404]	; (4049d0 <m2m_ip_cb+0x2a0>)
  40483c:	47a0      	blx	r4
  40483e:	2800      	cmp	r0, #0
  404840:	d153      	bne.n	4048ea <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  404842:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  404846:	2b00      	cmp	r3, #0
  404848:	db19      	blt.n	40487e <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  40484a:	4a62      	ldr	r2, [pc, #392]	; (4049d4 <m2m_ip_cb+0x2a4>)
  40484c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404850:	2100      	movs	r1, #0
  404852:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  404854:	2101      	movs	r1, #1
  404856:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  404858:	4960      	ldr	r1, [pc, #384]	; (4049dc <m2m_ip_cb+0x2ac>)
  40485a:	880a      	ldrh	r2, [r1, #0]
  40485c:	3201      	adds	r2, #1
  40485e:	b292      	uxth	r2, r2
  404860:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  404862:	880a      	ldrh	r2, [r1, #0]
  404864:	b292      	uxth	r2, r2
  404866:	b91a      	cbnz	r2, 404870 <m2m_ip_cb+0x140>
					++gu16SessionID;
  404868:	880a      	ldrh	r2, [r1, #0]
  40486a:	3201      	adds	r2, #1
  40486c:	b292      	uxth	r2, r2
  40486e:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  404870:	4a5a      	ldr	r2, [pc, #360]	; (4049dc <m2m_ip_cb+0x2ac>)
  404872:	8811      	ldrh	r1, [r2, #0]
  404874:	b289      	uxth	r1, r1
  404876:	4a57      	ldr	r2, [pc, #348]	; (4049d4 <m2m_ip_cb+0x2a4>)
  404878:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  40487c:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  40487e:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  404882:	2302      	movs	r3, #2
  404884:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  404888:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  40488c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  404890:	9b04      	ldr	r3, [sp, #16]
  404892:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  404894:	4b50      	ldr	r3, [pc, #320]	; (4049d8 <m2m_ip_cb+0x2a8>)
  404896:	681b      	ldr	r3, [r3, #0]
  404898:	b33b      	cbz	r3, 4048ea <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  40489a:	4b4f      	ldr	r3, [pc, #316]	; (4049d8 <m2m_ip_cb+0x2a8>)
  40489c:	681b      	ldr	r3, [r3, #0]
  40489e:	aa07      	add	r2, sp, #28
  4048a0:	2104      	movs	r1, #4
  4048a2:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  4048a6:	4798      	blx	r3
  4048a8:	e01f      	b.n	4048ea <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  4048aa:	2300      	movs	r3, #0
  4048ac:	2204      	movs	r2, #4
  4048ae:	a907      	add	r1, sp, #28
  4048b0:	4620      	mov	r0, r4
  4048b2:	4c47      	ldr	r4, [pc, #284]	; (4049d0 <m2m_ip_cb+0x2a0>)
  4048b4:	47a0      	blx	r4
  4048b6:	b9c0      	cbnz	r0, 4048ea <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  4048b8:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4048bc:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4048c0:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4048c4:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4048c8:	b93b      	cbnz	r3, 4048da <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4048ca:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4048ce:	3b08      	subs	r3, #8
  4048d0:	b29b      	uxth	r3, r3
  4048d2:	4a40      	ldr	r2, [pc, #256]	; (4049d4 <m2m_ip_cb+0x2a4>)
  4048d4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4048d8:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  4048da:	4b3f      	ldr	r3, [pc, #252]	; (4049d8 <m2m_ip_cb+0x2a8>)
  4048dc:	681b      	ldr	r3, [r3, #0]
  4048de:	b123      	cbz	r3, 4048ea <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  4048e0:	4b3d      	ldr	r3, [pc, #244]	; (4049d8 <m2m_ip_cb+0x2a8>)
  4048e2:	681b      	ldr	r3, [r3, #0]
  4048e4:	aa03      	add	r2, sp, #12
  4048e6:	2105      	movs	r1, #5
  4048e8:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  4048ea:	b019      	add	sp, #100	; 0x64
  4048ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  4048ee:	2300      	movs	r3, #0
  4048f0:	2244      	movs	r2, #68	; 0x44
  4048f2:	a907      	add	r1, sp, #28
  4048f4:	4620      	mov	r0, r4
  4048f6:	4c36      	ldr	r4, [pc, #216]	; (4049d0 <m2m_ip_cb+0x2a0>)
  4048f8:	47a0      	blx	r4
  4048fa:	2800      	cmp	r0, #0
  4048fc:	d1f5      	bne.n	4048ea <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  4048fe:	4b38      	ldr	r3, [pc, #224]	; (4049e0 <m2m_ip_cb+0x2b0>)
  404900:	681b      	ldr	r3, [r3, #0]
  404902:	2b00      	cmp	r3, #0
  404904:	d0f1      	beq.n	4048ea <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  404906:	4b36      	ldr	r3, [pc, #216]	; (4049e0 <m2m_ip_cb+0x2b0>)
  404908:	681b      	ldr	r3, [r3, #0]
  40490a:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40490c:	a807      	add	r0, sp, #28
  40490e:	4798      	blx	r3
  404910:	e7eb      	b.n	4048ea <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  404912:	f1be 0f00 	cmp.w	lr, #0
  404916:	dd01      	ble.n	40491c <m2m_ip_cb+0x1ec>
  404918:	45ae      	cmp	lr, r5
  40491a:	db0d      	blt.n	404938 <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  40491c:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  404920:	2300      	movs	r3, #0
  404922:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  404924:	4b2c      	ldr	r3, [pc, #176]	; (4049d8 <m2m_ip_cb+0x2a8>)
  404926:	681b      	ldr	r3, [r3, #0]
  404928:	2b00      	cmp	r3, #0
  40492a:	d0de      	beq.n	4048ea <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  40492c:	4b2a      	ldr	r3, [pc, #168]	; (4049d8 <m2m_ip_cb+0x2a8>)
  40492e:	681b      	ldr	r3, [r3, #0]
  404930:	aa07      	add	r2, sp, #28
  404932:	4639      	mov	r1, r7
  404934:	4798      	blx	r3
  404936:	e7d8      	b.n	4048ea <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  404938:	fa1f f28e 	uxth.w	r2, lr
  40493c:	9200      	str	r2, [sp, #0]
  40493e:	4423      	add	r3, r4
  404940:	463a      	mov	r2, r7
  404942:	a907      	add	r1, sp, #28
  404944:	4c27      	ldr	r4, [pc, #156]	; (4049e4 <m2m_ip_cb+0x2b4>)
  404946:	47a0      	blx	r4
  404948:	e7cf      	b.n	4048ea <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  40494a:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  40494e:	2b45      	cmp	r3, #69	; 0x45
  404950:	d019      	beq.n	404986 <m2m_ip_cb+0x256>
  404952:	284c      	cmp	r0, #76	; 0x4c
  404954:	d017      	beq.n	404986 <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  404956:	2852      	cmp	r0, #82	; 0x52
  404958:	d1c7      	bne.n	4048ea <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  40495a:	2301      	movs	r3, #1
  40495c:	2214      	movs	r2, #20
  40495e:	a907      	add	r1, sp, #28
  404960:	4620      	mov	r0, r4
  404962:	4c1b      	ldr	r4, [pc, #108]	; (4049d0 <m2m_ip_cb+0x2a0>)
  404964:	47a0      	blx	r4
  404966:	2800      	cmp	r0, #0
  404968:	d1bf      	bne.n	4048ea <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  40496a:	4b1f      	ldr	r3, [pc, #124]	; (4049e8 <m2m_ip_cb+0x2b8>)
  40496c:	9a08      	ldr	r2, [sp, #32]
  40496e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  404970:	681b      	ldr	r3, [r3, #0]
  404972:	2b00      	cmp	r3, #0
  404974:	d0b9      	beq.n	4048ea <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  404976:	4b1c      	ldr	r3, [pc, #112]	; (4049e8 <m2m_ip_cb+0x2b8>)
  404978:	681b      	ldr	r3, [r3, #0]
  40497a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  40497e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404980:	9807      	ldr	r0, [sp, #28]
  404982:	4798      	blx	r3
}
  404984:	e7b1      	b.n	4048ea <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  404986:	2847      	cmp	r0, #71	; 0x47
  404988:	bf14      	ite	ne
  40498a:	2507      	movne	r5, #7
  40498c:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  40498e:	2300      	movs	r3, #0
  404990:	2208      	movs	r2, #8
  404992:	a907      	add	r1, sp, #28
  404994:	4620      	mov	r0, r4
  404996:	4c0e      	ldr	r4, [pc, #56]	; (4049d0 <m2m_ip_cb+0x2a0>)
  404998:	47a0      	blx	r4
  40499a:	2800      	cmp	r0, #0
  40499c:	d1a5      	bne.n	4048ea <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  40499e:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  4049a2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  4049a6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4049aa:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4049ae:	4b09      	ldr	r3, [pc, #36]	; (4049d4 <m2m_ip_cb+0x2a4>)
  4049b0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4049b4:	88db      	ldrh	r3, [r3, #6]
  4049b6:	b29b      	uxth	r3, r3
  4049b8:	429a      	cmp	r2, r3
  4049ba:	d196      	bne.n	4048ea <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  4049bc:	4b06      	ldr	r3, [pc, #24]	; (4049d8 <m2m_ip_cb+0x2a8>)
  4049be:	681b      	ldr	r3, [r3, #0]
  4049c0:	2b00      	cmp	r3, #0
  4049c2:	d092      	beq.n	4048ea <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  4049c4:	4b04      	ldr	r3, [pc, #16]	; (4049d8 <m2m_ip_cb+0x2a8>)
  4049c6:	681b      	ldr	r3, [r3, #0]
  4049c8:	aa03      	add	r2, sp, #12
  4049ca:	4629      	mov	r1, r5
  4049cc:	4798      	blx	r3
	{
  4049ce:	e78c      	b.n	4048ea <m2m_ip_cb+0x1ba>
  4049d0:	00402dad 	.word	0x00402dad
  4049d4:	2040ca70 	.word	0x2040ca70
  4049d8:	2040cb20 	.word	0x2040cb20
  4049dc:	2040c36a 	.word	0x2040c36a
  4049e0:	2040cb28 	.word	0x2040cb28
  4049e4:	00404675 	.word	0x00404675
  4049e8:	2040cb24 	.word	0x2040cb24

004049ec <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  4049ec:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  4049ee:	4b0a      	ldr	r3, [pc, #40]	; (404a18 <socketInit+0x2c>)
  4049f0:	781b      	ldrb	r3, [r3, #0]
  4049f2:	b103      	cbz	r3, 4049f6 <socketInit+0xa>
  4049f4:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4049f6:	22b0      	movs	r2, #176	; 0xb0
  4049f8:	2100      	movs	r1, #0
  4049fa:	4808      	ldr	r0, [pc, #32]	; (404a1c <socketInit+0x30>)
  4049fc:	4b08      	ldr	r3, [pc, #32]	; (404a20 <socketInit+0x34>)
  4049fe:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  404a00:	4908      	ldr	r1, [pc, #32]	; (404a24 <socketInit+0x38>)
  404a02:	2002      	movs	r0, #2
  404a04:	4b08      	ldr	r3, [pc, #32]	; (404a28 <socketInit+0x3c>)
  404a06:	4798      	blx	r3
		gbSocketInit=1;
  404a08:	2201      	movs	r2, #1
  404a0a:	4b03      	ldr	r3, [pc, #12]	; (404a18 <socketInit+0x2c>)
  404a0c:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  404a0e:	2200      	movs	r2, #0
  404a10:	4b06      	ldr	r3, [pc, #24]	; (404a2c <socketInit+0x40>)
  404a12:	801a      	strh	r2, [r3, #0]
	}
}
  404a14:	e7ee      	b.n	4049f4 <socketInit+0x8>
  404a16:	bf00      	nop
  404a18:	2040c369 	.word	0x2040c369
  404a1c:	2040ca70 	.word	0x2040ca70
  404a20:	00402759 	.word	0x00402759
  404a24:	00404731 	.word	0x00404731
  404a28:	00402ec1 	.word	0x00402ec1
  404a2c:	2040c36a 	.word	0x2040c36a

00404a30 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  404a30:	4b02      	ldr	r3, [pc, #8]	; (404a3c <registerSocketCallback+0xc>)
  404a32:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  404a34:	4b02      	ldr	r3, [pc, #8]	; (404a40 <registerSocketCallback+0x10>)
  404a36:	6019      	str	r1, [r3, #0]
  404a38:	4770      	bx	lr
  404a3a:	bf00      	nop
  404a3c:	2040cb20 	.word	0x2040cb20
  404a40:	2040cb28 	.word	0x2040cb28

00404a44 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  404a44:	b5f0      	push	{r4, r5, r6, r7, lr}
  404a46:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  404a48:	2802      	cmp	r0, #2
  404a4a:	d158      	bne.n	404afe <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  404a4c:	2901      	cmp	r1, #1
  404a4e:	d059      	beq.n	404b04 <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  404a50:	2902      	cmp	r1, #2
  404a52:	d116      	bne.n	404a82 <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  404a54:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  404a56:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  404a58:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  404a5a:	4b2e      	ldr	r3, [pc, #184]	; (404b14 <socket+0xd0>)
  404a5c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404a60:	7a9b      	ldrb	r3, [r3, #10]
  404a62:	2b00      	cmp	r3, #0
  404a64:	d051      	beq.n	404b0a <socket+0xc6>
  404a66:	1c63      	adds	r3, r4, #1
  404a68:	b2db      	uxtb	r3, r3
  404a6a:	4f2a      	ldr	r7, [pc, #168]	; (404b14 <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  404a6c:	b2dc      	uxtb	r4, r3
  404a6e:	42b4      	cmp	r4, r6
  404a70:	d240      	bcs.n	404af4 <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  404a72:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  404a74:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  404a78:	7a89      	ldrb	r1, [r1, #10]
  404a7a:	1c58      	adds	r0, r3, #1
  404a7c:	b121      	cbz	r1, 404a88 <socket+0x44>
  404a7e:	4603      	mov	r3, r0
  404a80:	e7f4      	b.n	404a6c <socket+0x28>
			return sock;
  404a82:	f04f 34ff 	mov.w	r4, #4294967295
  404a86:	e037      	b.n	404af8 <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  404a88:	4822      	ldr	r0, [pc, #136]	; (404b14 <socket+0xd0>)
  404a8a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  404a8e:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  404a90:	2210      	movs	r2, #16
  404a92:	2100      	movs	r1, #0
  404a94:	4b20      	ldr	r3, [pc, #128]	; (404b18 <socket+0xd4>)
  404a96:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  404a98:	4b1e      	ldr	r3, [pc, #120]	; (404b14 <socket+0xd0>)
  404a9a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  404a9e:	2201      	movs	r2, #1
  404aa0:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  404aa2:	4a1e      	ldr	r2, [pc, #120]	; (404b1c <socket+0xd8>)
  404aa4:	8813      	ldrh	r3, [r2, #0]
  404aa6:	3301      	adds	r3, #1
  404aa8:	b29b      	uxth	r3, r3
  404aaa:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  404aac:	8813      	ldrh	r3, [r2, #0]
  404aae:	b29b      	uxth	r3, r3
  404ab0:	b91b      	cbnz	r3, 404aba <socket+0x76>
					++gu16SessionID;
  404ab2:	8813      	ldrh	r3, [r2, #0]
  404ab4:	3301      	adds	r3, #1
  404ab6:	b29b      	uxth	r3, r3
  404ab8:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  404aba:	4b18      	ldr	r3, [pc, #96]	; (404b1c <socket+0xd8>)
  404abc:	881a      	ldrh	r2, [r3, #0]
  404abe:	b292      	uxth	r2, r2
  404ac0:	4b14      	ldr	r3, [pc, #80]	; (404b14 <socket+0xd0>)
  404ac2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  404ac6:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  404ac8:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  404aca:	f016 0f01 	tst.w	r6, #1
  404ace:	d013      	beq.n	404af8 <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  404ad0:	aa06      	add	r2, sp, #24
  404ad2:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  404ad6:	4b0f      	ldr	r3, [pc, #60]	; (404b14 <socket+0xd0>)
  404ad8:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  404adc:	2321      	movs	r3, #33	; 0x21
  404ade:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  404ae0:	2300      	movs	r3, #0
  404ae2:	9302      	str	r3, [sp, #8]
  404ae4:	9301      	str	r3, [sp, #4]
  404ae6:	9300      	str	r3, [sp, #0]
  404ae8:	2304      	movs	r3, #4
  404aea:	2150      	movs	r1, #80	; 0x50
  404aec:	2002      	movs	r0, #2
  404aee:	4d0c      	ldr	r5, [pc, #48]	; (404b20 <socket+0xdc>)
  404af0:	47a8      	blx	r5
  404af2:	e001      	b.n	404af8 <socket+0xb4>
	SOCKET		sock = -1;
  404af4:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  404af8:	4620      	mov	r0, r4
  404afa:	b007      	add	sp, #28
  404afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  404afe:	f04f 34ff 	mov.w	r4, #4294967295
  404b02:	e7f9      	b.n	404af8 <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  404b04:	2607      	movs	r6, #7
			u8Count = 0;
  404b06:	2400      	movs	r4, #0
  404b08:	e7a6      	b.n	404a58 <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  404b0a:	4802      	ldr	r0, [pc, #8]	; (404b14 <socket+0xd0>)
  404b0c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404b10:	e7bd      	b.n	404a8e <socket+0x4a>
  404b12:	bf00      	nop
  404b14:	2040ca70 	.word	0x2040ca70
  404b18:	00402759 	.word	0x00402759
  404b1c:	2040c36a 	.word	0x2040c36a
  404b20:	004028bd 	.word	0x004028bd

00404b24 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  404b24:	b530      	push	{r4, r5, lr}
  404b26:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  404b28:	1e04      	subs	r4, r0, #0
  404b2a:	db36      	blt.n	404b9a <connect+0x76>
  404b2c:	2900      	cmp	r1, #0
  404b2e:	d034      	beq.n	404b9a <connect+0x76>
  404b30:	4b1d      	ldr	r3, [pc, #116]	; (404ba8 <connect+0x84>)
  404b32:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404b36:	7a9b      	ldrb	r3, [r3, #10]
  404b38:	b2db      	uxtb	r3, r3
  404b3a:	2a00      	cmp	r2, #0
  404b3c:	d030      	beq.n	404ba0 <connect+0x7c>
  404b3e:	2b01      	cmp	r3, #1
  404b40:	d12e      	bne.n	404ba0 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  404b42:	4b19      	ldr	r3, [pc, #100]	; (404ba8 <connect+0x84>)
  404b44:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404b48:	7adb      	ldrb	r3, [r3, #11]
  404b4a:	f013 0f01 	tst.w	r3, #1
  404b4e:	d022      	beq.n	404b96 <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  404b50:	4b15      	ldr	r3, [pc, #84]	; (404ba8 <connect+0x84>)
  404b52:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404b56:	7adb      	ldrb	r3, [r3, #11]
  404b58:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  404b5c:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  404b5e:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  404b62:	2208      	movs	r2, #8
  404b64:	a805      	add	r0, sp, #20
  404b66:	4b11      	ldr	r3, [pc, #68]	; (404bac <connect+0x88>)
  404b68:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  404b6a:	480f      	ldr	r0, [pc, #60]	; (404ba8 <connect+0x84>)
  404b6c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404b70:	88c3      	ldrh	r3, [r0, #6]
  404b72:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  404b76:	2300      	movs	r3, #0
  404b78:	9302      	str	r3, [sp, #8]
  404b7a:	9301      	str	r3, [sp, #4]
  404b7c:	9300      	str	r3, [sp, #0]
  404b7e:	230c      	movs	r3, #12
  404b80:	aa05      	add	r2, sp, #20
  404b82:	4629      	mov	r1, r5
  404b84:	2002      	movs	r0, #2
  404b86:	4c0a      	ldr	r4, [pc, #40]	; (404bb0 <connect+0x8c>)
  404b88:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404b8a:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404b8c:	bf18      	it	ne
  404b8e:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  404b92:	b009      	add	sp, #36	; 0x24
  404b94:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  404b96:	2544      	movs	r5, #68	; 0x44
  404b98:	e7e1      	b.n	404b5e <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404b9a:	f06f 0005 	mvn.w	r0, #5
  404b9e:	e7f8      	b.n	404b92 <connect+0x6e>
  404ba0:	f06f 0005 	mvn.w	r0, #5
  404ba4:	e7f5      	b.n	404b92 <connect+0x6e>
  404ba6:	bf00      	nop
  404ba8:	2040ca70 	.word	0x2040ca70
  404bac:	00402745 	.word	0x00402745
  404bb0:	004028bd 	.word	0x004028bd

00404bb4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  404bb4:	b530      	push	{r4, r5, lr}
  404bb6:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  404bb8:	460c      	mov	r4, r1
  404bba:	3100      	adds	r1, #0
  404bbc:	bf18      	it	ne
  404bbe:	2101      	movne	r1, #1
  404bc0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  404bc4:	bf88      	it	hi
  404bc6:	2100      	movhi	r1, #0
  404bc8:	2900      	cmp	r1, #0
  404bca:	d037      	beq.n	404c3c <send+0x88>
  404bcc:	2800      	cmp	r0, #0
  404bce:	db35      	blt.n	404c3c <send+0x88>
  404bd0:	4b1d      	ldr	r3, [pc, #116]	; (404c48 <send+0x94>)
  404bd2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404bd6:	7a9b      	ldrb	r3, [r3, #10]
  404bd8:	b2db      	uxtb	r3, r3
  404bda:	2b01      	cmp	r3, #1
  404bdc:	d131      	bne.n	404c42 <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  404bde:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  404be2:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  404be6:	4b18      	ldr	r3, [pc, #96]	; (404c48 <send+0x94>)
  404be8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404bec:	88db      	ldrh	r3, [r3, #6]
  404bee:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  404bf2:	2807      	cmp	r0, #7
  404bf4:	bfb4      	ite	lt
  404bf6:	2550      	movlt	r5, #80	; 0x50
  404bf8:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404bfa:	4b13      	ldr	r3, [pc, #76]	; (404c48 <send+0x94>)
  404bfc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404c00:	7adb      	ldrb	r3, [r3, #11]
  404c02:	f013 0f01 	tst.w	r3, #1
  404c06:	d017      	beq.n	404c38 <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  404c08:	4b0f      	ldr	r3, [pc, #60]	; (404c48 <send+0x94>)
  404c0a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404c0e:	8905      	ldrh	r5, [r0, #8]
  404c10:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  404c12:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  404c14:	9502      	str	r5, [sp, #8]
  404c16:	9201      	str	r2, [sp, #4]
  404c18:	9400      	str	r4, [sp, #0]
  404c1a:	2310      	movs	r3, #16
  404c1c:	eb0d 0203 	add.w	r2, sp, r3
  404c20:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404c24:	2002      	movs	r0, #2
  404c26:	4c09      	ldr	r4, [pc, #36]	; (404c4c <send+0x98>)
  404c28:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  404c2a:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  404c2c:	bf0c      	ite	eq
  404c2e:	2000      	moveq	r0, #0
  404c30:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  404c34:	b009      	add	sp, #36	; 0x24
  404c36:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  404c38:	2145      	movs	r1, #69	; 0x45
  404c3a:	e7eb      	b.n	404c14 <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404c3c:	f06f 0005 	mvn.w	r0, #5
  404c40:	e7f8      	b.n	404c34 <send+0x80>
  404c42:	f06f 0005 	mvn.w	r0, #5
  404c46:	e7f5      	b.n	404c34 <send+0x80>
  404c48:	2040ca70 	.word	0x2040ca70
  404c4c:	004028bd 	.word	0x004028bd

00404c50 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404c50:	2900      	cmp	r1, #0
  404c52:	bf18      	it	ne
  404c54:	2a00      	cmpne	r2, #0
  404c56:	d044      	beq.n	404ce2 <recv+0x92>
{
  404c58:	b570      	push	{r4, r5, r6, lr}
  404c5a:	b086      	sub	sp, #24
  404c5c:	460e      	mov	r6, r1
  404c5e:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404c60:	2800      	cmp	r0, #0
  404c62:	db36      	blt.n	404cd2 <recv+0x82>
  404c64:	4a20      	ldr	r2, [pc, #128]	; (404ce8 <recv+0x98>)
  404c66:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404c6a:	7a92      	ldrb	r2, [r2, #10]
  404c6c:	b2d2      	uxtb	r2, r2
  404c6e:	2a01      	cmp	r2, #1
  404c70:	d132      	bne.n	404cd8 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  404c72:	4c1d      	ldr	r4, [pc, #116]	; (404ce8 <recv+0x98>)
  404c74:	0101      	lsls	r1, r0, #4
  404c76:	1862      	adds	r2, r4, r1
  404c78:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  404c7a:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  404c7c:	7b12      	ldrb	r2, [r2, #12]
  404c7e:	2a00      	cmp	r2, #0
  404c80:	d12d      	bne.n	404cde <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  404c82:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  404c86:	2101      	movs	r1, #1
  404c88:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404c8a:	7ad2      	ldrb	r2, [r2, #11]
  404c8c:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  404c8e:	2a00      	cmp	r2, #0
  404c90:	bf0c      	ite	eq
  404c92:	2146      	moveq	r1, #70	; 0x46
  404c94:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  404c96:	b9d3      	cbnz	r3, 404cce <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  404c98:	f04f 33ff 	mov.w	r3, #4294967295
  404c9c:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  404c9e:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  404ca2:	4b11      	ldr	r3, [pc, #68]	; (404ce8 <recv+0x98>)
  404ca4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404ca8:	88c3      	ldrh	r3, [r0, #6]
  404caa:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  404cae:	2300      	movs	r3, #0
  404cb0:	9302      	str	r3, [sp, #8]
  404cb2:	9301      	str	r3, [sp, #4]
  404cb4:	9300      	str	r3, [sp, #0]
  404cb6:	2308      	movs	r3, #8
  404cb8:	aa04      	add	r2, sp, #16
  404cba:	2002      	movs	r0, #2
  404cbc:	4c0b      	ldr	r4, [pc, #44]	; (404cec <recv+0x9c>)
  404cbe:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  404cc0:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  404cc2:	bf0c      	ite	eq
  404cc4:	2000      	moveq	r0, #0
  404cc6:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  404cca:	b006      	add	sp, #24
  404ccc:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  404cce:	9304      	str	r3, [sp, #16]
  404cd0:	e7e5      	b.n	404c9e <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404cd2:	f06f 0005 	mvn.w	r0, #5
  404cd6:	e7f8      	b.n	404cca <recv+0x7a>
  404cd8:	f06f 0005 	mvn.w	r0, #5
  404cdc:	e7f5      	b.n	404cca <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  404cde:	2000      	movs	r0, #0
  404ce0:	e7f3      	b.n	404cca <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404ce2:	f06f 0005 	mvn.w	r0, #5
}
  404ce6:	4770      	bx	lr
  404ce8:	2040ca70 	.word	0x2040ca70
  404cec:	004028bd 	.word	0x004028bd

00404cf0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  404cf0:	b530      	push	{r4, r5, lr}
  404cf2:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  404cf4:	1e04      	subs	r4, r0, #0
  404cf6:	db2f      	blt.n	404d58 <close+0x68>
  404cf8:	4b1a      	ldr	r3, [pc, #104]	; (404d64 <close+0x74>)
  404cfa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404cfe:	7a9b      	ldrb	r3, [r3, #10]
  404d00:	b2db      	uxtb	r3, r3
  404d02:	2b01      	cmp	r3, #1
  404d04:	d12b      	bne.n	404d5e <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  404d06:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  404d0a:	4b16      	ldr	r3, [pc, #88]	; (404d64 <close+0x74>)
  404d0c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404d10:	88da      	ldrh	r2, [r3, #6]
  404d12:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  404d16:	2200      	movs	r2, #0
  404d18:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  404d1a:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404d1c:	7adb      	ldrb	r3, [r3, #11]
  404d1e:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  404d22:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  404d24:	9202      	str	r2, [sp, #8]
  404d26:	9201      	str	r2, [sp, #4]
  404d28:	9200      	str	r2, [sp, #0]
  404d2a:	f04f 0304 	mov.w	r3, #4
  404d2e:	aa05      	add	r2, sp, #20
  404d30:	bf0c      	ite	eq
  404d32:	2149      	moveq	r1, #73	; 0x49
  404d34:	214e      	movne	r1, #78	; 0x4e
  404d36:	2002      	movs	r0, #2
  404d38:	4d0b      	ldr	r5, [pc, #44]	; (404d68 <close+0x78>)
  404d3a:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404d3c:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404d3e:	bf18      	it	ne
  404d40:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  404d44:	2210      	movs	r2, #16
  404d46:	2100      	movs	r1, #0
  404d48:	4806      	ldr	r0, [pc, #24]	; (404d64 <close+0x74>)
  404d4a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404d4e:	4b07      	ldr	r3, [pc, #28]	; (404d6c <close+0x7c>)
  404d50:	4798      	blx	r3
	}
	return s8Ret;
}
  404d52:	4628      	mov	r0, r5
  404d54:	b007      	add	sp, #28
  404d56:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404d58:	f06f 0505 	mvn.w	r5, #5
  404d5c:	e7f9      	b.n	404d52 <close+0x62>
  404d5e:	f06f 0505 	mvn.w	r5, #5
  404d62:	e7f6      	b.n	404d52 <close+0x62>
  404d64:	2040ca70 	.word	0x2040ca70
  404d68:	004028bd 	.word	0x004028bd
  404d6c:	00402759 	.word	0x00402759

00404d70 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  404d70:	b570      	push	{r4, r5, r6, lr}
  404d72:	b082      	sub	sp, #8
  404d74:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  404d76:	4b2b      	ldr	r3, [pc, #172]	; (404e24 <spi_flash_enable+0xb4>)
  404d78:	4798      	blx	r3
  404d7a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  404d7e:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  404d82:	d203      	bcs.n	404d8c <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  404d84:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  404d86:	4620      	mov	r0, r4
  404d88:	b002      	add	sp, #8
  404d8a:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  404d8c:	a901      	add	r1, sp, #4
  404d8e:	f241 4010 	movw	r0, #5136	; 0x1410
  404d92:	4b25      	ldr	r3, [pc, #148]	; (404e28 <spi_flash_enable+0xb8>)
  404d94:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  404d96:	4604      	mov	r4, r0
  404d98:	2800      	cmp	r0, #0
  404d9a:	d1f4      	bne.n	404d86 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  404d9c:	4b23      	ldr	r3, [pc, #140]	; (404e2c <spi_flash_enable+0xbc>)
  404d9e:	9a01      	ldr	r2, [sp, #4]
  404da0:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  404da2:	4923      	ldr	r1, [pc, #140]	; (404e30 <spi_flash_enable+0xc0>)
  404da4:	4319      	orrs	r1, r3
  404da6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404da8:	f241 4010 	movw	r0, #5136	; 0x1410
  404dac:	4b21      	ldr	r3, [pc, #132]	; (404e34 <spi_flash_enable+0xc4>)
  404dae:	4798      	blx	r3
		if(enable) {
  404db0:	b305      	cbz	r5, 404df4 <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404db2:	2100      	movs	r1, #0
  404db4:	4820      	ldr	r0, [pc, #128]	; (404e38 <spi_flash_enable+0xc8>)
  404db6:	4d1f      	ldr	r5, [pc, #124]	; (404e34 <spi_flash_enable+0xc4>)
  404db8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404dba:	21ab      	movs	r1, #171	; 0xab
  404dbc:	481f      	ldr	r0, [pc, #124]	; (404e3c <spi_flash_enable+0xcc>)
  404dbe:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404dc0:	2101      	movs	r1, #1
  404dc2:	481f      	ldr	r0, [pc, #124]	; (404e40 <spi_flash_enable+0xd0>)
  404dc4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404dc6:	2100      	movs	r1, #0
  404dc8:	481e      	ldr	r0, [pc, #120]	; (404e44 <spi_flash_enable+0xd4>)
  404dca:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  404dcc:	2181      	movs	r1, #129	; 0x81
  404dce:	481e      	ldr	r0, [pc, #120]	; (404e48 <spi_flash_enable+0xd8>)
  404dd0:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404dd2:	4e1e      	ldr	r6, [pc, #120]	; (404e4c <spi_flash_enable+0xdc>)
  404dd4:	4d1e      	ldr	r5, [pc, #120]	; (404e50 <spi_flash_enable+0xe0>)
  404dd6:	4630      	mov	r0, r6
  404dd8:	47a8      	blx	r5
  404dda:	2801      	cmp	r0, #1
  404ddc:	d1fb      	bne.n	404dd6 <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  404dde:	4913      	ldr	r1, [pc, #76]	; (404e2c <spi_flash_enable+0xbc>)
  404de0:	9b01      	ldr	r3, [sp, #4]
  404de2:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  404de4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  404de8:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404dea:	f241 4010 	movw	r0, #5136	; 0x1410
  404dee:	4b11      	ldr	r3, [pc, #68]	; (404e34 <spi_flash_enable+0xc4>)
  404df0:	4798      	blx	r3
  404df2:	e7c8      	b.n	404d86 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404df4:	2100      	movs	r1, #0
  404df6:	4810      	ldr	r0, [pc, #64]	; (404e38 <spi_flash_enable+0xc8>)
  404df8:	4d0e      	ldr	r5, [pc, #56]	; (404e34 <spi_flash_enable+0xc4>)
  404dfa:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404dfc:	21b9      	movs	r1, #185	; 0xb9
  404dfe:	480f      	ldr	r0, [pc, #60]	; (404e3c <spi_flash_enable+0xcc>)
  404e00:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404e02:	2101      	movs	r1, #1
  404e04:	480e      	ldr	r0, [pc, #56]	; (404e40 <spi_flash_enable+0xd0>)
  404e06:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404e08:	2100      	movs	r1, #0
  404e0a:	480e      	ldr	r0, [pc, #56]	; (404e44 <spi_flash_enable+0xd4>)
  404e0c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  404e0e:	2181      	movs	r1, #129	; 0x81
  404e10:	480d      	ldr	r0, [pc, #52]	; (404e48 <spi_flash_enable+0xd8>)
  404e12:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404e14:	4e0d      	ldr	r6, [pc, #52]	; (404e4c <spi_flash_enable+0xdc>)
  404e16:	4d0e      	ldr	r5, [pc, #56]	; (404e50 <spi_flash_enable+0xe0>)
  404e18:	4630      	mov	r0, r6
  404e1a:	47a8      	blx	r5
  404e1c:	2801      	cmp	r0, #1
  404e1e:	d1fb      	bne.n	404e18 <spi_flash_enable+0xa8>
  404e20:	e7dd      	b.n	404dde <spi_flash_enable+0x6e>
  404e22:	bf00      	nop
  404e24:	00403785 	.word	0x00403785
  404e28:	00403a81 	.word	0x00403a81
  404e2c:	f8888fff 	.word	0xf8888fff
  404e30:	01111000 	.word	0x01111000
  404e34:	00403a8d 	.word	0x00403a8d
  404e38:	00010208 	.word	0x00010208
  404e3c:	0001020c 	.word	0x0001020c
  404e40:	00010214 	.word	0x00010214
  404e44:	0001021c 	.word	0x0001021c
  404e48:	00010204 	.word	0x00010204
  404e4c:	00010218 	.word	0x00010218
  404e50:	00403a75 	.word	0x00403a75

00404e54 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404e54:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  404e56:	4810      	ldr	r0, [pc, #64]	; (404e98 <sysclk_init+0x44>)
  404e58:	4b10      	ldr	r3, [pc, #64]	; (404e9c <sysclk_init+0x48>)
  404e5a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404e5c:	213e      	movs	r1, #62	; 0x3e
  404e5e:	2000      	movs	r0, #0
  404e60:	4b0f      	ldr	r3, [pc, #60]	; (404ea0 <sysclk_init+0x4c>)
  404e62:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  404e64:	4c0f      	ldr	r4, [pc, #60]	; (404ea4 <sysclk_init+0x50>)
  404e66:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  404e68:	2800      	cmp	r0, #0
  404e6a:	d0fc      	beq.n	404e66 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  404e6c:	4b0e      	ldr	r3, [pc, #56]	; (404ea8 <sysclk_init+0x54>)
  404e6e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404e70:	4a0e      	ldr	r2, [pc, #56]	; (404eac <sysclk_init+0x58>)
  404e72:	4b0f      	ldr	r3, [pc, #60]	; (404eb0 <sysclk_init+0x5c>)
  404e74:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  404e76:	4c0f      	ldr	r4, [pc, #60]	; (404eb4 <sysclk_init+0x60>)
  404e78:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404e7a:	2800      	cmp	r0, #0
  404e7c:	d0fc      	beq.n	404e78 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  404e7e:	2002      	movs	r0, #2
  404e80:	4b0d      	ldr	r3, [pc, #52]	; (404eb8 <sysclk_init+0x64>)
  404e82:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  404e84:	2000      	movs	r0, #0
  404e86:	4b0d      	ldr	r3, [pc, #52]	; (404ebc <sysclk_init+0x68>)
  404e88:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  404e8a:	4b0d      	ldr	r3, [pc, #52]	; (404ec0 <sysclk_init+0x6c>)
  404e8c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404e8e:	4802      	ldr	r0, [pc, #8]	; (404e98 <sysclk_init+0x44>)
  404e90:	4b02      	ldr	r3, [pc, #8]	; (404e9c <sysclk_init+0x48>)
  404e92:	4798      	blx	r3
  404e94:	bd10      	pop	{r4, pc}
  404e96:	bf00      	nop
  404e98:	11e1a300 	.word	0x11e1a300
  404e9c:	00405b65 	.word	0x00405b65
  404ea0:	0040562d 	.word	0x0040562d
  404ea4:	00405681 	.word	0x00405681
  404ea8:	00405691 	.word	0x00405691
  404eac:	20183f01 	.word	0x20183f01
  404eb0:	400e0600 	.word	0x400e0600
  404eb4:	004056a1 	.word	0x004056a1
  404eb8:	00405591 	.word	0x00405591
  404ebc:	004055c9 	.word	0x004055c9
  404ec0:	00405a59 	.word	0x00405a59

00404ec4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  404ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  404ec8:	b980      	cbnz	r0, 404eec <_read+0x28>
  404eca:	460c      	mov	r4, r1
  404ecc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  404ece:	2a00      	cmp	r2, #0
  404ed0:	dd0f      	ble.n	404ef2 <_read+0x2e>
  404ed2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  404ed4:	4e08      	ldr	r6, [pc, #32]	; (404ef8 <_read+0x34>)
  404ed6:	4d09      	ldr	r5, [pc, #36]	; (404efc <_read+0x38>)
  404ed8:	6830      	ldr	r0, [r6, #0]
  404eda:	4621      	mov	r1, r4
  404edc:	682b      	ldr	r3, [r5, #0]
  404ede:	4798      	blx	r3
		ptr++;
  404ee0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  404ee2:	42bc      	cmp	r4, r7
  404ee4:	d1f8      	bne.n	404ed8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  404ee6:	4640      	mov	r0, r8
  404ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404eec:	f04f 38ff 	mov.w	r8, #4294967295
  404ef0:	e7f9      	b.n	404ee6 <_read+0x22>
	for (; len > 0; --len) {
  404ef2:	4680      	mov	r8, r0
  404ef4:	e7f7      	b.n	404ee6 <_read+0x22>
  404ef6:	bf00      	nop
  404ef8:	2040cb34 	.word	0x2040cb34
  404efc:	2040cb2c 	.word	0x2040cb2c

00404f00 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  404f00:	3801      	subs	r0, #1
  404f02:	2802      	cmp	r0, #2
  404f04:	d815      	bhi.n	404f32 <_write+0x32>
{
  404f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f0a:	460e      	mov	r6, r1
  404f0c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  404f0e:	b19a      	cbz	r2, 404f38 <_write+0x38>
  404f10:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  404f12:	f8df 8038 	ldr.w	r8, [pc, #56]	; 404f4c <_write+0x4c>
  404f16:	4f0c      	ldr	r7, [pc, #48]	; (404f48 <_write+0x48>)
  404f18:	f8d8 0000 	ldr.w	r0, [r8]
  404f1c:	f815 1b01 	ldrb.w	r1, [r5], #1
  404f20:	683b      	ldr	r3, [r7, #0]
  404f22:	4798      	blx	r3
  404f24:	2800      	cmp	r0, #0
  404f26:	db0a      	blt.n	404f3e <_write+0x3e>
  404f28:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  404f2a:	3c01      	subs	r4, #1
  404f2c:	d1f4      	bne.n	404f18 <_write+0x18>
  404f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404f32:	f04f 30ff 	mov.w	r0, #4294967295
  404f36:	4770      	bx	lr
	for (; len != 0; --len) {
  404f38:	4610      	mov	r0, r2
  404f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  404f3e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  404f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404f46:	bf00      	nop
  404f48:	2040cb30 	.word	0x2040cb30
  404f4c:	2040cb34 	.word	0x2040cb34

00404f50 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  404f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404f52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404f56:	4b5c      	ldr	r3, [pc, #368]	; (4050c8 <board_init+0x178>)
  404f58:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  404f5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404f5e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404f62:	4b5a      	ldr	r3, [pc, #360]	; (4050cc <board_init+0x17c>)
  404f64:	2200      	movs	r2, #0
  404f66:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  404f6a:	695a      	ldr	r2, [r3, #20]
  404f6c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  404f70:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  404f72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404f76:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  404f7a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  404f7e:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404f82:	f007 0007 	and.w	r0, r7, #7
  404f86:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  404f88:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404f8c:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  404f90:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  404f94:	f3bf 8f4f 	dsb	sy
  404f98:	f04f 34ff 	mov.w	r4, #4294967295
  404f9c:	fa04 fc00 	lsl.w	ip, r4, r0
  404fa0:	fa06 f000 	lsl.w	r0, r6, r0
  404fa4:	fa04 f40e 	lsl.w	r4, r4, lr
  404fa8:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  404fac:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  404fae:	463a      	mov	r2, r7
  404fb0:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  404fb2:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  404fb6:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  404fba:	3a01      	subs	r2, #1
  404fbc:	4423      	add	r3, r4
  404fbe:	f1b2 3fff 	cmp.w	r2, #4294967295
  404fc2:	d1f6      	bne.n	404fb2 <board_init+0x62>
        } while(sets--);
  404fc4:	3e01      	subs	r6, #1
  404fc6:	4460      	add	r0, ip
  404fc8:	f1b6 3fff 	cmp.w	r6, #4294967295
  404fcc:	d1ef      	bne.n	404fae <board_init+0x5e>
  404fce:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  404fd2:	4b3e      	ldr	r3, [pc, #248]	; (4050cc <board_init+0x17c>)
  404fd4:	695a      	ldr	r2, [r3, #20]
  404fd6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  404fda:	615a      	str	r2, [r3, #20]
  404fdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404fe0:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404fe4:	4a3a      	ldr	r2, [pc, #232]	; (4050d0 <board_init+0x180>)
  404fe6:	493b      	ldr	r1, [pc, #236]	; (4050d4 <board_init+0x184>)
  404fe8:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404fea:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  404fee:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  404ff0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404ff4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  404ff8:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  404ffc:	f022 0201 	bic.w	r2, r2, #1
  405000:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  405004:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  405008:	f022 0201 	bic.w	r2, r2, #1
  40500c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  405010:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405014:	f3bf 8f6f 	isb	sy
  405018:	200a      	movs	r0, #10
  40501a:	4c2f      	ldr	r4, [pc, #188]	; (4050d8 <board_init+0x188>)
  40501c:	47a0      	blx	r4
  40501e:	200b      	movs	r0, #11
  405020:	47a0      	blx	r4
  405022:	200c      	movs	r0, #12
  405024:	47a0      	blx	r4
  405026:	2010      	movs	r0, #16
  405028:	47a0      	blx	r4
  40502a:	2011      	movs	r0, #17
  40502c:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40502e:	4b2b      	ldr	r3, [pc, #172]	; (4050dc <board_init+0x18c>)
  405030:	f44f 7280 	mov.w	r2, #256	; 0x100
  405034:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405036:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40503a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40503c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  405040:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405044:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  405046:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40504a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40504c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  405050:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  405052:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  405054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  405058:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40505a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40505e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  405060:	6f59      	ldr	r1, [r3, #116]	; 0x74
  405062:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  405066:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  405068:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40506c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  405070:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  405074:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  405078:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40507a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40507e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  405080:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  405082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  405086:	6f19      	ldr	r1, [r3, #112]	; 0x70
  405088:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40508c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40508e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  405090:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  405094:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405096:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  405098:	4a11      	ldr	r2, [pc, #68]	; (4050e0 <board_init+0x190>)
  40509a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40509e:	f043 0310 	orr.w	r3, r3, #16
  4050a2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4050a6:	4b0f      	ldr	r3, [pc, #60]	; (4050e4 <board_init+0x194>)
  4050a8:	2210      	movs	r2, #16
  4050aa:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4050ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4050b0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4050b2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4050b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4050b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4050ba:	4311      	orrs	r1, r2
  4050bc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4050be:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4050c0:	4311      	orrs	r1, r2
  4050c2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4050c4:	605a      	str	r2, [r3, #4]
  4050c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4050c8:	400e1850 	.word	0x400e1850
  4050cc:	e000ed00 	.word	0xe000ed00
  4050d0:	400e0c00 	.word	0x400e0c00
  4050d4:	5a00080c 	.word	0x5a00080c
  4050d8:	004056b1 	.word	0x004056b1
  4050dc:	400e1200 	.word	0x400e1200
  4050e0:	40088000 	.word	0x40088000
  4050e4:	400e1000 	.word	0x400e1000

004050e8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4050e8:	b90a      	cbnz	r2, 4050ee <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4050ea:	6601      	str	r1, [r0, #96]	; 0x60
  4050ec:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4050ee:	6641      	str	r1, [r0, #100]	; 0x64
  4050f0:	4770      	bx	lr

004050f2 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4050f2:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4050f4:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4050f8:	d03a      	beq.n	405170 <pio_set_peripheral+0x7e>
  4050fa:	d813      	bhi.n	405124 <pio_set_peripheral+0x32>
  4050fc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  405100:	d025      	beq.n	40514e <pio_set_peripheral+0x5c>
  405102:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  405106:	d10a      	bne.n	40511e <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405108:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40510a:	4313      	orrs	r3, r2
  40510c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40510e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  405110:	6f41      	ldr	r1, [r0, #116]	; 0x74
  405112:	400b      	ands	r3, r1
  405114:	ea23 0302 	bic.w	r3, r3, r2
  405118:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40511a:	6042      	str	r2, [r0, #4]
  40511c:	4770      	bx	lr
	switch (ul_type) {
  40511e:	2900      	cmp	r1, #0
  405120:	d1fb      	bne.n	40511a <pio_set_peripheral+0x28>
  405122:	4770      	bx	lr
  405124:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  405128:	d021      	beq.n	40516e <pio_set_peripheral+0x7c>
  40512a:	d809      	bhi.n	405140 <pio_set_peripheral+0x4e>
  40512c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  405130:	d1f3      	bne.n	40511a <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  405132:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  405134:	4313      	orrs	r3, r2
  405136:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  405138:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40513a:	4313      	orrs	r3, r2
  40513c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40513e:	e7ec      	b.n	40511a <pio_set_peripheral+0x28>
	switch (ul_type) {
  405140:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  405144:	d013      	beq.n	40516e <pio_set_peripheral+0x7c>
  405146:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40514a:	d010      	beq.n	40516e <pio_set_peripheral+0x7c>
  40514c:	e7e5      	b.n	40511a <pio_set_peripheral+0x28>
{
  40514e:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  405150:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405152:	6f04      	ldr	r4, [r0, #112]	; 0x70
  405154:	43d3      	mvns	r3, r2
  405156:	4021      	ands	r1, r4
  405158:	461c      	mov	r4, r3
  40515a:	4019      	ands	r1, r3
  40515c:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40515e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  405160:	6f41      	ldr	r1, [r0, #116]	; 0x74
  405162:	400b      	ands	r3, r1
  405164:	4023      	ands	r3, r4
  405166:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  405168:	6042      	str	r2, [r0, #4]
}
  40516a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40516e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  405170:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405172:	6f01      	ldr	r1, [r0, #112]	; 0x70
  405174:	400b      	ands	r3, r1
  405176:	ea23 0302 	bic.w	r3, r3, r2
  40517a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40517c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40517e:	4313      	orrs	r3, r2
  405180:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  405182:	e7ca      	b.n	40511a <pio_set_peripheral+0x28>

00405184 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  405184:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  405186:	f012 0f01 	tst.w	r2, #1
  40518a:	d10d      	bne.n	4051a8 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  40518c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40518e:	f012 0f0a 	tst.w	r2, #10
  405192:	d00b      	beq.n	4051ac <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  405194:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  405196:	f012 0f02 	tst.w	r2, #2
  40519a:	d109      	bne.n	4051b0 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40519c:	f012 0f08 	tst.w	r2, #8
  4051a0:	d008      	beq.n	4051b4 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4051a2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4051a6:	e005      	b.n	4051b4 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4051a8:	6641      	str	r1, [r0, #100]	; 0x64
  4051aa:	e7f0      	b.n	40518e <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4051ac:	6241      	str	r1, [r0, #36]	; 0x24
  4051ae:	e7f2      	b.n	405196 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4051b0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4051b4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4051b6:	6001      	str	r1, [r0, #0]
  4051b8:	4770      	bx	lr

004051ba <pio_set_output>:
{
  4051ba:	b410      	push	{r4}
  4051bc:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4051be:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4051c0:	b94c      	cbnz	r4, 4051d6 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4051c2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4051c4:	b14b      	cbz	r3, 4051da <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4051c6:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4051c8:	b94a      	cbnz	r2, 4051de <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4051ca:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4051cc:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4051ce:	6001      	str	r1, [r0, #0]
}
  4051d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4051d4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4051d6:	6641      	str	r1, [r0, #100]	; 0x64
  4051d8:	e7f4      	b.n	4051c4 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4051da:	6541      	str	r1, [r0, #84]	; 0x54
  4051dc:	e7f4      	b.n	4051c8 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4051de:	6301      	str	r1, [r0, #48]	; 0x30
  4051e0:	e7f4      	b.n	4051cc <pio_set_output+0x12>
	...

004051e4 <pio_configure>:
{
  4051e4:	b570      	push	{r4, r5, r6, lr}
  4051e6:	b082      	sub	sp, #8
  4051e8:	4605      	mov	r5, r0
  4051ea:	4616      	mov	r6, r2
  4051ec:	461c      	mov	r4, r3
	switch (ul_type) {
  4051ee:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4051f2:	d014      	beq.n	40521e <pio_configure+0x3a>
  4051f4:	d90a      	bls.n	40520c <pio_configure+0x28>
  4051f6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4051fa:	d024      	beq.n	405246 <pio_configure+0x62>
  4051fc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  405200:	d021      	beq.n	405246 <pio_configure+0x62>
  405202:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  405206:	d017      	beq.n	405238 <pio_configure+0x54>
		return 0;
  405208:	2000      	movs	r0, #0
  40520a:	e01a      	b.n	405242 <pio_configure+0x5e>
	switch (ul_type) {
  40520c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  405210:	d005      	beq.n	40521e <pio_configure+0x3a>
  405212:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  405216:	d002      	beq.n	40521e <pio_configure+0x3a>
  405218:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40521c:	d1f4      	bne.n	405208 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40521e:	4632      	mov	r2, r6
  405220:	4628      	mov	r0, r5
  405222:	4b11      	ldr	r3, [pc, #68]	; (405268 <pio_configure+0x84>)
  405224:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405226:	f014 0f01 	tst.w	r4, #1
  40522a:	d102      	bne.n	405232 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40522c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40522e:	2001      	movs	r0, #1
  405230:	e007      	b.n	405242 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  405232:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  405234:	2001      	movs	r0, #1
  405236:	e004      	b.n	405242 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  405238:	461a      	mov	r2, r3
  40523a:	4631      	mov	r1, r6
  40523c:	4b0b      	ldr	r3, [pc, #44]	; (40526c <pio_configure+0x88>)
  40523e:	4798      	blx	r3
	return 1;
  405240:	2001      	movs	r0, #1
}
  405242:	b002      	add	sp, #8
  405244:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  405246:	f004 0301 	and.w	r3, r4, #1
  40524a:	9300      	str	r3, [sp, #0]
  40524c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  405250:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  405254:	bf14      	ite	ne
  405256:	2200      	movne	r2, #0
  405258:	2201      	moveq	r2, #1
  40525a:	4631      	mov	r1, r6
  40525c:	4628      	mov	r0, r5
  40525e:	4c04      	ldr	r4, [pc, #16]	; (405270 <pio_configure+0x8c>)
  405260:	47a0      	blx	r4
	return 1;
  405262:	2001      	movs	r0, #1
		break;
  405264:	e7ed      	b.n	405242 <pio_configure+0x5e>
  405266:	bf00      	nop
  405268:	004050f3 	.word	0x004050f3
  40526c:	00405185 	.word	0x00405185
  405270:	004051bb 	.word	0x004051bb

00405274 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  405274:	f012 0f10 	tst.w	r2, #16
  405278:	d012      	beq.n	4052a0 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  40527a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40527e:	f012 0f20 	tst.w	r2, #32
  405282:	d007      	beq.n	405294 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  405284:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  405288:	f012 0f40 	tst.w	r2, #64	; 0x40
  40528c:	d005      	beq.n	40529a <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  40528e:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  405292:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  405294:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  405298:	e7f6      	b.n	405288 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40529a:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  40529e:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4052a0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4052a4:	4770      	bx	lr

004052a6 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4052a6:	6401      	str	r1, [r0, #64]	; 0x40
  4052a8:	4770      	bx	lr

004052aa <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  4052aa:	6441      	str	r1, [r0, #68]	; 0x44
  4052ac:	4770      	bx	lr

004052ae <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4052ae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4052b0:	4770      	bx	lr

004052b2 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4052b2:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4052b4:	4770      	bx	lr
	...

004052b8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4052b8:	b570      	push	{r4, r5, r6, lr}
  4052ba:	b082      	sub	sp, #8
  4052bc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4052be:	4c46      	ldr	r4, [pc, #280]	; (4053d8 <pio_configure_pin+0x120>)
  4052c0:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  4052c4:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4052c6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4052ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4052ce:	d059      	beq.n	405384 <pio_configure_pin+0xcc>
  4052d0:	d80a      	bhi.n	4052e8 <pio_configure_pin+0x30>
  4052d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4052d6:	d02f      	beq.n	405338 <pio_configure_pin+0x80>
  4052d8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4052dc:	d03f      	beq.n	40535e <pio_configure_pin+0xa6>
  4052de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4052e2:	d016      	beq.n	405312 <pio_configure_pin+0x5a>
		return 0;
  4052e4:	2000      	movs	r0, #0
  4052e6:	e012      	b.n	40530e <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  4052e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4052ec:	d05d      	beq.n	4053aa <pio_configure_pin+0xf2>
  4052ee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4052f2:	d05a      	beq.n	4053aa <pio_configure_pin+0xf2>
  4052f4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4052f8:	d1f4      	bne.n	4052e4 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4052fa:	f000 011f 	and.w	r1, r0, #31
  4052fe:	2601      	movs	r6, #1
  405300:	462a      	mov	r2, r5
  405302:	fa06 f101 	lsl.w	r1, r6, r1
  405306:	4620      	mov	r0, r4
  405308:	4b34      	ldr	r3, [pc, #208]	; (4053dc <pio_configure_pin+0x124>)
  40530a:	4798      	blx	r3
	return 1;
  40530c:	4630      	mov	r0, r6
}
  40530e:	b002      	add	sp, #8
  405310:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  405312:	f000 001f 	and.w	r0, r0, #31
  405316:	2601      	movs	r6, #1
  405318:	4086      	lsls	r6, r0
  40531a:	4632      	mov	r2, r6
  40531c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  405320:	4620      	mov	r0, r4
  405322:	4b2f      	ldr	r3, [pc, #188]	; (4053e0 <pio_configure_pin+0x128>)
  405324:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405326:	f015 0f01 	tst.w	r5, #1
  40532a:	d102      	bne.n	405332 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  40532c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40532e:	2001      	movs	r0, #1
  405330:	e7ed      	b.n	40530e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  405332:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  405334:	2001      	movs	r0, #1
  405336:	e7ea      	b.n	40530e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  405338:	f000 001f 	and.w	r0, r0, #31
  40533c:	2601      	movs	r6, #1
  40533e:	4086      	lsls	r6, r0
  405340:	4632      	mov	r2, r6
  405342:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  405346:	4620      	mov	r0, r4
  405348:	4b25      	ldr	r3, [pc, #148]	; (4053e0 <pio_configure_pin+0x128>)
  40534a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40534c:	f015 0f01 	tst.w	r5, #1
  405350:	d102      	bne.n	405358 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  405352:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  405354:	2001      	movs	r0, #1
  405356:	e7da      	b.n	40530e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  405358:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40535a:	2001      	movs	r0, #1
  40535c:	e7d7      	b.n	40530e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40535e:	f000 001f 	and.w	r0, r0, #31
  405362:	2601      	movs	r6, #1
  405364:	4086      	lsls	r6, r0
  405366:	4632      	mov	r2, r6
  405368:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40536c:	4620      	mov	r0, r4
  40536e:	4b1c      	ldr	r3, [pc, #112]	; (4053e0 <pio_configure_pin+0x128>)
  405370:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405372:	f015 0f01 	tst.w	r5, #1
  405376:	d102      	bne.n	40537e <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  405378:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40537a:	2001      	movs	r0, #1
  40537c:	e7c7      	b.n	40530e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40537e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  405380:	2001      	movs	r0, #1
  405382:	e7c4      	b.n	40530e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  405384:	f000 001f 	and.w	r0, r0, #31
  405388:	2601      	movs	r6, #1
  40538a:	4086      	lsls	r6, r0
  40538c:	4632      	mov	r2, r6
  40538e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  405392:	4620      	mov	r0, r4
  405394:	4b12      	ldr	r3, [pc, #72]	; (4053e0 <pio_configure_pin+0x128>)
  405396:	4798      	blx	r3
	if (ul_pull_up_enable) {
  405398:	f015 0f01 	tst.w	r5, #1
  40539c:	d102      	bne.n	4053a4 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  40539e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4053a0:	2001      	movs	r0, #1
  4053a2:	e7b4      	b.n	40530e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4053a4:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4053a6:	2001      	movs	r0, #1
  4053a8:	e7b1      	b.n	40530e <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4053aa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4053ae:	f000 011f 	and.w	r1, r0, #31
  4053b2:	2601      	movs	r6, #1
  4053b4:	ea05 0306 	and.w	r3, r5, r6
  4053b8:	9300      	str	r3, [sp, #0]
  4053ba:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4053be:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4053c2:	bf14      	ite	ne
  4053c4:	2200      	movne	r2, #0
  4053c6:	2201      	moveq	r2, #1
  4053c8:	fa06 f101 	lsl.w	r1, r6, r1
  4053cc:	4620      	mov	r0, r4
  4053ce:	4c05      	ldr	r4, [pc, #20]	; (4053e4 <pio_configure_pin+0x12c>)
  4053d0:	47a0      	blx	r4
	return 1;
  4053d2:	4630      	mov	r0, r6
		break;
  4053d4:	e79b      	b.n	40530e <pio_configure_pin+0x56>
  4053d6:	bf00      	nop
  4053d8:	00200707 	.word	0x00200707
  4053dc:	00405185 	.word	0x00405185
  4053e0:	004050f3 	.word	0x004050f3
  4053e4:	004051bb 	.word	0x004051bb

004053e8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4053e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4053ec:	4604      	mov	r4, r0
  4053ee:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4053f0:	4b0e      	ldr	r3, [pc, #56]	; (40542c <pio_handler_process+0x44>)
  4053f2:	4798      	blx	r3
  4053f4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4053f6:	4620      	mov	r0, r4
  4053f8:	4b0d      	ldr	r3, [pc, #52]	; (405430 <pio_handler_process+0x48>)
  4053fa:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4053fc:	4005      	ands	r5, r0
  4053fe:	d013      	beq.n	405428 <pio_handler_process+0x40>
  405400:	4c0c      	ldr	r4, [pc, #48]	; (405434 <pio_handler_process+0x4c>)
  405402:	f104 0660 	add.w	r6, r4, #96	; 0x60
  405406:	e003      	b.n	405410 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  405408:	42b4      	cmp	r4, r6
  40540a:	d00d      	beq.n	405428 <pio_handler_process+0x40>
  40540c:	3410      	adds	r4, #16
		while (status != 0) {
  40540e:	b15d      	cbz	r5, 405428 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  405410:	6820      	ldr	r0, [r4, #0]
  405412:	4540      	cmp	r0, r8
  405414:	d1f8      	bne.n	405408 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  405416:	6861      	ldr	r1, [r4, #4]
  405418:	4229      	tst	r1, r5
  40541a:	d0f5      	beq.n	405408 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40541c:	68e3      	ldr	r3, [r4, #12]
  40541e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  405420:	6863      	ldr	r3, [r4, #4]
  405422:	ea25 0503 	bic.w	r5, r5, r3
  405426:	e7ef      	b.n	405408 <pio_handler_process+0x20>
  405428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40542c:	004052af 	.word	0x004052af
  405430:	004052b3 	.word	0x004052b3
  405434:	2040c36c 	.word	0x2040c36c

00405438 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  405438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40543a:	4c18      	ldr	r4, [pc, #96]	; (40549c <pio_handler_set+0x64>)
  40543c:	6826      	ldr	r6, [r4, #0]
  40543e:	2e06      	cmp	r6, #6
  405440:	d82a      	bhi.n	405498 <pio_handler_set+0x60>
  405442:	f04f 0c00 	mov.w	ip, #0
  405446:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  405448:	4f15      	ldr	r7, [pc, #84]	; (4054a0 <pio_handler_set+0x68>)
  40544a:	e004      	b.n	405456 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40544c:	3401      	adds	r4, #1
  40544e:	b2e4      	uxtb	r4, r4
  405450:	46a4      	mov	ip, r4
  405452:	42a6      	cmp	r6, r4
  405454:	d309      	bcc.n	40546a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  405456:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  405458:	0125      	lsls	r5, r4, #4
  40545a:	597d      	ldr	r5, [r7, r5]
  40545c:	428d      	cmp	r5, r1
  40545e:	d1f5      	bne.n	40544c <pio_handler_set+0x14>
  405460:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  405464:	686d      	ldr	r5, [r5, #4]
  405466:	4295      	cmp	r5, r2
  405468:	d1f0      	bne.n	40544c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40546a:	4d0d      	ldr	r5, [pc, #52]	; (4054a0 <pio_handler_set+0x68>)
  40546c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  405470:	eb05 040e 	add.w	r4, r5, lr
  405474:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  405478:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40547a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  40547c:	9906      	ldr	r1, [sp, #24]
  40547e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  405480:	3601      	adds	r6, #1
  405482:	4566      	cmp	r6, ip
  405484:	d005      	beq.n	405492 <pio_handler_set+0x5a>
  405486:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  405488:	461a      	mov	r2, r3
  40548a:	4b06      	ldr	r3, [pc, #24]	; (4054a4 <pio_handler_set+0x6c>)
  40548c:	4798      	blx	r3

	return 0;
  40548e:	2000      	movs	r0, #0
  405490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  405492:	4902      	ldr	r1, [pc, #8]	; (40549c <pio_handler_set+0x64>)
  405494:	600e      	str	r6, [r1, #0]
  405496:	e7f6      	b.n	405486 <pio_handler_set+0x4e>
		return 1;
  405498:	2001      	movs	r0, #1
}
  40549a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40549c:	2040c3dc 	.word	0x2040c3dc
  4054a0:	2040c36c 	.word	0x2040c36c
  4054a4:	00405275 	.word	0x00405275

004054a8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4054a8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4054aa:	210a      	movs	r1, #10
  4054ac:	4801      	ldr	r0, [pc, #4]	; (4054b4 <PIOA_Handler+0xc>)
  4054ae:	4b02      	ldr	r3, [pc, #8]	; (4054b8 <PIOA_Handler+0x10>)
  4054b0:	4798      	blx	r3
  4054b2:	bd08      	pop	{r3, pc}
  4054b4:	400e0e00 	.word	0x400e0e00
  4054b8:	004053e9 	.word	0x004053e9

004054bc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4054bc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4054be:	210b      	movs	r1, #11
  4054c0:	4801      	ldr	r0, [pc, #4]	; (4054c8 <PIOB_Handler+0xc>)
  4054c2:	4b02      	ldr	r3, [pc, #8]	; (4054cc <PIOB_Handler+0x10>)
  4054c4:	4798      	blx	r3
  4054c6:	bd08      	pop	{r3, pc}
  4054c8:	400e1000 	.word	0x400e1000
  4054cc:	004053e9 	.word	0x004053e9

004054d0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4054d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4054d2:	210c      	movs	r1, #12
  4054d4:	4801      	ldr	r0, [pc, #4]	; (4054dc <PIOC_Handler+0xc>)
  4054d6:	4b02      	ldr	r3, [pc, #8]	; (4054e0 <PIOC_Handler+0x10>)
  4054d8:	4798      	blx	r3
  4054da:	bd08      	pop	{r3, pc}
  4054dc:	400e1200 	.word	0x400e1200
  4054e0:	004053e9 	.word	0x004053e9

004054e4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4054e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4054e6:	2110      	movs	r1, #16
  4054e8:	4801      	ldr	r0, [pc, #4]	; (4054f0 <PIOD_Handler+0xc>)
  4054ea:	4b02      	ldr	r3, [pc, #8]	; (4054f4 <PIOD_Handler+0x10>)
  4054ec:	4798      	blx	r3
  4054ee:	bd08      	pop	{r3, pc}
  4054f0:	400e1400 	.word	0x400e1400
  4054f4:	004053e9 	.word	0x004053e9

004054f8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4054f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4054fa:	2111      	movs	r1, #17
  4054fc:	4801      	ldr	r0, [pc, #4]	; (405504 <PIOE_Handler+0xc>)
  4054fe:	4b02      	ldr	r3, [pc, #8]	; (405508 <PIOE_Handler+0x10>)
  405500:	4798      	blx	r3
  405502:	bd08      	pop	{r3, pc}
  405504:	400e1600 	.word	0x400e1600
  405508:	004053e9 	.word	0x004053e9

0040550c <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  40550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40550e:	4606      	mov	r6, r0
  405510:	460d      	mov	r5, r1
  405512:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  405514:	4b17      	ldr	r3, [pc, #92]	; (405574 <pio_handler_set_priority+0x68>)
  405516:	4798      	blx	r3
  405518:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40551a:	f04f 31ff 	mov.w	r1, #4294967295
  40551e:	4630      	mov	r0, r6
  405520:	4b15      	ldr	r3, [pc, #84]	; (405578 <pio_handler_set_priority+0x6c>)
  405522:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  405524:	4630      	mov	r0, r6
  405526:	4b15      	ldr	r3, [pc, #84]	; (40557c <pio_handler_set_priority+0x70>)
  405528:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40552a:	fa5f fe85 	uxtb.w	lr, r5
  40552e:	f00e 031f 	and.w	r3, lr, #31
  405532:	2201      	movs	r2, #1
  405534:	fa02 f303 	lsl.w	r3, r2, r3
  405538:	0968      	lsrs	r0, r5, #5
  40553a:	4911      	ldr	r1, [pc, #68]	; (405580 <pio_handler_set_priority+0x74>)
  40553c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  405540:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405544:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  405548:	2d00      	cmp	r5, #0
  40554a:	db0a      	blt.n	405562 <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40554c:	0164      	lsls	r4, r4, #5
  40554e:	b2e4      	uxtb	r4, r4
  405550:	4a0c      	ldr	r2, [pc, #48]	; (405584 <pio_handler_set_priority+0x78>)
  405552:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405554:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  405558:	4639      	mov	r1, r7
  40555a:	4630      	mov	r0, r6
  40555c:	4b0a      	ldr	r3, [pc, #40]	; (405588 <pio_handler_set_priority+0x7c>)
  40555e:	4798      	blx	r3
  405560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  405562:	f00e 0e0f 	and.w	lr, lr, #15
  405566:	0164      	lsls	r4, r4, #5
  405568:	b2e4      	uxtb	r4, r4
  40556a:	4a08      	ldr	r2, [pc, #32]	; (40558c <pio_handler_set_priority+0x80>)
  40556c:	f802 400e 	strb.w	r4, [r2, lr]
  405570:	e7f0      	b.n	405554 <pio_handler_set_priority+0x48>
  405572:	bf00      	nop
  405574:	004052b3 	.word	0x004052b3
  405578:	004052ab 	.word	0x004052ab
  40557c:	004052af 	.word	0x004052af
  405580:	e000e100 	.word	0xe000e100
  405584:	e000e400 	.word	0xe000e400
  405588:	004052a7 	.word	0x004052a7
  40558c:	e000ed14 	.word	0xe000ed14

00405590 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  405590:	2803      	cmp	r0, #3
  405592:	d011      	beq.n	4055b8 <pmc_mck_set_division+0x28>
  405594:	2804      	cmp	r0, #4
  405596:	d012      	beq.n	4055be <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  405598:	2802      	cmp	r0, #2
  40559a:	bf0c      	ite	eq
  40559c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4055a0:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4055a2:	4a08      	ldr	r2, [pc, #32]	; (4055c4 <pmc_mck_set_division+0x34>)
  4055a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4055a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4055aa:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4055ac:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4055ae:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4055b0:	f013 0f08 	tst.w	r3, #8
  4055b4:	d0fb      	beq.n	4055ae <pmc_mck_set_division+0x1e>
}
  4055b6:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4055b8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4055bc:	e7f1      	b.n	4055a2 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4055be:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4055c2:	e7ee      	b.n	4055a2 <pmc_mck_set_division+0x12>
  4055c4:	400e0600 	.word	0x400e0600

004055c8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4055c8:	4a17      	ldr	r2, [pc, #92]	; (405628 <pmc_switch_mck_to_pllack+0x60>)
  4055ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4055cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4055d0:	4318      	orrs	r0, r3
  4055d2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4055d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4055d6:	f013 0f08 	tst.w	r3, #8
  4055da:	d10a      	bne.n	4055f2 <pmc_switch_mck_to_pllack+0x2a>
  4055dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4055e0:	4911      	ldr	r1, [pc, #68]	; (405628 <pmc_switch_mck_to_pllack+0x60>)
  4055e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4055e4:	f012 0f08 	tst.w	r2, #8
  4055e8:	d103      	bne.n	4055f2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4055ea:	3b01      	subs	r3, #1
  4055ec:	d1f9      	bne.n	4055e2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4055ee:	2001      	movs	r0, #1
  4055f0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4055f2:	4a0d      	ldr	r2, [pc, #52]	; (405628 <pmc_switch_mck_to_pllack+0x60>)
  4055f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4055f6:	f023 0303 	bic.w	r3, r3, #3
  4055fa:	f043 0302 	orr.w	r3, r3, #2
  4055fe:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405600:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405602:	f013 0f08 	tst.w	r3, #8
  405606:	d10a      	bne.n	40561e <pmc_switch_mck_to_pllack+0x56>
  405608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40560c:	4906      	ldr	r1, [pc, #24]	; (405628 <pmc_switch_mck_to_pllack+0x60>)
  40560e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405610:	f012 0f08 	tst.w	r2, #8
  405614:	d105      	bne.n	405622 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405616:	3b01      	subs	r3, #1
  405618:	d1f9      	bne.n	40560e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40561a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40561c:	4770      	bx	lr
	return 0;
  40561e:	2000      	movs	r0, #0
  405620:	4770      	bx	lr
  405622:	2000      	movs	r0, #0
  405624:	4770      	bx	lr
  405626:	bf00      	nop
  405628:	400e0600 	.word	0x400e0600

0040562c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40562c:	b9a0      	cbnz	r0, 405658 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40562e:	480e      	ldr	r0, [pc, #56]	; (405668 <pmc_switch_mainck_to_xtal+0x3c>)
  405630:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  405632:	0209      	lsls	r1, r1, #8
  405634:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  405636:	4a0d      	ldr	r2, [pc, #52]	; (40566c <pmc_switch_mainck_to_xtal+0x40>)
  405638:	401a      	ands	r2, r3
  40563a:	4b0d      	ldr	r3, [pc, #52]	; (405670 <pmc_switch_mainck_to_xtal+0x44>)
  40563c:	4313      	orrs	r3, r2
  40563e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405640:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  405642:	4602      	mov	r2, r0
  405644:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405646:	f013 0f01 	tst.w	r3, #1
  40564a:	d0fb      	beq.n	405644 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40564c:	4a06      	ldr	r2, [pc, #24]	; (405668 <pmc_switch_mainck_to_xtal+0x3c>)
  40564e:	6a11      	ldr	r1, [r2, #32]
  405650:	4b08      	ldr	r3, [pc, #32]	; (405674 <pmc_switch_mainck_to_xtal+0x48>)
  405652:	430b      	orrs	r3, r1
  405654:	6213      	str	r3, [r2, #32]
  405656:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405658:	4903      	ldr	r1, [pc, #12]	; (405668 <pmc_switch_mainck_to_xtal+0x3c>)
  40565a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40565c:	4a06      	ldr	r2, [pc, #24]	; (405678 <pmc_switch_mainck_to_xtal+0x4c>)
  40565e:	401a      	ands	r2, r3
  405660:	4b06      	ldr	r3, [pc, #24]	; (40567c <pmc_switch_mainck_to_xtal+0x50>)
  405662:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405664:	620b      	str	r3, [r1, #32]
  405666:	4770      	bx	lr
  405668:	400e0600 	.word	0x400e0600
  40566c:	ffc8fffc 	.word	0xffc8fffc
  405670:	00370001 	.word	0x00370001
  405674:	01370000 	.word	0x01370000
  405678:	fec8fffc 	.word	0xfec8fffc
  40567c:	01370002 	.word	0x01370002

00405680 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  405680:	4b02      	ldr	r3, [pc, #8]	; (40568c <pmc_osc_is_ready_mainck+0xc>)
  405682:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  405684:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  405688:	4770      	bx	lr
  40568a:	bf00      	nop
  40568c:	400e0600 	.word	0x400e0600

00405690 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  405690:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  405694:	4b01      	ldr	r3, [pc, #4]	; (40569c <pmc_disable_pllack+0xc>)
  405696:	629a      	str	r2, [r3, #40]	; 0x28
  405698:	4770      	bx	lr
  40569a:	bf00      	nop
  40569c:	400e0600 	.word	0x400e0600

004056a0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4056a0:	4b02      	ldr	r3, [pc, #8]	; (4056ac <pmc_is_locked_pllack+0xc>)
  4056a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4056a4:	f000 0002 	and.w	r0, r0, #2
  4056a8:	4770      	bx	lr
  4056aa:	bf00      	nop
  4056ac:	400e0600 	.word	0x400e0600

004056b0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4056b0:	283f      	cmp	r0, #63	; 0x3f
  4056b2:	d81e      	bhi.n	4056f2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4056b4:	281f      	cmp	r0, #31
  4056b6:	d80c      	bhi.n	4056d2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4056b8:	4b11      	ldr	r3, [pc, #68]	; (405700 <pmc_enable_periph_clk+0x50>)
  4056ba:	699a      	ldr	r2, [r3, #24]
  4056bc:	2301      	movs	r3, #1
  4056be:	4083      	lsls	r3, r0
  4056c0:	4393      	bics	r3, r2
  4056c2:	d018      	beq.n	4056f6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4056c4:	2301      	movs	r3, #1
  4056c6:	fa03 f000 	lsl.w	r0, r3, r0
  4056ca:	4b0d      	ldr	r3, [pc, #52]	; (405700 <pmc_enable_periph_clk+0x50>)
  4056cc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4056ce:	2000      	movs	r0, #0
  4056d0:	4770      	bx	lr
		ul_id -= 32;
  4056d2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4056d4:	4b0a      	ldr	r3, [pc, #40]	; (405700 <pmc_enable_periph_clk+0x50>)
  4056d6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4056da:	2301      	movs	r3, #1
  4056dc:	4083      	lsls	r3, r0
  4056de:	4393      	bics	r3, r2
  4056e0:	d00b      	beq.n	4056fa <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4056e2:	2301      	movs	r3, #1
  4056e4:	fa03 f000 	lsl.w	r0, r3, r0
  4056e8:	4b05      	ldr	r3, [pc, #20]	; (405700 <pmc_enable_periph_clk+0x50>)
  4056ea:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4056ee:	2000      	movs	r0, #0
  4056f0:	4770      	bx	lr
		return 1;
  4056f2:	2001      	movs	r0, #1
  4056f4:	4770      	bx	lr
	return 0;
  4056f6:	2000      	movs	r0, #0
  4056f8:	4770      	bx	lr
  4056fa:	2000      	movs	r0, #0
}
  4056fc:	4770      	bx	lr
  4056fe:	bf00      	nop
  405700:	400e0600 	.word	0x400e0600

00405704 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  405704:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  405706:	4b07      	ldr	r3, [pc, #28]	; (405724 <spi_enable_clock+0x20>)
  405708:	4298      	cmp	r0, r3
  40570a:	d003      	beq.n	405714 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40570c:	4b06      	ldr	r3, [pc, #24]	; (405728 <spi_enable_clock+0x24>)
  40570e:	4298      	cmp	r0, r3
  405710:	d004      	beq.n	40571c <spi_enable_clock+0x18>
  405712:	bd08      	pop	{r3, pc}
  405714:	2015      	movs	r0, #21
  405716:	4b05      	ldr	r3, [pc, #20]	; (40572c <spi_enable_clock+0x28>)
  405718:	4798      	blx	r3
  40571a:	bd08      	pop	{r3, pc}
  40571c:	202a      	movs	r0, #42	; 0x2a
  40571e:	4b03      	ldr	r3, [pc, #12]	; (40572c <spi_enable_clock+0x28>)
  405720:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  405722:	e7f6      	b.n	405712 <spi_enable_clock+0xe>
  405724:	40008000 	.word	0x40008000
  405728:	40058000 	.word	0x40058000
  40572c:	004056b1 	.word	0x004056b1

00405730 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  405730:	6843      	ldr	r3, [r0, #4]
  405732:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  405736:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  405738:	6843      	ldr	r3, [r0, #4]
  40573a:	0409      	lsls	r1, r1, #16
  40573c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  405740:	4319      	orrs	r1, r3
  405742:	6041      	str	r1, [r0, #4]
  405744:	4770      	bx	lr

00405746 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  405746:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  405748:	f643 2399 	movw	r3, #15001	; 0x3a99
  40574c:	6904      	ldr	r4, [r0, #16]
  40574e:	f014 0f01 	tst.w	r4, #1
  405752:	d103      	bne.n	40575c <spi_read+0x16>
		if (!timeout--) {
  405754:	3b01      	subs	r3, #1
  405756:	d1f9      	bne.n	40574c <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  405758:	2001      	movs	r0, #1
  40575a:	e009      	b.n	405770 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  40575c:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40575e:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  405760:	f010 0f02 	tst.w	r0, #2
  405764:	d002      	beq.n	40576c <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  405766:	f3c3 4003 	ubfx	r0, r3, #16, #4
  40576a:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  40576c:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  40576e:	2000      	movs	r0, #0
}
  405770:	f85d 4b04 	ldr.w	r4, [sp], #4
  405774:	4770      	bx	lr

00405776 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  405776:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  405778:	f643 2499 	movw	r4, #15001	; 0x3a99
  40577c:	6905      	ldr	r5, [r0, #16]
  40577e:	f015 0f02 	tst.w	r5, #2
  405782:	d103      	bne.n	40578c <spi_write+0x16>
		if (!timeout--) {
  405784:	3c01      	subs	r4, #1
  405786:	d1f9      	bne.n	40577c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  405788:	2001      	movs	r0, #1
  40578a:	e00c      	b.n	4057a6 <spi_write+0x30>
  40578c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40578e:	f014 0f02 	tst.w	r4, #2
  405792:	d006      	beq.n	4057a2 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  405794:	0412      	lsls	r2, r2, #16
  405796:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40579a:	4311      	orrs	r1, r2
		if (uc_last) {
  40579c:	b10b      	cbz	r3, 4057a2 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40579e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4057a2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4057a4:	2000      	movs	r0, #0
}
  4057a6:	bc30      	pop	{r4, r5}
  4057a8:	4770      	bx	lr

004057aa <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4057aa:	b932      	cbnz	r2, 4057ba <spi_set_clock_polarity+0x10>
  4057ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4057b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4057b2:	f023 0301 	bic.w	r3, r3, #1
  4057b6:	6303      	str	r3, [r0, #48]	; 0x30
  4057b8:	4770      	bx	lr
  4057ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4057be:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4057c0:	f043 0301 	orr.w	r3, r3, #1
  4057c4:	6303      	str	r3, [r0, #48]	; 0x30
  4057c6:	4770      	bx	lr

004057c8 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4057c8:	b932      	cbnz	r2, 4057d8 <spi_set_clock_phase+0x10>
  4057ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4057ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4057d0:	f023 0302 	bic.w	r3, r3, #2
  4057d4:	6303      	str	r3, [r0, #48]	; 0x30
  4057d6:	4770      	bx	lr
  4057d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4057dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4057de:	f043 0302 	orr.w	r3, r3, #2
  4057e2:	6303      	str	r3, [r0, #48]	; 0x30
  4057e4:	4770      	bx	lr

004057e6 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4057e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4057ea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4057ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4057f0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4057f2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4057f4:	431a      	orrs	r2, r3
  4057f6:	630a      	str	r2, [r1, #48]	; 0x30
  4057f8:	4770      	bx	lr

004057fa <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4057fa:	1e43      	subs	r3, r0, #1
  4057fc:	4419      	add	r1, r3
  4057fe:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  405802:	1e43      	subs	r3, r0, #1
  405804:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  405806:	bf94      	ite	ls
  405808:	b200      	sxthls	r0, r0
		return -1;
  40580a:	f04f 30ff 	movhi.w	r0, #4294967295
}
  40580e:	4770      	bx	lr

00405810 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  405810:	b17a      	cbz	r2, 405832 <spi_set_baudrate_div+0x22>
{
  405812:	b410      	push	{r4}
  405814:	4614      	mov	r4, r2
  405816:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40581a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40581c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  405820:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  405822:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  405824:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  405828:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40582a:	2000      	movs	r0, #0
}
  40582c:	f85d 4b04 	ldr.w	r4, [sp], #4
  405830:	4770      	bx	lr
        return -1;
  405832:	f04f 30ff 	mov.w	r0, #4294967295
  405836:	4770      	bx	lr

00405838 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  405838:	b410      	push	{r4}
  40583a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  40583e:	6b08      	ldr	r0, [r1, #48]	; 0x30
  405840:	b280      	uxth	r0, r0
  405842:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  405844:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  405846:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  40584a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40584e:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  405850:	f85d 4b04 	ldr.w	r4, [sp], #4
  405854:	4770      	bx	lr

00405856 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  405856:	6943      	ldr	r3, [r0, #20]
  405858:	f013 0f02 	tst.w	r3, #2
  40585c:	d002      	beq.n	405864 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40585e:	61c1      	str	r1, [r0, #28]
	return 0;
  405860:	2000      	movs	r0, #0
  405862:	4770      	bx	lr
		return 1;
  405864:	2001      	movs	r0, #1
}
  405866:	4770      	bx	lr

00405868 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  405868:	6943      	ldr	r3, [r0, #20]
  40586a:	f013 0f01 	tst.w	r3, #1
  40586e:	d003      	beq.n	405878 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  405870:	6983      	ldr	r3, [r0, #24]
  405872:	700b      	strb	r3, [r1, #0]
	return 0;
  405874:	2000      	movs	r0, #0
  405876:	4770      	bx	lr
		return 1;
  405878:	2001      	movs	r0, #1
}
  40587a:	4770      	bx	lr

0040587c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40587c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40587e:	010b      	lsls	r3, r1, #4
  405880:	4293      	cmp	r3, r2
  405882:	d914      	bls.n	4058ae <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  405884:	00c9      	lsls	r1, r1, #3
  405886:	084b      	lsrs	r3, r1, #1
  405888:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40588c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  405890:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  405892:	1e5c      	subs	r4, r3, #1
  405894:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  405898:	428c      	cmp	r4, r1
  40589a:	d901      	bls.n	4058a0 <usart_set_async_baudrate+0x24>
		return 1;
  40589c:	2001      	movs	r0, #1
  40589e:	e017      	b.n	4058d0 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4058a0:	6841      	ldr	r1, [r0, #4]
  4058a2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4058a6:	6041      	str	r1, [r0, #4]
  4058a8:	e00c      	b.n	4058c4 <usart_set_async_baudrate+0x48>
		return 1;
  4058aa:	2001      	movs	r0, #1
  4058ac:	e010      	b.n	4058d0 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4058ae:	0859      	lsrs	r1, r3, #1
  4058b0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4058b4:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4058b8:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4058ba:	1e5c      	subs	r4, r3, #1
  4058bc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4058c0:	428c      	cmp	r4, r1
  4058c2:	d8f2      	bhi.n	4058aa <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4058c4:	0412      	lsls	r2, r2, #16
  4058c6:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4058ca:	431a      	orrs	r2, r3
  4058cc:	6202      	str	r2, [r0, #32]

	return 0;
  4058ce:	2000      	movs	r0, #0
}
  4058d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4058d4:	4770      	bx	lr
	...

004058d8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4058d8:	4b08      	ldr	r3, [pc, #32]	; (4058fc <usart_reset+0x24>)
  4058da:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4058de:	2300      	movs	r3, #0
  4058e0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4058e2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4058e4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4058e6:	2388      	movs	r3, #136	; 0x88
  4058e8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4058ea:	2324      	movs	r3, #36	; 0x24
  4058ec:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4058ee:	f44f 7380 	mov.w	r3, #256	; 0x100
  4058f2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4058f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4058f8:	6003      	str	r3, [r0, #0]
  4058fa:	4770      	bx	lr
  4058fc:	55534100 	.word	0x55534100

00405900 <usart_init_rs232>:
{
  405900:	b570      	push	{r4, r5, r6, lr}
  405902:	4605      	mov	r5, r0
  405904:	460c      	mov	r4, r1
  405906:	4616      	mov	r6, r2
	usart_reset(p_usart);
  405908:	4b0f      	ldr	r3, [pc, #60]	; (405948 <usart_init_rs232+0x48>)
  40590a:	4798      	blx	r3
	ul_reg_val = 0;
  40590c:	2200      	movs	r2, #0
  40590e:	4b0f      	ldr	r3, [pc, #60]	; (40594c <usart_init_rs232+0x4c>)
  405910:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  405912:	b1a4      	cbz	r4, 40593e <usart_init_rs232+0x3e>
  405914:	4632      	mov	r2, r6
  405916:	6821      	ldr	r1, [r4, #0]
  405918:	4628      	mov	r0, r5
  40591a:	4b0d      	ldr	r3, [pc, #52]	; (405950 <usart_init_rs232+0x50>)
  40591c:	4798      	blx	r3
  40591e:	4602      	mov	r2, r0
  405920:	b978      	cbnz	r0, 405942 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405922:	6863      	ldr	r3, [r4, #4]
  405924:	68a1      	ldr	r1, [r4, #8]
  405926:	430b      	orrs	r3, r1
  405928:	6921      	ldr	r1, [r4, #16]
  40592a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40592c:	68e1      	ldr	r1, [r4, #12]
  40592e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405930:	4906      	ldr	r1, [pc, #24]	; (40594c <usart_init_rs232+0x4c>)
  405932:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  405934:	6869      	ldr	r1, [r5, #4]
  405936:	430b      	orrs	r3, r1
  405938:	606b      	str	r3, [r5, #4]
}
  40593a:	4610      	mov	r0, r2
  40593c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40593e:	2201      	movs	r2, #1
  405940:	e7fb      	b.n	40593a <usart_init_rs232+0x3a>
  405942:	2201      	movs	r2, #1
  405944:	e7f9      	b.n	40593a <usart_init_rs232+0x3a>
  405946:	bf00      	nop
  405948:	004058d9 	.word	0x004058d9
  40594c:	2040c3e0 	.word	0x2040c3e0
  405950:	0040587d 	.word	0x0040587d

00405954 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  405954:	2340      	movs	r3, #64	; 0x40
  405956:	6003      	str	r3, [r0, #0]
  405958:	4770      	bx	lr

0040595a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40595a:	2310      	movs	r3, #16
  40595c:	6003      	str	r3, [r0, #0]
  40595e:	4770      	bx	lr

00405960 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  405960:	6943      	ldr	r3, [r0, #20]
  405962:	f013 0f02 	tst.w	r3, #2
  405966:	d004      	beq.n	405972 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  405968:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40596c:	61c1      	str	r1, [r0, #28]
	return 0;
  40596e:	2000      	movs	r0, #0
  405970:	4770      	bx	lr
		return 1;
  405972:	2001      	movs	r0, #1
}
  405974:	4770      	bx	lr

00405976 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  405976:	6943      	ldr	r3, [r0, #20]
  405978:	f013 0f01 	tst.w	r3, #1
  40597c:	d005      	beq.n	40598a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40597e:	6983      	ldr	r3, [r0, #24]
  405980:	f3c3 0308 	ubfx	r3, r3, #0, #9
  405984:	600b      	str	r3, [r1, #0]
	return 0;
  405986:	2000      	movs	r0, #0
  405988:	4770      	bx	lr
		return 1;
  40598a:	2001      	movs	r0, #1
}
  40598c:	4770      	bx	lr

0040598e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40598e:	e7fe      	b.n	40598e <Dummy_Handler>

00405990 <Reset_Handler>:
{
  405990:	b500      	push	{lr}
  405992:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  405994:	4b25      	ldr	r3, [pc, #148]	; (405a2c <Reset_Handler+0x9c>)
  405996:	4a26      	ldr	r2, [pc, #152]	; (405a30 <Reset_Handler+0xa0>)
  405998:	429a      	cmp	r2, r3
  40599a:	d010      	beq.n	4059be <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40599c:	4b25      	ldr	r3, [pc, #148]	; (405a34 <Reset_Handler+0xa4>)
  40599e:	4a23      	ldr	r2, [pc, #140]	; (405a2c <Reset_Handler+0x9c>)
  4059a0:	429a      	cmp	r2, r3
  4059a2:	d20c      	bcs.n	4059be <Reset_Handler+0x2e>
  4059a4:	3b01      	subs	r3, #1
  4059a6:	1a9b      	subs	r3, r3, r2
  4059a8:	f023 0303 	bic.w	r3, r3, #3
  4059ac:	3304      	adds	r3, #4
  4059ae:	4413      	add	r3, r2
  4059b0:	491f      	ldr	r1, [pc, #124]	; (405a30 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4059b2:	f851 0b04 	ldr.w	r0, [r1], #4
  4059b6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4059ba:	429a      	cmp	r2, r3
  4059bc:	d1f9      	bne.n	4059b2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4059be:	4b1e      	ldr	r3, [pc, #120]	; (405a38 <Reset_Handler+0xa8>)
  4059c0:	4a1e      	ldr	r2, [pc, #120]	; (405a3c <Reset_Handler+0xac>)
  4059c2:	429a      	cmp	r2, r3
  4059c4:	d20a      	bcs.n	4059dc <Reset_Handler+0x4c>
  4059c6:	3b01      	subs	r3, #1
  4059c8:	1a9b      	subs	r3, r3, r2
  4059ca:	f023 0303 	bic.w	r3, r3, #3
  4059ce:	3304      	adds	r3, #4
  4059d0:	4413      	add	r3, r2
                *pDest++ = 0;
  4059d2:	2100      	movs	r1, #0
  4059d4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4059d8:	4293      	cmp	r3, r2
  4059da:	d1fb      	bne.n	4059d4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4059dc:	4a18      	ldr	r2, [pc, #96]	; (405a40 <Reset_Handler+0xb0>)
  4059de:	4b19      	ldr	r3, [pc, #100]	; (405a44 <Reset_Handler+0xb4>)
  4059e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4059e4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4059e6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4059ea:	fab3 f383 	clz	r3, r3
  4059ee:	095b      	lsrs	r3, r3, #5
  4059f0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4059f2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4059f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4059f8:	2200      	movs	r2, #0
  4059fa:	4b13      	ldr	r3, [pc, #76]	; (405a48 <Reset_Handler+0xb8>)
  4059fc:	701a      	strb	r2, [r3, #0]
	return flags;
  4059fe:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  405a00:	4a12      	ldr	r2, [pc, #72]	; (405a4c <Reset_Handler+0xbc>)
  405a02:	6813      	ldr	r3, [r2, #0]
  405a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  405a08:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  405a0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405a0e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  405a12:	b129      	cbz	r1, 405a20 <Reset_Handler+0x90>
		cpu_irq_enable();
  405a14:	2201      	movs	r2, #1
  405a16:	4b0c      	ldr	r3, [pc, #48]	; (405a48 <Reset_Handler+0xb8>)
  405a18:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  405a1a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405a1e:	b662      	cpsie	i
        __libc_init_array();
  405a20:	4b0b      	ldr	r3, [pc, #44]	; (405a50 <Reset_Handler+0xc0>)
  405a22:	4798      	blx	r3
        main();
  405a24:	4b0b      	ldr	r3, [pc, #44]	; (405a54 <Reset_Handler+0xc4>)
  405a26:	4798      	blx	r3
  405a28:	e7fe      	b.n	405a28 <Reset_Handler+0x98>
  405a2a:	bf00      	nop
  405a2c:	20400000 	.word	0x20400000
  405a30:	0040dd04 	.word	0x0040dd04
  405a34:	204009d8 	.word	0x204009d8
  405a38:	2040cbe8 	.word	0x2040cbe8
  405a3c:	204009d8 	.word	0x204009d8
  405a40:	e000ed00 	.word	0xe000ed00
  405a44:	00400000 	.word	0x00400000
  405a48:	20400018 	.word	0x20400018
  405a4c:	e000ed88 	.word	0xe000ed88
  405a50:	004065c1 	.word	0x004065c1
  405a54:	004064a9 	.word	0x004064a9

00405a58 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  405a58:	4b3b      	ldr	r3, [pc, #236]	; (405b48 <SystemCoreClockUpdate+0xf0>)
  405a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405a5c:	f003 0303 	and.w	r3, r3, #3
  405a60:	2b01      	cmp	r3, #1
  405a62:	d01d      	beq.n	405aa0 <SystemCoreClockUpdate+0x48>
  405a64:	b183      	cbz	r3, 405a88 <SystemCoreClockUpdate+0x30>
  405a66:	2b02      	cmp	r3, #2
  405a68:	d036      	beq.n	405ad8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  405a6a:	4b37      	ldr	r3, [pc, #220]	; (405b48 <SystemCoreClockUpdate+0xf0>)
  405a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405a72:	2b70      	cmp	r3, #112	; 0x70
  405a74:	d05f      	beq.n	405b36 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  405a76:	4b34      	ldr	r3, [pc, #208]	; (405b48 <SystemCoreClockUpdate+0xf0>)
  405a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  405a7a:	4934      	ldr	r1, [pc, #208]	; (405b4c <SystemCoreClockUpdate+0xf4>)
  405a7c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  405a80:	680b      	ldr	r3, [r1, #0]
  405a82:	40d3      	lsrs	r3, r2
  405a84:	600b      	str	r3, [r1, #0]
  405a86:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  405a88:	4b31      	ldr	r3, [pc, #196]	; (405b50 <SystemCoreClockUpdate+0xf8>)
  405a8a:	695b      	ldr	r3, [r3, #20]
  405a8c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  405a90:	bf14      	ite	ne
  405a92:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405a96:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  405a9a:	4b2c      	ldr	r3, [pc, #176]	; (405b4c <SystemCoreClockUpdate+0xf4>)
  405a9c:	601a      	str	r2, [r3, #0]
  405a9e:	e7e4      	b.n	405a6a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405aa0:	4b29      	ldr	r3, [pc, #164]	; (405b48 <SystemCoreClockUpdate+0xf0>)
  405aa2:	6a1b      	ldr	r3, [r3, #32]
  405aa4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405aa8:	d003      	beq.n	405ab2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  405aaa:	4a2a      	ldr	r2, [pc, #168]	; (405b54 <SystemCoreClockUpdate+0xfc>)
  405aac:	4b27      	ldr	r3, [pc, #156]	; (405b4c <SystemCoreClockUpdate+0xf4>)
  405aae:	601a      	str	r2, [r3, #0]
  405ab0:	e7db      	b.n	405a6a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405ab2:	4a29      	ldr	r2, [pc, #164]	; (405b58 <SystemCoreClockUpdate+0x100>)
  405ab4:	4b25      	ldr	r3, [pc, #148]	; (405b4c <SystemCoreClockUpdate+0xf4>)
  405ab6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405ab8:	4b23      	ldr	r3, [pc, #140]	; (405b48 <SystemCoreClockUpdate+0xf0>)
  405aba:	6a1b      	ldr	r3, [r3, #32]
  405abc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405ac0:	2b10      	cmp	r3, #16
  405ac2:	d005      	beq.n	405ad0 <SystemCoreClockUpdate+0x78>
  405ac4:	2b20      	cmp	r3, #32
  405ac6:	d1d0      	bne.n	405a6a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  405ac8:	4a22      	ldr	r2, [pc, #136]	; (405b54 <SystemCoreClockUpdate+0xfc>)
  405aca:	4b20      	ldr	r3, [pc, #128]	; (405b4c <SystemCoreClockUpdate+0xf4>)
  405acc:	601a      	str	r2, [r3, #0]
          break;
  405ace:	e7cc      	b.n	405a6a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  405ad0:	4a22      	ldr	r2, [pc, #136]	; (405b5c <SystemCoreClockUpdate+0x104>)
  405ad2:	4b1e      	ldr	r3, [pc, #120]	; (405b4c <SystemCoreClockUpdate+0xf4>)
  405ad4:	601a      	str	r2, [r3, #0]
          break;
  405ad6:	e7c8      	b.n	405a6a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405ad8:	4b1b      	ldr	r3, [pc, #108]	; (405b48 <SystemCoreClockUpdate+0xf0>)
  405ada:	6a1b      	ldr	r3, [r3, #32]
  405adc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405ae0:	d016      	beq.n	405b10 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  405ae2:	4a1c      	ldr	r2, [pc, #112]	; (405b54 <SystemCoreClockUpdate+0xfc>)
  405ae4:	4b19      	ldr	r3, [pc, #100]	; (405b4c <SystemCoreClockUpdate+0xf4>)
  405ae6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  405ae8:	4b17      	ldr	r3, [pc, #92]	; (405b48 <SystemCoreClockUpdate+0xf0>)
  405aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405aec:	f003 0303 	and.w	r3, r3, #3
  405af0:	2b02      	cmp	r3, #2
  405af2:	d1ba      	bne.n	405a6a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405af4:	4a14      	ldr	r2, [pc, #80]	; (405b48 <SystemCoreClockUpdate+0xf0>)
  405af6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405af8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  405afa:	4814      	ldr	r0, [pc, #80]	; (405b4c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405afc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  405b00:	6803      	ldr	r3, [r0, #0]
  405b02:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405b06:	b2d2      	uxtb	r2, r2
  405b08:	fbb3 f3f2 	udiv	r3, r3, r2
  405b0c:	6003      	str	r3, [r0, #0]
  405b0e:	e7ac      	b.n	405a6a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405b10:	4a11      	ldr	r2, [pc, #68]	; (405b58 <SystemCoreClockUpdate+0x100>)
  405b12:	4b0e      	ldr	r3, [pc, #56]	; (405b4c <SystemCoreClockUpdate+0xf4>)
  405b14:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405b16:	4b0c      	ldr	r3, [pc, #48]	; (405b48 <SystemCoreClockUpdate+0xf0>)
  405b18:	6a1b      	ldr	r3, [r3, #32]
  405b1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405b1e:	2b10      	cmp	r3, #16
  405b20:	d005      	beq.n	405b2e <SystemCoreClockUpdate+0xd6>
  405b22:	2b20      	cmp	r3, #32
  405b24:	d1e0      	bne.n	405ae8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  405b26:	4a0b      	ldr	r2, [pc, #44]	; (405b54 <SystemCoreClockUpdate+0xfc>)
  405b28:	4b08      	ldr	r3, [pc, #32]	; (405b4c <SystemCoreClockUpdate+0xf4>)
  405b2a:	601a      	str	r2, [r3, #0]
          break;
  405b2c:	e7dc      	b.n	405ae8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  405b2e:	4a0b      	ldr	r2, [pc, #44]	; (405b5c <SystemCoreClockUpdate+0x104>)
  405b30:	4b06      	ldr	r3, [pc, #24]	; (405b4c <SystemCoreClockUpdate+0xf4>)
  405b32:	601a      	str	r2, [r3, #0]
          break;
  405b34:	e7d8      	b.n	405ae8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  405b36:	4a05      	ldr	r2, [pc, #20]	; (405b4c <SystemCoreClockUpdate+0xf4>)
  405b38:	6813      	ldr	r3, [r2, #0]
  405b3a:	4909      	ldr	r1, [pc, #36]	; (405b60 <SystemCoreClockUpdate+0x108>)
  405b3c:	fba1 1303 	umull	r1, r3, r1, r3
  405b40:	085b      	lsrs	r3, r3, #1
  405b42:	6013      	str	r3, [r2, #0]
  405b44:	4770      	bx	lr
  405b46:	bf00      	nop
  405b48:	400e0600 	.word	0x400e0600
  405b4c:	2040001c 	.word	0x2040001c
  405b50:	400e1810 	.word	0x400e1810
  405b54:	00b71b00 	.word	0x00b71b00
  405b58:	003d0900 	.word	0x003d0900
  405b5c:	007a1200 	.word	0x007a1200
  405b60:	aaaaaaab 	.word	0xaaaaaaab

00405b64 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  405b64:	4b12      	ldr	r3, [pc, #72]	; (405bb0 <system_init_flash+0x4c>)
  405b66:	4298      	cmp	r0, r3
  405b68:	d911      	bls.n	405b8e <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  405b6a:	4b12      	ldr	r3, [pc, #72]	; (405bb4 <system_init_flash+0x50>)
  405b6c:	4298      	cmp	r0, r3
  405b6e:	d913      	bls.n	405b98 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  405b70:	4b11      	ldr	r3, [pc, #68]	; (405bb8 <system_init_flash+0x54>)
  405b72:	4298      	cmp	r0, r3
  405b74:	d914      	bls.n	405ba0 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  405b76:	4b11      	ldr	r3, [pc, #68]	; (405bbc <system_init_flash+0x58>)
  405b78:	4298      	cmp	r0, r3
  405b7a:	d915      	bls.n	405ba8 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  405b7c:	4b10      	ldr	r3, [pc, #64]	; (405bc0 <system_init_flash+0x5c>)
  405b7e:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  405b80:	bf94      	ite	ls
  405b82:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  405b86:	4a0f      	ldrhi	r2, [pc, #60]	; (405bc4 <system_init_flash+0x60>)
  405b88:	4b0f      	ldr	r3, [pc, #60]	; (405bc8 <system_init_flash+0x64>)
  405b8a:	601a      	str	r2, [r3, #0]
  405b8c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  405b8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  405b92:	4b0d      	ldr	r3, [pc, #52]	; (405bc8 <system_init_flash+0x64>)
  405b94:	601a      	str	r2, [r3, #0]
  405b96:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  405b98:	4a0c      	ldr	r2, [pc, #48]	; (405bcc <system_init_flash+0x68>)
  405b9a:	4b0b      	ldr	r3, [pc, #44]	; (405bc8 <system_init_flash+0x64>)
  405b9c:	601a      	str	r2, [r3, #0]
  405b9e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  405ba0:	4a0b      	ldr	r2, [pc, #44]	; (405bd0 <system_init_flash+0x6c>)
  405ba2:	4b09      	ldr	r3, [pc, #36]	; (405bc8 <system_init_flash+0x64>)
  405ba4:	601a      	str	r2, [r3, #0]
  405ba6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  405ba8:	4a0a      	ldr	r2, [pc, #40]	; (405bd4 <system_init_flash+0x70>)
  405baa:	4b07      	ldr	r3, [pc, #28]	; (405bc8 <system_init_flash+0x64>)
  405bac:	601a      	str	r2, [r3, #0]
  405bae:	4770      	bx	lr
  405bb0:	01312cff 	.word	0x01312cff
  405bb4:	026259ff 	.word	0x026259ff
  405bb8:	039386ff 	.word	0x039386ff
  405bbc:	04c4b3ff 	.word	0x04c4b3ff
  405bc0:	05f5e0ff 	.word	0x05f5e0ff
  405bc4:	04000500 	.word	0x04000500
  405bc8:	400e0c00 	.word	0x400e0c00
  405bcc:	04000100 	.word	0x04000100
  405bd0:	04000200 	.word	0x04000200
  405bd4:	04000300 	.word	0x04000300

00405bd8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  405bd8:	4b0a      	ldr	r3, [pc, #40]	; (405c04 <_sbrk+0x2c>)
  405bda:	681b      	ldr	r3, [r3, #0]
  405bdc:	b153      	cbz	r3, 405bf4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  405bde:	4b09      	ldr	r3, [pc, #36]	; (405c04 <_sbrk+0x2c>)
  405be0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  405be2:	181a      	adds	r2, r3, r0
  405be4:	4908      	ldr	r1, [pc, #32]	; (405c08 <_sbrk+0x30>)
  405be6:	4291      	cmp	r1, r2
  405be8:	db08      	blt.n	405bfc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  405bea:	4610      	mov	r0, r2
  405bec:	4a05      	ldr	r2, [pc, #20]	; (405c04 <_sbrk+0x2c>)
  405bee:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  405bf0:	4618      	mov	r0, r3
  405bf2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  405bf4:	4a05      	ldr	r2, [pc, #20]	; (405c0c <_sbrk+0x34>)
  405bf6:	4b03      	ldr	r3, [pc, #12]	; (405c04 <_sbrk+0x2c>)
  405bf8:	601a      	str	r2, [r3, #0]
  405bfa:	e7f0      	b.n	405bde <_sbrk+0x6>
		return (caddr_t) -1;	
  405bfc:	f04f 30ff 	mov.w	r0, #4294967295
}
  405c00:	4770      	bx	lr
  405c02:	bf00      	nop
  405c04:	2040c3e4 	.word	0x2040c3e4
  405c08:	2045fffc 	.word	0x2045fffc
  405c0c:	2040ede8 	.word	0x2040ede8

00405c10 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  405c10:	f04f 30ff 	mov.w	r0, #4294967295
  405c14:	4770      	bx	lr

00405c16 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  405c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  405c1a:	604b      	str	r3, [r1, #4]

	return 0;
}
  405c1c:	2000      	movs	r0, #0
  405c1e:	4770      	bx	lr

00405c20 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  405c20:	2001      	movs	r0, #1
  405c22:	4770      	bx	lr

00405c24 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  405c24:	2000      	movs	r0, #0
  405c26:	4770      	bx	lr

00405c28 <resolve_cb>:
 *
 * \return None.
 */
static void resolve_cb
(uint8_t *hostName, uint32_t hostIp)
{
  405c28:	b510      	push	{r4, lr}
  405c2a:	b082      	sub	sp, #8
	gu32HostIp = hostIp;
  405c2c:	4b07      	ldr	r3, [pc, #28]	; (405c4c <resolve_cb+0x24>)
  405c2e:	6019      	str	r1, [r3, #0]
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  405c30:	0e0b      	lsrs	r3, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  405c32:	9301      	str	r3, [sp, #4]
  405c34:	f3c1 4307 	ubfx	r3, r1, #16, #8
  405c38:	9300      	str	r3, [sp, #0]
  405c3a:	f3c1 2307 	ubfx	r3, r1, #8, #8
  405c3e:	b2ca      	uxtb	r2, r1
  405c40:	4601      	mov	r1, r0
  405c42:	4803      	ldr	r0, [pc, #12]	; (405c50 <resolve_cb+0x28>)
  405c44:	4c03      	ldr	r4, [pc, #12]	; (405c54 <resolve_cb+0x2c>)
  405c46:	47a0      	blx	r4
}
  405c48:	b002      	add	sp, #8
  405c4a:	bd10      	pop	{r4, pc}
  405c4c:	2040c968 	.word	0x2040c968
  405c50:	0040d7b0 	.word	0x0040d7b0
  405c54:	00406611 	.word	0x00406611

00405c58 <but1_callback>:
static void but1_callback(void) {
  405c58:	b500      	push	{lr}
  405c5a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  405c5c:	a902      	add	r1, sp, #8
  405c5e:	2301      	movs	r3, #1
  405c60:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreData, &xHigherPriorityTaskWoken);
  405c64:	4b03      	ldr	r3, [pc, #12]	; (405c74 <but1_callback+0x1c>)
  405c66:	6818      	ldr	r0, [r3, #0]
  405c68:	4b03      	ldr	r3, [pc, #12]	; (405c78 <but1_callback+0x20>)
  405c6a:	4798      	blx	r3
}
  405c6c:	b003      	add	sp, #12
  405c6e:	f85d fb04 	ldr.w	pc, [sp], #4
  405c72:	bf00      	nop
  405c74:	2040cbb8 	.word	0x2040cbb8
  405c78:	0040101d 	.word	0x0040101d

00405c7c <AFEC_Temp_callback>:
{
  405c7c:	b510      	push	{r4, lr}
  405c7e:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  405c80:	4b06      	ldr	r3, [pc, #24]	; (405c9c <AFEC_Temp_callback+0x20>)
  405c82:	2200      	movs	r2, #0
  405c84:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  405c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	uint32_t g_ul_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_TEMP_SENSOR);
  405c88:	a902      	add	r1, sp, #8
  405c8a:	f841 3d04 	str.w	r3, [r1, #-4]!
	xQueueSendFromISR(xQueueData,&(g_ul_value),0);
  405c8e:	4613      	mov	r3, r2
  405c90:	4803      	ldr	r0, [pc, #12]	; (405ca0 <AFEC_Temp_callback+0x24>)
  405c92:	6800      	ldr	r0, [r0, #0]
  405c94:	4c03      	ldr	r4, [pc, #12]	; (405ca4 <AFEC_Temp_callback+0x28>)
  405c96:	47a0      	blx	r4
}
  405c98:	b002      	add	sp, #8
  405c9a:	bd10      	pop	{r4, pc}
  405c9c:	4003c000 	.word	0x4003c000
  405ca0:	2040cbbc 	.word	0x2040cbbc
  405ca4:	00400f1d 	.word	0x00400f1d

00405ca8 <socket_cb>:
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
  
	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
  405ca8:	4b43      	ldr	r3, [pc, #268]	; (405db8 <socket_cb+0x110>)
  405caa:	f993 3000 	ldrsb.w	r3, [r3]
  405cae:	4283      	cmp	r3, r0
  405cb0:	d000      	beq.n	405cb4 <socket_cb+0xc>
  405cb2:	4770      	bx	lr
{
  405cb4:	b570      	push	{r4, r5, r6, lr}
  405cb6:	4614      	mov	r4, r2
    
		switch (u8Msg) {
  405cb8:	2905      	cmp	r1, #5
  405cba:	d002      	beq.n	405cc2 <socket_cb+0x1a>
  405cbc:	2906      	cmp	r1, #6
  405cbe:	d057      	beq.n	405d70 <socket_cb+0xc8>
  405cc0:	bd70      	pop	{r4, r5, r6, pc}
		case SOCKET_MSG_CONNECT:
		{
      printf("socket_msg_connect\n"); 
  405cc2:	483e      	ldr	r0, [pc, #248]	; (405dbc <socket_cb+0x114>)
  405cc4:	4b3e      	ldr	r3, [pc, #248]	; (405dc0 <socket_cb+0x118>)
  405cc6:	4798      	blx	r3
			if (gbTcpConnection) {
  405cc8:	4b3e      	ldr	r3, [pc, #248]	; (405dc4 <socket_cb+0x11c>)
  405cca:	781b      	ldrb	r3, [r3, #0]
  405ccc:	2b00      	cmp	r3, #0
  405cce:	d05e      	beq.n	405d8e <socket_cb+0xe6>
				
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  405cd0:	f44f 62af 	mov.w	r2, #1400	; 0x578
  405cd4:	2100      	movs	r1, #0
  405cd6:	483c      	ldr	r0, [pc, #240]	; (405dc8 <socket_cb+0x120>)
  405cd8:	4b3c      	ldr	r3, [pc, #240]	; (405dcc <socket_cb+0x124>)
  405cda:	4798      	blx	r3
				
				if(data_release){
  405cdc:	4b3c      	ldr	r3, [pc, #240]	; (405dd0 <socket_cb+0x128>)
  405cde:	781b      	ldrb	r3, [r3, #0]
  405ce0:	2b00      	cmp	r3, #0
  405ce2:	d02b      	beq.n	405d3c <socket_cb+0x94>
					sprintf((char *)gau8ReceivedBuffer, "%s", data);
  405ce4:	493b      	ldr	r1, [pc, #236]	; (405dd4 <socket_cb+0x12c>)
  405ce6:	4838      	ldr	r0, [pc, #224]	; (405dc8 <socket_cb+0x120>)
  405ce8:	4b3b      	ldr	r3, [pc, #236]	; (405dd8 <socket_cb+0x130>)
  405cea:	4798      	blx	r3
					sprintf((char *)gau8ReceivedBuffer, "%s", MAIN_PREFIX_BUFFER0);
				}
				
				
				tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
				if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  405cec:	2c00      	cmp	r4, #0
  405cee:	d031      	beq.n	405d54 <socket_cb+0xac>
  405cf0:	f994 3001 	ldrsb.w	r3, [r4, #1]
  405cf4:	2b00      	cmp	r3, #0
  405cf6:	db2d      	blt.n	405d54 <socket_cb+0xac>
          printf("send \n");
  405cf8:	4838      	ldr	r0, [pc, #224]	; (405ddc <socket_cb+0x134>)
  405cfa:	4b31      	ldr	r3, [pc, #196]	; (405dc0 <socket_cb+0x118>)
  405cfc:	4798      	blx	r3
					send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  405cfe:	4c32      	ldr	r4, [pc, #200]	; (405dc8 <socket_cb+0x120>)
  405d00:	4620      	mov	r0, r4
  405d02:	4b37      	ldr	r3, [pc, #220]	; (405de0 <socket_cb+0x138>)
  405d04:	4798      	blx	r3
  405d06:	4d2c      	ldr	r5, [pc, #176]	; (405db8 <socket_cb+0x110>)
  405d08:	2300      	movs	r3, #0
  405d0a:	b282      	uxth	r2, r0
  405d0c:	4621      	mov	r1, r4
  405d0e:	f995 0000 	ldrsb.w	r0, [r5]
  405d12:	4e34      	ldr	r6, [pc, #208]	; (405de4 <socket_cb+0x13c>)
  405d14:	47b0      	blx	r6

					memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  405d16:	f44f 66af 	mov.w	r6, #1400	; 0x578
  405d1a:	4632      	mov	r2, r6
  405d1c:	2100      	movs	r1, #0
  405d1e:	4620      	mov	r0, r4
  405d20:	4b2a      	ldr	r3, [pc, #168]	; (405dcc <socket_cb+0x124>)
  405d22:	4798      	blx	r3
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  405d24:	2300      	movs	r3, #0
  405d26:	4632      	mov	r2, r6
  405d28:	4621      	mov	r1, r4
  405d2a:	f995 0000 	ldrsb.w	r0, [r5]
  405d2e:	4c2e      	ldr	r4, [pc, #184]	; (405de8 <socket_cb+0x140>)
  405d30:	47a0      	blx	r4
					vTaskDelay((TickType_t)1000/portTICK_PERIOD_MS);
  405d32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  405d36:	4b2d      	ldr	r3, [pc, #180]	; (405dec <socket_cb+0x144>)
  405d38:	4798      	blx	r3
  405d3a:	bd70      	pop	{r4, r5, r6, pc}
					sprintf((char *)gau8ReceivedBuffer, "%s", MAIN_PREFIX_BUFFER0);
  405d3c:	4d22      	ldr	r5, [pc, #136]	; (405dc8 <socket_cb+0x120>)
  405d3e:	4e2c      	ldr	r6, [pc, #176]	; (405df0 <socket_cb+0x148>)
  405d40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  405d42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  405d44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  405d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  405d48:	6833      	ldr	r3, [r6, #0]
  405d4a:	f825 3b02 	strh.w	r3, [r5], #2
  405d4e:	0c1b      	lsrs	r3, r3, #16
  405d50:	702b      	strb	r3, [r5, #0]
  405d52:	e7cb      	b.n	405cec <socket_cb+0x44>
				} else {
					printf("socket_cb: connect error!\r\n");
  405d54:	4827      	ldr	r0, [pc, #156]	; (405df4 <socket_cb+0x14c>)
  405d56:	4b1a      	ldr	r3, [pc, #104]	; (405dc0 <socket_cb+0x118>)
  405d58:	4798      	blx	r3
					gbTcpConnection = false;
  405d5a:	2200      	movs	r2, #0
  405d5c:	4b19      	ldr	r3, [pc, #100]	; (405dc4 <socket_cb+0x11c>)
  405d5e:	701a      	strb	r2, [r3, #0]
					close(tcp_client_socket);
  405d60:	4c15      	ldr	r4, [pc, #84]	; (405db8 <socket_cb+0x110>)
  405d62:	f994 0000 	ldrsb.w	r0, [r4]
  405d66:	4b24      	ldr	r3, [pc, #144]	; (405df8 <socket_cb+0x150>)
  405d68:	4798      	blx	r3
					tcp_client_socket = -1;
  405d6a:	23ff      	movs	r3, #255	; 0xff
  405d6c:	7023      	strb	r3, [r4, #0]
  405d6e:	bd70      	pop	{r4, r5, r6, pc}
		{
			char *pcIndxPtr;
			char *pcEndPtr;

			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  405d70:	b11a      	cbz	r2, 405d7a <socket_cb+0xd2>
  405d72:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  405d76:	2b00      	cmp	r3, #0
  405d78:	dc0a      	bgt.n	405d90 <socket_cb+0xe8>
        printf(pstrRecv->pu8Buffer);
				
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
				recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
			} else {
				printf("socket_cb: recv error!\r\n");
  405d7a:	4820      	ldr	r0, [pc, #128]	; (405dfc <socket_cb+0x154>)
  405d7c:	4b10      	ldr	r3, [pc, #64]	; (405dc0 <socket_cb+0x118>)
  405d7e:	4798      	blx	r3
				close(tcp_client_socket);
  405d80:	4c0d      	ldr	r4, [pc, #52]	; (405db8 <socket_cb+0x110>)
  405d82:	f994 0000 	ldrsb.w	r0, [r4]
  405d86:	4b1c      	ldr	r3, [pc, #112]	; (405df8 <socket_cb+0x150>)
  405d88:	4798      	blx	r3
				tcp_client_socket = -1;
  405d8a:	23ff      	movs	r3, #255	; 0xff
  405d8c:	7023      	strb	r3, [r4, #0]
  405d8e:	bd70      	pop	{r4, r5, r6, pc}
        printf(pstrRecv->pu8Buffer);
  405d90:	6810      	ldr	r0, [r2, #0]
  405d92:	4b0b      	ldr	r3, [pc, #44]	; (405dc0 <socket_cb+0x118>)
  405d94:	4798      	blx	r3
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  405d96:	4c0c      	ldr	r4, [pc, #48]	; (405dc8 <socket_cb+0x120>)
  405d98:	f44f 65af 	mov.w	r5, #1400	; 0x578
  405d9c:	462a      	mov	r2, r5
  405d9e:	2100      	movs	r1, #0
  405da0:	4620      	mov	r0, r4
  405da2:	4b0a      	ldr	r3, [pc, #40]	; (405dcc <socket_cb+0x124>)
  405da4:	4798      	blx	r3
				recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  405da6:	2300      	movs	r3, #0
  405da8:	462a      	mov	r2, r5
  405daa:	4621      	mov	r1, r4
  405dac:	4802      	ldr	r0, [pc, #8]	; (405db8 <socket_cb+0x110>)
  405dae:	f990 0000 	ldrsb.w	r0, [r0]
  405db2:	4c0d      	ldr	r4, [pc, #52]	; (405de8 <socket_cb+0x140>)
  405db4:	47a0      	blx	r4
  405db6:	bd70      	pop	{r4, r5, r6, pc}
  405db8:	20400020 	.word	0x20400020
  405dbc:	0040d7e0 	.word	0x0040d7e0
  405dc0:	00406611 	.word	0x00406611
  405dc4:	2040c964 	.word	0x2040c964
  405dc8:	2040c3ec 	.word	0x2040c3ec
  405dcc:	0040676d 	.word	0x0040676d
  405dd0:	2040c3e8 	.word	0x2040c3e8
  405dd4:	2040cb38 	.word	0x2040cb38
  405dd8:	004069f5 	.word	0x004069f5
  405ddc:	0040d818 	.word	0x0040d818
  405de0:	00406ac1 	.word	0x00406ac1
  405de4:	00404bb5 	.word	0x00404bb5
  405de8:	00404c51 	.word	0x00404c51
  405dec:	00401925 	.word	0x00401925
  405df0:	0040d7f4 	.word	0x0040d7f4
  405df4:	0040d820 	.word	0x0040d820
  405df8:	00404cf1 	.word	0x00404cf1
  405dfc:	0040d83c 	.word	0x0040d83c

00405e00 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters.
 *
 * \return None.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  405e00:	b510      	push	{r4, lr}
  405e02:	b082      	sub	sp, #8
	switch (u8MsgType) {
  405e04:	282c      	cmp	r0, #44	; 0x2c
  405e06:	d003      	beq.n	405e10 <wifi_cb+0x10>
  405e08:	2832      	cmp	r0, #50	; 0x32
  405e0a:	d013      	beq.n	405e34 <wifi_cb+0x34>
	default:
	{
		break;
	}
	}
}
  405e0c:	b002      	add	sp, #8
  405e0e:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  405e10:	780b      	ldrb	r3, [r1, #0]
  405e12:	2b01      	cmp	r3, #1
  405e14:	d008      	beq.n	405e28 <wifi_cb+0x28>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  405e16:	2b00      	cmp	r3, #0
  405e18:	d1f8      	bne.n	405e0c <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  405e1a:	480d      	ldr	r0, [pc, #52]	; (405e50 <wifi_cb+0x50>)
  405e1c:	4b0d      	ldr	r3, [pc, #52]	; (405e54 <wifi_cb+0x54>)
  405e1e:	4798      	blx	r3
 			wifi_connected = 0;
  405e20:	2200      	movs	r2, #0
  405e22:	4b0d      	ldr	r3, [pc, #52]	; (405e58 <wifi_cb+0x58>)
  405e24:	701a      	strb	r2, [r3, #0]
  405e26:	e7f1      	b.n	405e0c <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  405e28:	480c      	ldr	r0, [pc, #48]	; (405e5c <wifi_cb+0x5c>)
  405e2a:	4b0a      	ldr	r3, [pc, #40]	; (405e54 <wifi_cb+0x54>)
  405e2c:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  405e2e:	4b0c      	ldr	r3, [pc, #48]	; (405e60 <wifi_cb+0x60>)
  405e30:	4798      	blx	r3
  405e32:	e7eb      	b.n	405e0c <wifi_cb+0xc>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  405e34:	788b      	ldrb	r3, [r1, #2]
  405e36:	784a      	ldrb	r2, [r1, #1]
  405e38:	7808      	ldrb	r0, [r1, #0]
  405e3a:	78c9      	ldrb	r1, [r1, #3]
  405e3c:	9100      	str	r1, [sp, #0]
  405e3e:	4601      	mov	r1, r0
  405e40:	4808      	ldr	r0, [pc, #32]	; (405e64 <wifi_cb+0x64>)
  405e42:	4c04      	ldr	r4, [pc, #16]	; (405e54 <wifi_cb+0x54>)
  405e44:	47a0      	blx	r4
		wifi_connected = M2M_WIFI_CONNECTED;
  405e46:	2201      	movs	r2, #1
  405e48:	4b03      	ldr	r3, [pc, #12]	; (405e58 <wifi_cb+0x58>)
  405e4a:	701a      	strb	r2, [r3, #0]
}
  405e4c:	e7de      	b.n	405e0c <wifi_cb+0xc>
  405e4e:	bf00      	nop
  405e50:	0040d9e0 	.word	0x0040d9e0
  405e54:	00406611 	.word	0x00406611
  405e58:	2040c96c 	.word	0x2040c96c
  405e5c:	0040d9c0 	.word	0x0040d9c0
  405e60:	004035b1 	.word	0x004035b1
  405e64:	0040da04 	.word	0x0040da04

00405e68 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  405e68:	b5f0      	push	{r4, r5, r6, r7, lr}
  405e6a:	b083      	sub	sp, #12
  405e6c:	4605      	mov	r5, r0
  405e6e:	460c      	mov	r4, r1
	uint32_t val = 0;
  405e70:	2300      	movs	r3, #0
  405e72:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  405e74:	4b2a      	ldr	r3, [pc, #168]	; (405f20 <usart_serial_getchar+0xb8>)
  405e76:	4298      	cmp	r0, r3
  405e78:	d013      	beq.n	405ea2 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  405e7a:	4b2a      	ldr	r3, [pc, #168]	; (405f24 <usart_serial_getchar+0xbc>)
  405e7c:	4298      	cmp	r0, r3
  405e7e:	d018      	beq.n	405eb2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  405e80:	4b29      	ldr	r3, [pc, #164]	; (405f28 <usart_serial_getchar+0xc0>)
  405e82:	4298      	cmp	r0, r3
  405e84:	d01d      	beq.n	405ec2 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  405e86:	4b29      	ldr	r3, [pc, #164]	; (405f2c <usart_serial_getchar+0xc4>)
  405e88:	429d      	cmp	r5, r3
  405e8a:	d022      	beq.n	405ed2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  405e8c:	4b28      	ldr	r3, [pc, #160]	; (405f30 <usart_serial_getchar+0xc8>)
  405e8e:	429d      	cmp	r5, r3
  405e90:	d027      	beq.n	405ee2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  405e92:	4b28      	ldr	r3, [pc, #160]	; (405f34 <usart_serial_getchar+0xcc>)
  405e94:	429d      	cmp	r5, r3
  405e96:	d02e      	beq.n	405ef6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  405e98:	4b27      	ldr	r3, [pc, #156]	; (405f38 <usart_serial_getchar+0xd0>)
  405e9a:	429d      	cmp	r5, r3
  405e9c:	d035      	beq.n	405f0a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  405e9e:	b003      	add	sp, #12
  405ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  405ea2:	461f      	mov	r7, r3
  405ea4:	4e25      	ldr	r6, [pc, #148]	; (405f3c <usart_serial_getchar+0xd4>)
  405ea6:	4621      	mov	r1, r4
  405ea8:	4638      	mov	r0, r7
  405eaa:	47b0      	blx	r6
  405eac:	2800      	cmp	r0, #0
  405eae:	d1fa      	bne.n	405ea6 <usart_serial_getchar+0x3e>
  405eb0:	e7e9      	b.n	405e86 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  405eb2:	461f      	mov	r7, r3
  405eb4:	4e21      	ldr	r6, [pc, #132]	; (405f3c <usart_serial_getchar+0xd4>)
  405eb6:	4621      	mov	r1, r4
  405eb8:	4638      	mov	r0, r7
  405eba:	47b0      	blx	r6
  405ebc:	2800      	cmp	r0, #0
  405ebe:	d1fa      	bne.n	405eb6 <usart_serial_getchar+0x4e>
  405ec0:	e7e4      	b.n	405e8c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  405ec2:	461f      	mov	r7, r3
  405ec4:	4e1d      	ldr	r6, [pc, #116]	; (405f3c <usart_serial_getchar+0xd4>)
  405ec6:	4621      	mov	r1, r4
  405ec8:	4638      	mov	r0, r7
  405eca:	47b0      	blx	r6
  405ecc:	2800      	cmp	r0, #0
  405ece:	d1fa      	bne.n	405ec6 <usart_serial_getchar+0x5e>
  405ed0:	e7df      	b.n	405e92 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  405ed2:	461f      	mov	r7, r3
  405ed4:	4e19      	ldr	r6, [pc, #100]	; (405f3c <usart_serial_getchar+0xd4>)
  405ed6:	4621      	mov	r1, r4
  405ed8:	4638      	mov	r0, r7
  405eda:	47b0      	blx	r6
  405edc:	2800      	cmp	r0, #0
  405ede:	d1fa      	bne.n	405ed6 <usart_serial_getchar+0x6e>
  405ee0:	e7da      	b.n	405e98 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  405ee2:	461e      	mov	r6, r3
  405ee4:	4d16      	ldr	r5, [pc, #88]	; (405f40 <usart_serial_getchar+0xd8>)
  405ee6:	a901      	add	r1, sp, #4
  405ee8:	4630      	mov	r0, r6
  405eea:	47a8      	blx	r5
  405eec:	2800      	cmp	r0, #0
  405eee:	d1fa      	bne.n	405ee6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  405ef0:	9b01      	ldr	r3, [sp, #4]
  405ef2:	7023      	strb	r3, [r4, #0]
  405ef4:	e7d3      	b.n	405e9e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  405ef6:	461e      	mov	r6, r3
  405ef8:	4d11      	ldr	r5, [pc, #68]	; (405f40 <usart_serial_getchar+0xd8>)
  405efa:	a901      	add	r1, sp, #4
  405efc:	4630      	mov	r0, r6
  405efe:	47a8      	blx	r5
  405f00:	2800      	cmp	r0, #0
  405f02:	d1fa      	bne.n	405efa <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  405f04:	9b01      	ldr	r3, [sp, #4]
  405f06:	7023      	strb	r3, [r4, #0]
  405f08:	e7c9      	b.n	405e9e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  405f0a:	461e      	mov	r6, r3
  405f0c:	4d0c      	ldr	r5, [pc, #48]	; (405f40 <usart_serial_getchar+0xd8>)
  405f0e:	a901      	add	r1, sp, #4
  405f10:	4630      	mov	r0, r6
  405f12:	47a8      	blx	r5
  405f14:	2800      	cmp	r0, #0
  405f16:	d1fa      	bne.n	405f0e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  405f18:	9b01      	ldr	r3, [sp, #4]
  405f1a:	7023      	strb	r3, [r4, #0]
}
  405f1c:	e7bf      	b.n	405e9e <usart_serial_getchar+0x36>
  405f1e:	bf00      	nop
  405f20:	400e0800 	.word	0x400e0800
  405f24:	400e0a00 	.word	0x400e0a00
  405f28:	400e1a00 	.word	0x400e1a00
  405f2c:	400e1c00 	.word	0x400e1c00
  405f30:	40024000 	.word	0x40024000
  405f34:	40028000 	.word	0x40028000
  405f38:	4002c000 	.word	0x4002c000
  405f3c:	00405869 	.word	0x00405869
  405f40:	00405977 	.word	0x00405977

00405f44 <usart_serial_putchar>:
{
  405f44:	b570      	push	{r4, r5, r6, lr}
  405f46:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  405f48:	4b2a      	ldr	r3, [pc, #168]	; (405ff4 <usart_serial_putchar+0xb0>)
  405f4a:	4298      	cmp	r0, r3
  405f4c:	d013      	beq.n	405f76 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  405f4e:	4b2a      	ldr	r3, [pc, #168]	; (405ff8 <usart_serial_putchar+0xb4>)
  405f50:	4298      	cmp	r0, r3
  405f52:	d019      	beq.n	405f88 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  405f54:	4b29      	ldr	r3, [pc, #164]	; (405ffc <usart_serial_putchar+0xb8>)
  405f56:	4298      	cmp	r0, r3
  405f58:	d01f      	beq.n	405f9a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  405f5a:	4b29      	ldr	r3, [pc, #164]	; (406000 <usart_serial_putchar+0xbc>)
  405f5c:	4298      	cmp	r0, r3
  405f5e:	d025      	beq.n	405fac <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  405f60:	4b28      	ldr	r3, [pc, #160]	; (406004 <usart_serial_putchar+0xc0>)
  405f62:	4298      	cmp	r0, r3
  405f64:	d02b      	beq.n	405fbe <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  405f66:	4b28      	ldr	r3, [pc, #160]	; (406008 <usart_serial_putchar+0xc4>)
  405f68:	4298      	cmp	r0, r3
  405f6a:	d031      	beq.n	405fd0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  405f6c:	4b27      	ldr	r3, [pc, #156]	; (40600c <usart_serial_putchar+0xc8>)
  405f6e:	4298      	cmp	r0, r3
  405f70:	d037      	beq.n	405fe2 <usart_serial_putchar+0x9e>
	return 0;
  405f72:	2000      	movs	r0, #0
}
  405f74:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405f76:	461e      	mov	r6, r3
  405f78:	4d25      	ldr	r5, [pc, #148]	; (406010 <usart_serial_putchar+0xcc>)
  405f7a:	4621      	mov	r1, r4
  405f7c:	4630      	mov	r0, r6
  405f7e:	47a8      	blx	r5
  405f80:	2800      	cmp	r0, #0
  405f82:	d1fa      	bne.n	405f7a <usart_serial_putchar+0x36>
		return 1;
  405f84:	2001      	movs	r0, #1
  405f86:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405f88:	461e      	mov	r6, r3
  405f8a:	4d21      	ldr	r5, [pc, #132]	; (406010 <usart_serial_putchar+0xcc>)
  405f8c:	4621      	mov	r1, r4
  405f8e:	4630      	mov	r0, r6
  405f90:	47a8      	blx	r5
  405f92:	2800      	cmp	r0, #0
  405f94:	d1fa      	bne.n	405f8c <usart_serial_putchar+0x48>
		return 1;
  405f96:	2001      	movs	r0, #1
  405f98:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405f9a:	461e      	mov	r6, r3
  405f9c:	4d1c      	ldr	r5, [pc, #112]	; (406010 <usart_serial_putchar+0xcc>)
  405f9e:	4621      	mov	r1, r4
  405fa0:	4630      	mov	r0, r6
  405fa2:	47a8      	blx	r5
  405fa4:	2800      	cmp	r0, #0
  405fa6:	d1fa      	bne.n	405f9e <usart_serial_putchar+0x5a>
		return 1;
  405fa8:	2001      	movs	r0, #1
  405faa:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405fac:	461e      	mov	r6, r3
  405fae:	4d18      	ldr	r5, [pc, #96]	; (406010 <usart_serial_putchar+0xcc>)
  405fb0:	4621      	mov	r1, r4
  405fb2:	4630      	mov	r0, r6
  405fb4:	47a8      	blx	r5
  405fb6:	2800      	cmp	r0, #0
  405fb8:	d1fa      	bne.n	405fb0 <usart_serial_putchar+0x6c>
		return 1;
  405fba:	2001      	movs	r0, #1
  405fbc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  405fbe:	461e      	mov	r6, r3
  405fc0:	4d14      	ldr	r5, [pc, #80]	; (406014 <usart_serial_putchar+0xd0>)
  405fc2:	4621      	mov	r1, r4
  405fc4:	4630      	mov	r0, r6
  405fc6:	47a8      	blx	r5
  405fc8:	2800      	cmp	r0, #0
  405fca:	d1fa      	bne.n	405fc2 <usart_serial_putchar+0x7e>
		return 1;
  405fcc:	2001      	movs	r0, #1
  405fce:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  405fd0:	461e      	mov	r6, r3
  405fd2:	4d10      	ldr	r5, [pc, #64]	; (406014 <usart_serial_putchar+0xd0>)
  405fd4:	4621      	mov	r1, r4
  405fd6:	4630      	mov	r0, r6
  405fd8:	47a8      	blx	r5
  405fda:	2800      	cmp	r0, #0
  405fdc:	d1fa      	bne.n	405fd4 <usart_serial_putchar+0x90>
		return 1;
  405fde:	2001      	movs	r0, #1
  405fe0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  405fe2:	461e      	mov	r6, r3
  405fe4:	4d0b      	ldr	r5, [pc, #44]	; (406014 <usart_serial_putchar+0xd0>)
  405fe6:	4621      	mov	r1, r4
  405fe8:	4630      	mov	r0, r6
  405fea:	47a8      	blx	r5
  405fec:	2800      	cmp	r0, #0
  405fee:	d1fa      	bne.n	405fe6 <usart_serial_putchar+0xa2>
		return 1;
  405ff0:	2001      	movs	r0, #1
  405ff2:	bd70      	pop	{r4, r5, r6, pc}
  405ff4:	400e0800 	.word	0x400e0800
  405ff8:	400e0a00 	.word	0x400e0a00
  405ffc:	400e1a00 	.word	0x400e1a00
  406000:	400e1c00 	.word	0x400e1c00
  406004:	40024000 	.word	0x40024000
  406008:	40028000 	.word	0x40028000
  40600c:	4002c000 	.word	0x4002c000
  406010:	00405857 	.word	0x00405857
  406014:	00405961 	.word	0x00405961

00406018 <vApplicationStackOverflowHook>:
{
  406018:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40601a:	460a      	mov	r2, r1
  40601c:	4601      	mov	r1, r0
  40601e:	4802      	ldr	r0, [pc, #8]	; (406028 <vApplicationStackOverflowHook+0x10>)
  406020:	4b02      	ldr	r3, [pc, #8]	; (40602c <vApplicationStackOverflowHook+0x14>)
  406022:	4798      	blx	r3
  406024:	e7fe      	b.n	406024 <vApplicationStackOverflowHook+0xc>
  406026:	bf00      	nop
  406028:	0040d9a8 	.word	0x0040d9a8
  40602c:	00406611 	.word	0x00406611

00406030 <vApplicationTickHook>:
{
  406030:	4770      	bx	lr

00406032 <vApplicationMallocFailedHook>:
  406032:	f04f 0380 	mov.w	r3, #128	; 0x80
  406036:	b672      	cpsid	i
  406038:	f383 8811 	msr	BASEPRI, r3
  40603c:	f3bf 8f6f 	isb	sy
  406040:	f3bf 8f4f 	dsb	sy
  406044:	b662      	cpsie	i
  406046:	e7fe      	b.n	406046 <vApplicationMallocFailedHook+0x14>

00406048 <RTC_Handler>:
{
  406048:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  40604a:	4813      	ldr	r0, [pc, #76]	; (406098 <RTC_Handler+0x50>)
  40604c:	4b13      	ldr	r3, [pc, #76]	; (40609c <RTC_Handler+0x54>)
  40604e:	4798      	blx	r3
  406050:	4604      	mov	r4, r0
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  406052:	f010 0f04 	tst.w	r0, #4
  406056:	d111      	bne.n	40607c <RTC_Handler+0x34>
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  406058:	f014 0f02 	tst.w	r4, #2
  40605c:	d117      	bne.n	40608e <RTC_Handler+0x46>
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  40605e:	4d0e      	ldr	r5, [pc, #56]	; (406098 <RTC_Handler+0x50>)
  406060:	2101      	movs	r1, #1
  406062:	4628      	mov	r0, r5
  406064:	4c0e      	ldr	r4, [pc, #56]	; (4060a0 <RTC_Handler+0x58>)
  406066:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  406068:	2108      	movs	r1, #8
  40606a:	4628      	mov	r0, r5
  40606c:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  40606e:	2110      	movs	r1, #16
  406070:	4628      	mov	r0, r5
  406072:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  406074:	2120      	movs	r1, #32
  406076:	4628      	mov	r0, r5
  406078:	47a0      	blx	r4
  40607a:	bd38      	pop	{r3, r4, r5, pc}
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  40607c:	2104      	movs	r1, #4
  40607e:	4806      	ldr	r0, [pc, #24]	; (406098 <RTC_Handler+0x50>)
  406080:	4b07      	ldr	r3, [pc, #28]	; (4060a0 <RTC_Handler+0x58>)
  406082:	4798      	blx	r3
		timestamp++;
  406084:	4a07      	ldr	r2, [pc, #28]	; (4060a4 <RTC_Handler+0x5c>)
  406086:	6813      	ldr	r3, [r2, #0]
  406088:	3301      	adds	r3, #1
  40608a:	6013      	str	r3, [r2, #0]
  40608c:	e7e4      	b.n	406058 <RTC_Handler+0x10>
			rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  40608e:	2102      	movs	r1, #2
  406090:	4801      	ldr	r0, [pc, #4]	; (406098 <RTC_Handler+0x50>)
  406092:	4b03      	ldr	r3, [pc, #12]	; (4060a0 <RTC_Handler+0x58>)
  406094:	4798      	blx	r3
  406096:	e7e2      	b.n	40605e <RTC_Handler+0x16>
  406098:	400e1860 	.word	0x400e1860
  40609c:	00400611 	.word	0x00400611
  4060a0:	00400615 	.word	0x00400615
  4060a4:	20400024 	.word	0x20400024

004060a8 <inet_aton>:
{
  4060a8:	b4f0      	push	{r4, r5, r6, r7}
  4060aa:	3801      	subs	r0, #1
  register u_long acc = 0, addr = 0;
  4060ac:	2400      	movs	r4, #0
  4060ae:	4622      	mov	r2, r4
  int dots = 0;
  4060b0:	4625      	mov	r5, r4
	        acc = 0;
  4060b2:	4626      	mov	r6, r4
  4060b4:	e011      	b.n	4060da <inet_aton+0x32>
	  switch (cc) {
  4060b6:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  4060ba:	2f09      	cmp	r7, #9
  4060bc:	d814      	bhi.n	4060e8 <inet_aton+0x40>
	        acc = acc * 10 + (cc - '0');
  4060be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4060c2:	eb07 0242 	add.w	r2, r7, r2, lsl #1
	        break;
  4060c6:	e007      	b.n	4060d8 <inet_aton+0x30>
	        if (++dots > 3) {
  4060c8:	3501      	adds	r5, #1
  4060ca:	2d03      	cmp	r5, #3
  4060cc:	dc24      	bgt.n	406118 <inet_aton+0x70>
	        if (acc > 255) {
  4060ce:	2aff      	cmp	r2, #255	; 0xff
  4060d0:	d824      	bhi.n	40611c <inet_aton+0x74>
	        addr = addr << 8 | acc;
  4060d2:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	        acc = 0;
  4060d6:	4632      	mov	r2, r6
  } while (*cp++) ;
  4060d8:	b14b      	cbz	r3, 4060ee <inet_aton+0x46>
	  register char cc = *cp;
  4060da:	f810 3f01 	ldrb.w	r3, [r0, #1]!
	  switch (cc) {
  4060de:	2b2e      	cmp	r3, #46	; 0x2e
  4060e0:	d0f2      	beq.n	4060c8 <inet_aton+0x20>
  4060e2:	d8e8      	bhi.n	4060b6 <inet_aton+0xe>
  4060e4:	2b00      	cmp	r3, #0
  4060e6:	d0f2      	beq.n	4060ce <inet_aton+0x26>
	        return 0;
  4060e8:	2000      	movs	r0, #0
}
  4060ea:	bcf0      	pop	{r4, r5, r6, r7}
  4060ec:	4770      	bx	lr
  if (dots < 3) {
  4060ee:	2d02      	cmp	r5, #2
  4060f0:	dc03      	bgt.n	4060fa <inet_aton+0x52>
	  addr <<= 8 * (3 - dots) ;
  4060f2:	f1c5 0303 	rsb	r3, r5, #3
  4060f6:	00db      	lsls	r3, r3, #3
  4060f8:	409c      	lsls	r4, r3
  if (ap) {
  4060fa:	b189      	cbz	r1, 406120 <inet_aton+0x78>
	  ap->s_addr = _htonl(addr);
  4060fc:	0e23      	lsrs	r3, r4, #24
  4060fe:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  406102:	0222      	lsls	r2, r4, #8
  406104:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  406108:	431a      	orrs	r2, r3
  40610a:	0a23      	lsrs	r3, r4, #8
  40610c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  406110:	4313      	orrs	r3, r2
  406112:	600b      	str	r3, [r1, #0]
  return 1;    
  406114:	2001      	movs	r0, #1
  406116:	e7e8      	b.n	4060ea <inet_aton+0x42>
		    return 0;
  406118:	2000      	movs	r0, #0
  40611a:	e7e6      	b.n	4060ea <inet_aton+0x42>
		    return 0;
  40611c:	2000      	movs	r0, #0
  40611e:	e7e4      	b.n	4060ea <inet_aton+0x42>
  return 1;    
  406120:	2001      	movs	r0, #1
  406122:	e7e2      	b.n	4060ea <inet_aton+0x42>

00406124 <task_wifi>:
		
	
}


static void task_wifi(void *pvParameters) {
  406124:	b570      	push	{r4, r5, r6, lr}
  406126:	b08c      	sub	sp, #48	; 0x30
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
	struct sockaddr_in addr_in;
	
	/* Initialize the BSP. */
	nm_bsp_init();
  406128:	4b33      	ldr	r3, [pc, #204]	; (4061f8 <task_wifi+0xd4>)
  40612a:	4798      	blx	r3
	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  40612c:	2300      	movs	r3, #0
  40612e:	9307      	str	r3, [sp, #28]
  406130:	9308      	str	r3, [sp, #32]
  406132:	9309      	str	r3, [sp, #36]	; 0x24
  406134:	930a      	str	r3, [sp, #40]	; 0x28
  406136:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  406138:	4b30      	ldr	r3, [pc, #192]	; (4061fc <task_wifi+0xd8>)
  40613a:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
  40613c:	a806      	add	r0, sp, #24
  40613e:	4b30      	ldr	r3, [pc, #192]	; (406200 <task_wifi+0xdc>)
  406140:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  406142:	b120      	cbz	r0, 40614e <task_wifi+0x2a>
  406144:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  406146:	482f      	ldr	r0, [pc, #188]	; (406204 <task_wifi+0xe0>)
  406148:	4b2f      	ldr	r3, [pc, #188]	; (406208 <task_wifi+0xe4>)
  40614a:	4798      	blx	r3
  40614c:	e7fe      	b.n	40614c <task_wifi+0x28>
		while (1) {
		}
	}
	
	/* Initialize socket module. */
	socketInit();
  40614e:	4b2f      	ldr	r3, [pc, #188]	; (40620c <task_wifi+0xe8>)
  406150:	4798      	blx	r3

	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
  406152:	492f      	ldr	r1, [pc, #188]	; (406210 <task_wifi+0xec>)
  406154:	482f      	ldr	r0, [pc, #188]	; (406214 <task_wifi+0xf0>)
  406156:	4b30      	ldr	r3, [pc, #192]	; (406218 <task_wifi+0xf4>)
  406158:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  40615a:	4d30      	ldr	r5, [pc, #192]	; (40621c <task_wifi+0xf8>)
  40615c:	4629      	mov	r1, r5
  40615e:	4830      	ldr	r0, [pc, #192]	; (406220 <task_wifi+0xfc>)
  406160:	4c29      	ldr	r4, [pc, #164]	; (406208 <task_wifi+0xe4>)
  406162:	47a0      	blx	r4
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  406164:	23ff      	movs	r3, #255	; 0xff
  406166:	9300      	str	r3, [sp, #0]
  406168:	4b2e      	ldr	r3, [pc, #184]	; (406224 <task_wifi+0x100>)
  40616a:	2202      	movs	r2, #2
  40616c:	2111      	movs	r1, #17
  40616e:	4628      	mov	r0, r5
  406170:	4d2d      	ldr	r5, [pc, #180]	; (406228 <task_wifi+0x104>)
  406172:	47a8      	blx	r5

	addr_in.sin_family = AF_INET;
  406174:	2302      	movs	r3, #2
  406176:	f8ad 3008 	strh.w	r3, [sp, #8]
	addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  40617a:	f648 0313 	movw	r3, #34835	; 0x8813
  40617e:	f8ad 300a 	strh.w	r3, [sp, #10]
	inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  406182:	a903      	add	r1, sp, #12
  406184:	4829      	ldr	r0, [pc, #164]	; (40622c <task_wifi+0x108>)
  406186:	4b2a      	ldr	r3, [pc, #168]	; (406230 <task_wifi+0x10c>)
  406188:	4798      	blx	r3
	printf("Inet aton : %d", addr_in.sin_addr);
  40618a:	9903      	ldr	r1, [sp, #12]
  40618c:	4829      	ldr	r0, [pc, #164]	; (406234 <task_wifi+0x110>)
  40618e:	47a0      	blx	r4
	
  while(1){
	  m2m_wifi_handle_events(NULL);
  406190:	4d29      	ldr	r5, [pc, #164]	; (406238 <task_wifi+0x114>)

	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  406192:	4c2a      	ldr	r4, [pc, #168]	; (40623c <task_wifi+0x118>)
		  /* Open client socket. */
		  if (tcp_client_socket < 0) {
  406194:	4e2a      	ldr	r6, [pc, #168]	; (406240 <task_wifi+0x11c>)
  406196:	e002      	b.n	40619e <task_wifi+0x7a>
			  printf("socket init \n");
			  if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
				  printf("main: failed to create TCP client socket error!\r\n");
  406198:	482a      	ldr	r0, [pc, #168]	; (406244 <task_wifi+0x120>)
  40619a:	4b1b      	ldr	r3, [pc, #108]	; (406208 <task_wifi+0xe4>)
  40619c:	4798      	blx	r3
	  m2m_wifi_handle_events(NULL);
  40619e:	2000      	movs	r0, #0
  4061a0:	47a8      	blx	r5
	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  4061a2:	7823      	ldrb	r3, [r4, #0]
  4061a4:	2b01      	cmp	r3, #1
  4061a6:	d1fa      	bne.n	40619e <task_wifi+0x7a>
		  if (tcp_client_socket < 0) {
  4061a8:	f996 3000 	ldrsb.w	r3, [r6]
  4061ac:	2b00      	cmp	r3, #0
  4061ae:	daf6      	bge.n	40619e <task_wifi+0x7a>
			  printf("socket init \n");
  4061b0:	4825      	ldr	r0, [pc, #148]	; (406248 <task_wifi+0x124>)
  4061b2:	4b15      	ldr	r3, [pc, #84]	; (406208 <task_wifi+0xe4>)
  4061b4:	4798      	blx	r3
			  if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  4061b6:	2200      	movs	r2, #0
  4061b8:	2101      	movs	r1, #1
  4061ba:	2002      	movs	r0, #2
  4061bc:	4b23      	ldr	r3, [pc, #140]	; (40624c <task_wifi+0x128>)
  4061be:	4798      	blx	r3
  4061c0:	7030      	strb	r0, [r6, #0]
  4061c2:	2800      	cmp	r0, #0
  4061c4:	dbe8      	blt.n	406198 <task_wifi+0x74>
				  continue;
			  }

			  /* Connect server */
			  printf("socket connecting\n");
  4061c6:	4822      	ldr	r0, [pc, #136]	; (406250 <task_wifi+0x12c>)
  4061c8:	4b0f      	ldr	r3, [pc, #60]	; (406208 <task_wifi+0xe4>)
  4061ca:	4798      	blx	r3
			  
			  if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  4061cc:	2210      	movs	r2, #16
  4061ce:	a902      	add	r1, sp, #8
  4061d0:	f996 0000 	ldrsb.w	r0, [r6]
  4061d4:	4b1f      	ldr	r3, [pc, #124]	; (406254 <task_wifi+0x130>)
  4061d6:	4798      	blx	r3
  4061d8:	b918      	cbnz	r0, 4061e2 <task_wifi+0xbe>
				  close(tcp_client_socket);
				  tcp_client_socket = -1;
				  printf("error\n");
				  }else{
				  gbTcpConnection = true;
  4061da:	2201      	movs	r2, #1
  4061dc:	4b1e      	ldr	r3, [pc, #120]	; (406258 <task_wifi+0x134>)
  4061de:	701a      	strb	r2, [r3, #0]
  4061e0:	e7dd      	b.n	40619e <task_wifi+0x7a>
				  close(tcp_client_socket);
  4061e2:	f996 0000 	ldrsb.w	r0, [r6]
  4061e6:	4b1d      	ldr	r3, [pc, #116]	; (40625c <task_wifi+0x138>)
  4061e8:	4798      	blx	r3
				  tcp_client_socket = -1;
  4061ea:	23ff      	movs	r3, #255	; 0xff
  4061ec:	7033      	strb	r3, [r6, #0]
				  printf("error\n");
  4061ee:	481c      	ldr	r0, [pc, #112]	; (406260 <task_wifi+0x13c>)
  4061f0:	4b05      	ldr	r3, [pc, #20]	; (406208 <task_wifi+0xe4>)
  4061f2:	4798      	blx	r3
  4061f4:	e7d3      	b.n	40619e <task_wifi+0x7a>
  4061f6:	bf00      	nop
  4061f8:	004023fd 	.word	0x004023fd
  4061fc:	00405e01 	.word	0x00405e01
  406200:	0040323d 	.word	0x0040323d
  406204:	0040d8bc 	.word	0x0040d8bc
  406208:	00406611 	.word	0x00406611
  40620c:	004049ed 	.word	0x004049ed
  406210:	00405c29 	.word	0x00405c29
  406214:	00405ca9 	.word	0x00405ca9
  406218:	00404a31 	.word	0x00404a31
  40621c:	0040d8e4 	.word	0x0040d8e4
  406220:	0040d8f8 	.word	0x0040d8f8
  406224:	0040d91c 	.word	0x0040d91c
  406228:	00403595 	.word	0x00403595
  40622c:	0040d928 	.word	0x0040d928
  406230:	004060a9 	.word	0x004060a9
  406234:	0040d938 	.word	0x0040d938
  406238:	00403339 	.word	0x00403339
  40623c:	2040c96c 	.word	0x2040c96c
  406240:	20400020 	.word	0x20400020
  406244:	0040d958 	.word	0x0040d958
  406248:	0040d948 	.word	0x0040d948
  40624c:	00404a45 	.word	0x00404a45
  406250:	0040d98c 	.word	0x0040d98c
  406254:	00404b25 	.word	0x00404b25
  406258:	2040c964 	.word	0x2040c964
  40625c:	00404cf1 	.word	0x00404cf1
  406260:	0040d9a0 	.word	0x0040d9a0

00406264 <RTC_init>:
void RTC_init(){
  406264:	b530      	push	{r4, r5, lr}
  406266:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_RTC);
  406268:	2002      	movs	r0, #2
  40626a:	4b12      	ldr	r3, [pc, #72]	; (4062b4 <RTC_init+0x50>)
  40626c:	4798      	blx	r3
	rtc_set_hour_mode(RTC, 0);
  40626e:	4c12      	ldr	r4, [pc, #72]	; (4062b8 <RTC_init+0x54>)
  406270:	2100      	movs	r1, #0
  406272:	4620      	mov	r0, r4
  406274:	4b11      	ldr	r3, [pc, #68]	; (4062bc <RTC_init+0x58>)
  406276:	4798      	blx	r3
	rtc_set_date(RTC, YEAR, MONTH, DAY, WEEK);
  406278:	2316      	movs	r3, #22
  40627a:	9300      	str	r3, [sp, #0]
  40627c:	2301      	movs	r3, #1
  40627e:	2206      	movs	r2, #6
  406280:	f240 71e3 	movw	r1, #2019	; 0x7e3
  406284:	4620      	mov	r0, r4
  406286:	4d0e      	ldr	r5, [pc, #56]	; (4062c0 <RTC_init+0x5c>)
  406288:	47a8      	blx	r5
	rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  40628a:	2300      	movs	r3, #0
  40628c:	461a      	mov	r2, r3
  40628e:	2114      	movs	r1, #20
  406290:	4620      	mov	r0, r4
  406292:	4d0c      	ldr	r5, [pc, #48]	; (4062c4 <RTC_init+0x60>)
  406294:	47a8      	blx	r5
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  406296:	4b0c      	ldr	r3, [pc, #48]	; (4062c8 <RTC_init+0x64>)
  406298:	2104      	movs	r1, #4
  40629a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40629e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4062a2:	22c0      	movs	r2, #192	; 0xc0
  4062a4:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4062a8:	6019      	str	r1, [r3, #0]
	rtc_enable_interrupt(RTC,  RTC_IER_SECEN);
  4062aa:	4620      	mov	r0, r4
  4062ac:	4b07      	ldr	r3, [pc, #28]	; (4062cc <RTC_init+0x68>)
  4062ae:	4798      	blx	r3
}
  4062b0:	b003      	add	sp, #12
  4062b2:	bd30      	pop	{r4, r5, pc}
  4062b4:	004056b1 	.word	0x004056b1
  4062b8:	400e1860 	.word	0x400e1860
  4062bc:	004004ad 	.word	0x004004ad
  4062c0:	00400559 	.word	0x00400559
  4062c4:	004004c9 	.word	0x004004c9
  4062c8:	e000e100 	.word	0xe000e100
  4062cc:	004004c3 	.word	0x004004c3

004062d0 <task_values>:
static void task_values(void){
  4062d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4062d4:	ed2d 8b02 	vpush	{d8}
  4062d8:	b08c      	sub	sp, #48	; 0x30
	xQueueData = xQueueCreate(10, sizeof(uint32_t));
  4062da:	2200      	movs	r2, #0
  4062dc:	2104      	movs	r1, #4
  4062de:	200a      	movs	r0, #10
  4062e0:	4c51      	ldr	r4, [pc, #324]	; (406428 <task_values+0x158>)
  4062e2:	47a0      	blx	r4
  4062e4:	4b51      	ldr	r3, [pc, #324]	; (40642c <task_values+0x15c>)
  4062e6:	6018      	str	r0, [r3, #0]
	xSemaphoreData = xSemaphoreCreateBinary();
  4062e8:	2203      	movs	r2, #3
  4062ea:	2100      	movs	r1, #0
  4062ec:	2001      	movs	r0, #1
  4062ee:	47a0      	blx	r4
  4062f0:	4b4f      	ldr	r3, [pc, #316]	; (406430 <task_values+0x160>)
  4062f2:	6018      	str	r0, [r3, #0]
	RTC_init();
  4062f4:	4b4f      	ldr	r3, [pc, #316]	; (406434 <task_values+0x164>)
  4062f6:	4798      	blx	r3
	pmc_enable_periph_clk(BUT1_PIO_ID);
  4062f8:	200c      	movs	r0, #12
  4062fa:	4b4f      	ldr	r3, [pc, #316]	; (406438 <task_values+0x168>)
  4062fc:	4798      	blx	r3
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_MASK, PIO_PULLUP);
  4062fe:	4c4f      	ldr	r4, [pc, #316]	; (40643c <task_values+0x16c>)
  406300:	2301      	movs	r3, #1
  406302:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  406306:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40630a:	4620      	mov	r0, r4
  40630c:	4d4c      	ldr	r5, [pc, #304]	; (406440 <task_values+0x170>)
  40630e:	47a8      	blx	r5
	pio_handler_set(BUT1_PIO,
  406310:	4b4c      	ldr	r3, [pc, #304]	; (406444 <task_values+0x174>)
  406312:	9300      	str	r3, [sp, #0]
  406314:	2350      	movs	r3, #80	; 0x50
  406316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40631a:	210c      	movs	r1, #12
  40631c:	4620      	mov	r0, r4
  40631e:	4d4a      	ldr	r5, [pc, #296]	; (406448 <task_values+0x178>)
  406320:	47a8      	blx	r5
  406322:	4b4a      	ldr	r3, [pc, #296]	; (40644c <task_values+0x17c>)
  406324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  406328:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40632a:	22a0      	movs	r2, #160	; 0xa0
  40632c:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_MASK);
  406330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  406334:	4620      	mov	r0, r4
  406336:	4b46      	ldr	r3, [pc, #280]	; (406450 <task_values+0x180>)
  406338:	4798      	blx	r3
	afec_enable(AFEC0);
  40633a:	4c46      	ldr	r4, [pc, #280]	; (406454 <task_values+0x184>)
  40633c:	4620      	mov	r0, r4
  40633e:	4b46      	ldr	r3, [pc, #280]	; (406458 <task_values+0x188>)
  406340:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  406342:	a805      	add	r0, sp, #20
  406344:	4b45      	ldr	r3, [pc, #276]	; (40645c <task_values+0x18c>)
  406346:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  406348:	a905      	add	r1, sp, #20
  40634a:	4620      	mov	r0, r4
  40634c:	4b44      	ldr	r3, [pc, #272]	; (406460 <task_values+0x190>)
  40634e:	4798      	blx	r3
	reg = afec->AFEC_MR;
  406350:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  406352:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  406356:	6063      	str	r3, [r4, #4]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0,	AFEC_Temp_callback, 6);
  406358:	2306      	movs	r3, #6
  40635a:	4a42      	ldr	r2, [pc, #264]	; (406464 <task_values+0x194>)
  40635c:	2100      	movs	r1, #0
  40635e:	4620      	mov	r0, r4
  406360:	4d41      	ldr	r5, [pc, #260]	; (406468 <task_values+0x198>)
  406362:	47a8      	blx	r5
	afec_ch_get_config_defaults(&afec_ch_cfg);
  406364:	a802      	add	r0, sp, #8
  406366:	4b41      	ldr	r3, [pc, #260]	; (40646c <task_values+0x19c>)
  406368:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  40636a:	2600      	movs	r6, #0
  40636c:	f88d 6009 	strb.w	r6, [sp, #9]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_TEMP_SENSOR, &afec_ch_cfg);
  406370:	aa02      	add	r2, sp, #8
  406372:	4631      	mov	r1, r6
  406374:	4620      	mov	r0, r4
  406376:	4b3e      	ldr	r3, [pc, #248]	; (406470 <task_values+0x1a0>)
  406378:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  40637a:	6666      	str	r6, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40637c:	f44f 7300 	mov.w	r3, #512	; 0x200
  406380:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  406382:	a803      	add	r0, sp, #12
  406384:	4b3b      	ldr	r3, [pc, #236]	; (406474 <task_values+0x1a4>)
  406386:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  406388:	a903      	add	r1, sp, #12
  40638a:	4620      	mov	r0, r4
  40638c:	4b3a      	ldr	r3, [pc, #232]	; (406478 <task_values+0x1a8>)
  40638e:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  406390:	2301      	movs	r3, #1
  406392:	6163      	str	r3, [r4, #20]
	uint32_t val_an=0;
  406394:	960b      	str	r6, [sp, #44]	; 0x2c
	afec->AFEC_CR = AFEC_CR_START;
  406396:	2302      	movs	r3, #2
  406398:	6023      	str	r3, [r4, #0]
		vTaskDelay(200);
  40639a:	4d38      	ldr	r5, [pc, #224]	; (40647c <task_values+0x1ac>)
		if (xQueueReceive(xQueueData , &(val_an) , ( TickType_t ) 500 / portTICK_PERIOD_MS))
  40639c:	4f38      	ldr	r7, [pc, #224]	; (406480 <task_values+0x1b0>)
			val_an = (val_an * VOLT_REF / (float) MAX_DIGITAL);
  40639e:	ed9f 8a39 	vldr	s16, [pc, #228]	; 406484 <task_values+0x1b4>
  4063a2:	e02a      	b.n	4063fa <task_values+0x12a>
  4063a4:	f640 43e4 	movw	r3, #3300	; 0xce4
  4063a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4063aa:	fb03 f302 	mul.w	r3, r3, r2
  4063ae:	ee07 3a90 	vmov	s15, r3
  4063b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
  4063b6:	ee87 7a88 	vdiv.f32	s14, s15, s16
  4063ba:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  4063be:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
			vTaskDelay((TickType_t)1000/portTICK_PERIOD_MS);
  4063c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4063c6:	47a8      	blx	r5
  4063c8:	2202      	movs	r2, #2
  4063ca:	4b22      	ldr	r3, [pc, #136]	; (406454 <task_values+0x184>)
  4063cc:	601a      	str	r2, [r3, #0]
  4063ce:	e01f      	b.n	406410 <task_values+0x140>
		sprintf(&data,"GET /connect?timestamp=%d&machine=%s&digital=%d&analog=%d HTTP/1.1\r\n Accept: */*\r\n\r\n",timestamp,"EMBARC",dig_val,val_an);
  4063d0:	4b2d      	ldr	r3, [pc, #180]	; (406488 <task_values+0x1b8>)
  4063d2:	681a      	ldr	r2, [r3, #0]
  4063d4:	4c2d      	ldr	r4, [pc, #180]	; (40648c <task_values+0x1bc>)
  4063d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4063d8:	9301      	str	r3, [sp, #4]
  4063da:	9600      	str	r6, [sp, #0]
  4063dc:	4b2c      	ldr	r3, [pc, #176]	; (406490 <task_values+0x1c0>)
  4063de:	492d      	ldr	r1, [pc, #180]	; (406494 <task_values+0x1c4>)
  4063e0:	4620      	mov	r0, r4
  4063e2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 4064a4 <task_values+0x1d4>
  4063e6:	47c0      	blx	r8
		data_release = true;
  4063e8:	2201      	movs	r2, #1
  4063ea:	4b2b      	ldr	r3, [pc, #172]	; (406498 <task_values+0x1c8>)
  4063ec:	701a      	strb	r2, [r3, #0]
		printf("%s\n",data);
  4063ee:	4621      	mov	r1, r4
  4063f0:	482a      	ldr	r0, [pc, #168]	; (40649c <task_values+0x1cc>)
  4063f2:	4b2b      	ldr	r3, [pc, #172]	; (4064a0 <task_values+0x1d0>)
  4063f4:	4798      	blx	r3
		vTaskDelay(200);
  4063f6:	20c8      	movs	r0, #200	; 0xc8
  4063f8:	47a8      	blx	r5
		vTaskDelay(200);
  4063fa:	20c8      	movs	r0, #200	; 0xc8
  4063fc:	47a8      	blx	r5
		if (xQueueReceive(xQueueData , &(val_an) , ( TickType_t ) 500 / portTICK_PERIOD_MS))
  4063fe:	2300      	movs	r3, #0
  406400:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  406404:	a90b      	add	r1, sp, #44	; 0x2c
  406406:	4809      	ldr	r0, [pc, #36]	; (40642c <task_values+0x15c>)
  406408:	6800      	ldr	r0, [r0, #0]
  40640a:	47b8      	blx	r7
  40640c:	2800      	cmp	r0, #0
  40640e:	d1c9      	bne.n	4063a4 <task_values+0xd4>
		if(xSemaphoreTake(xSemaphoreData,0)){
  406410:	2300      	movs	r3, #0
  406412:	461a      	mov	r2, r3
  406414:	4619      	mov	r1, r3
  406416:	4806      	ldr	r0, [pc, #24]	; (406430 <task_values+0x160>)
  406418:	6800      	ldr	r0, [r0, #0]
  40641a:	47b8      	blx	r7
  40641c:	2800      	cmp	r0, #0
  40641e:	d0d7      	beq.n	4063d0 <task_values+0x100>
			if(dig_val==1){
  406420:	f086 0601 	eor.w	r6, r6, #1
  406424:	e7d4      	b.n	4063d0 <task_values+0x100>
  406426:	bf00      	nop
  406428:	00400cbd 	.word	0x00400cbd
  40642c:	2040cbbc 	.word	0x2040cbbc
  406430:	2040cbb8 	.word	0x2040cbb8
  406434:	00406265 	.word	0x00406265
  406438:	004056b1 	.word	0x004056b1
  40643c:	400e1200 	.word	0x400e1200
  406440:	004051e5 	.word	0x004051e5
  406444:	00405c59 	.word	0x00405c59
  406448:	00405439 	.word	0x00405439
  40644c:	e000e100 	.word	0xe000e100
  406450:	004052a7 	.word	0x004052a7
  406454:	4003c000 	.word	0x4003c000
  406458:	00400449 	.word	0x00400449
  40645c:	00400279 	.word	0x00400279
  406460:	004002c9 	.word	0x004002c9
  406464:	00405c7d 	.word	0x00405c7d
  406468:	004003c9 	.word	0x004003c9
  40646c:	004002a9 	.word	0x004002a9
  406470:	00400235 	.word	0x00400235
  406474:	004002b3 	.word	0x004002b3
  406478:	00400265 	.word	0x00400265
  40647c:	00401925 	.word	0x00401925
  406480:	004010fd 	.word	0x004010fd
  406484:	457ff000 	.word	0x457ff000
  406488:	20400024 	.word	0x20400024
  40648c:	2040cb38 	.word	0x2040cb38
  406490:	0040d858 	.word	0x0040d858
  406494:	0040d860 	.word	0x0040d860
  406498:	2040c3e8 	.word	0x2040c3e8
  40649c:	0040d8b8 	.word	0x0040d8b8
  4064a0:	00406611 	.word	0x00406611
  4064a4:	004069a9 	.word	0x004069a9

004064a8 <main>:
 * Initialize system, UART console, network then start weather client.
 *
 * \return Program return value.
 */
int main(void)
{
  4064a8:	b500      	push	{lr}
  4064aa:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the board. */
	sysclk_init();
  4064ac:	4b2b      	ldr	r3, [pc, #172]	; (40655c <main+0xb4>)
  4064ae:	4798      	blx	r3
	board_init();
  4064b0:	4b2b      	ldr	r3, [pc, #172]	; (406560 <main+0xb8>)
  4064b2:	4798      	blx	r3
  4064b4:	200e      	movs	r0, #14
  4064b6:	4e2b      	ldr	r6, [pc, #172]	; (406564 <main+0xbc>)
  4064b8:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4064ba:	4d2b      	ldr	r5, [pc, #172]	; (406568 <main+0xc0>)
  4064bc:	4b2b      	ldr	r3, [pc, #172]	; (40656c <main+0xc4>)
  4064be:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4064c0:	4a2b      	ldr	r2, [pc, #172]	; (406570 <main+0xc8>)
  4064c2:	4b2c      	ldr	r3, [pc, #176]	; (406574 <main+0xcc>)
  4064c4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4064c6:	4a2c      	ldr	r2, [pc, #176]	; (406578 <main+0xd0>)
  4064c8:	4b2c      	ldr	r3, [pc, #176]	; (40657c <main+0xd4>)
  4064ca:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4064cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4064d0:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4064d2:	23c0      	movs	r3, #192	; 0xc0
  4064d4:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4064d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4064da:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4064dc:	2400      	movs	r4, #0
  4064de:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4064e0:	9408      	str	r4, [sp, #32]
  4064e2:	200e      	movs	r0, #14
  4064e4:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  4064e6:	4a26      	ldr	r2, [pc, #152]	; (406580 <main+0xd8>)
  4064e8:	a904      	add	r1, sp, #16
  4064ea:	4628      	mov	r0, r5
  4064ec:	4b25      	ldr	r3, [pc, #148]	; (406584 <main+0xdc>)
  4064ee:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4064f0:	4628      	mov	r0, r5
  4064f2:	4b25      	ldr	r3, [pc, #148]	; (406588 <main+0xe0>)
  4064f4:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4064f6:	4628      	mov	r0, r5
  4064f8:	4b24      	ldr	r3, [pc, #144]	; (40658c <main+0xe4>)
  4064fa:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4064fc:	4e24      	ldr	r6, [pc, #144]	; (406590 <main+0xe8>)
  4064fe:	6833      	ldr	r3, [r6, #0]
  406500:	4621      	mov	r1, r4
  406502:	6898      	ldr	r0, [r3, #8]
  406504:	4d23      	ldr	r5, [pc, #140]	; (406594 <main+0xec>)
  406506:	47a8      	blx	r5
	setbuf(stdin, NULL);
  406508:	6833      	ldr	r3, [r6, #0]
  40650a:	4621      	mov	r1, r4
  40650c:	6858      	ldr	r0, [r3, #4]
  40650e:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  406510:	4821      	ldr	r0, [pc, #132]	; (406598 <main+0xf0>)
  406512:	4b22      	ldr	r3, [pc, #136]	; (40659c <main+0xf4>)
  406514:	4798      	blx	r3
	
	
	if (xTaskCreate(task_wifi, "Wifi", TASK_WIFI_STACK_SIZE, NULL,
  406516:	9403      	str	r4, [sp, #12]
  406518:	9402      	str	r4, [sp, #8]
  40651a:	9401      	str	r4, [sp, #4]
  40651c:	9400      	str	r4, [sp, #0]
  40651e:	4623      	mov	r3, r4
  406520:	f44f 6280 	mov.w	r2, #1024	; 0x400
  406524:	491e      	ldr	r1, [pc, #120]	; (4065a0 <main+0xf8>)
  406526:	481f      	ldr	r0, [pc, #124]	; (4065a4 <main+0xfc>)
  406528:	4c1f      	ldr	r4, [pc, #124]	; (4065a8 <main+0x100>)
  40652a:	47a0      	blx	r4
  40652c:	2801      	cmp	r0, #1
  40652e:	d002      	beq.n	406536 <main+0x8e>
	TASK_WIFI_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Wifi task\r\n");
  406530:	481e      	ldr	r0, [pc, #120]	; (4065ac <main+0x104>)
  406532:	4b1a      	ldr	r3, [pc, #104]	; (40659c <main+0xf4>)
  406534:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_values,"Values", TASK_WIFI_STACK_SIZE,NULL,TASK_WIFI_STACK_PRIORITY,NULL) != pdPASS)
  406536:	2300      	movs	r3, #0
  406538:	9303      	str	r3, [sp, #12]
  40653a:	9302      	str	r3, [sp, #8]
  40653c:	9301      	str	r3, [sp, #4]
  40653e:	9300      	str	r3, [sp, #0]
  406540:	f44f 6280 	mov.w	r2, #1024	; 0x400
  406544:	491a      	ldr	r1, [pc, #104]	; (4065b0 <main+0x108>)
  406546:	481b      	ldr	r0, [pc, #108]	; (4065b4 <main+0x10c>)
  406548:	4c17      	ldr	r4, [pc, #92]	; (4065a8 <main+0x100>)
  40654a:	47a0      	blx	r4
  40654c:	2801      	cmp	r0, #1
  40654e:	d002      	beq.n	406556 <main+0xae>
	{
		printf("Failed to create values task\r\n");
  406550:	4819      	ldr	r0, [pc, #100]	; (4065b8 <main+0x110>)
  406552:	4b12      	ldr	r3, [pc, #72]	; (40659c <main+0xf4>)
  406554:	4798      	blx	r3
	}

	vTaskStartScheduler();
  406556:	4b19      	ldr	r3, [pc, #100]	; (4065bc <main+0x114>)
  406558:	4798      	blx	r3
  40655a:	e7fe      	b.n	40655a <main+0xb2>
  40655c:	00404e55 	.word	0x00404e55
  406560:	00404f51 	.word	0x00404f51
  406564:	004056b1 	.word	0x004056b1
  406568:	40028000 	.word	0x40028000
  40656c:	2040cb34 	.word	0x2040cb34
  406570:	00405f45 	.word	0x00405f45
  406574:	2040cb30 	.word	0x2040cb30
  406578:	00405e69 	.word	0x00405e69
  40657c:	2040cb2c 	.word	0x2040cb2c
  406580:	08f0d180 	.word	0x08f0d180
  406584:	00405901 	.word	0x00405901
  406588:	00405955 	.word	0x00405955
  40658c:	0040595b 	.word	0x0040595b
  406590:	20400028 	.word	0x20400028
  406594:	00406809 	.word	0x00406809
  406598:	0040d6fc 	.word	0x0040d6fc
  40659c:	00406611 	.word	0x00406611
  4065a0:	0040d760 	.word	0x0040d760
  4065a4:	00406125 	.word	0x00406125
  4065a8:	004013dd 	.word	0x004013dd
  4065ac:	0040d768 	.word	0x0040d768
  4065b0:	0040d788 	.word	0x0040d788
  4065b4:	004062d1 	.word	0x004062d1
  4065b8:	0040d790 	.word	0x0040d790
  4065bc:	00401611 	.word	0x00401611

004065c0 <__libc_init_array>:
  4065c0:	b570      	push	{r4, r5, r6, lr}
  4065c2:	4e0f      	ldr	r6, [pc, #60]	; (406600 <__libc_init_array+0x40>)
  4065c4:	4d0f      	ldr	r5, [pc, #60]	; (406604 <__libc_init_array+0x44>)
  4065c6:	1b76      	subs	r6, r6, r5
  4065c8:	10b6      	asrs	r6, r6, #2
  4065ca:	bf18      	it	ne
  4065cc:	2400      	movne	r4, #0
  4065ce:	d005      	beq.n	4065dc <__libc_init_array+0x1c>
  4065d0:	3401      	adds	r4, #1
  4065d2:	f855 3b04 	ldr.w	r3, [r5], #4
  4065d6:	4798      	blx	r3
  4065d8:	42a6      	cmp	r6, r4
  4065da:	d1f9      	bne.n	4065d0 <__libc_init_array+0x10>
  4065dc:	4e0a      	ldr	r6, [pc, #40]	; (406608 <__libc_init_array+0x48>)
  4065de:	4d0b      	ldr	r5, [pc, #44]	; (40660c <__libc_init_array+0x4c>)
  4065e0:	1b76      	subs	r6, r6, r5
  4065e2:	f007 fb79 	bl	40dcd8 <_init>
  4065e6:	10b6      	asrs	r6, r6, #2
  4065e8:	bf18      	it	ne
  4065ea:	2400      	movne	r4, #0
  4065ec:	d006      	beq.n	4065fc <__libc_init_array+0x3c>
  4065ee:	3401      	adds	r4, #1
  4065f0:	f855 3b04 	ldr.w	r3, [r5], #4
  4065f4:	4798      	blx	r3
  4065f6:	42a6      	cmp	r6, r4
  4065f8:	d1f9      	bne.n	4065ee <__libc_init_array+0x2e>
  4065fa:	bd70      	pop	{r4, r5, r6, pc}
  4065fc:	bd70      	pop	{r4, r5, r6, pc}
  4065fe:	bf00      	nop
  406600:	0040dce4 	.word	0x0040dce4
  406604:	0040dce4 	.word	0x0040dce4
  406608:	0040dcec 	.word	0x0040dcec
  40660c:	0040dce4 	.word	0x0040dce4

00406610 <iprintf>:
  406610:	b40f      	push	{r0, r1, r2, r3}
  406612:	b500      	push	{lr}
  406614:	4907      	ldr	r1, [pc, #28]	; (406634 <iprintf+0x24>)
  406616:	b083      	sub	sp, #12
  406618:	ab04      	add	r3, sp, #16
  40661a:	6808      	ldr	r0, [r1, #0]
  40661c:	f853 2b04 	ldr.w	r2, [r3], #4
  406620:	6881      	ldr	r1, [r0, #8]
  406622:	9301      	str	r3, [sp, #4]
  406624:	f001 fd28 	bl	408078 <_vfiprintf_r>
  406628:	b003      	add	sp, #12
  40662a:	f85d eb04 	ldr.w	lr, [sp], #4
  40662e:	b004      	add	sp, #16
  406630:	4770      	bx	lr
  406632:	bf00      	nop
  406634:	20400028 	.word	0x20400028

00406638 <memcpy>:
  406638:	4684      	mov	ip, r0
  40663a:	ea41 0300 	orr.w	r3, r1, r0
  40663e:	f013 0303 	ands.w	r3, r3, #3
  406642:	d16d      	bne.n	406720 <memcpy+0xe8>
  406644:	3a40      	subs	r2, #64	; 0x40
  406646:	d341      	bcc.n	4066cc <memcpy+0x94>
  406648:	f851 3b04 	ldr.w	r3, [r1], #4
  40664c:	f840 3b04 	str.w	r3, [r0], #4
  406650:	f851 3b04 	ldr.w	r3, [r1], #4
  406654:	f840 3b04 	str.w	r3, [r0], #4
  406658:	f851 3b04 	ldr.w	r3, [r1], #4
  40665c:	f840 3b04 	str.w	r3, [r0], #4
  406660:	f851 3b04 	ldr.w	r3, [r1], #4
  406664:	f840 3b04 	str.w	r3, [r0], #4
  406668:	f851 3b04 	ldr.w	r3, [r1], #4
  40666c:	f840 3b04 	str.w	r3, [r0], #4
  406670:	f851 3b04 	ldr.w	r3, [r1], #4
  406674:	f840 3b04 	str.w	r3, [r0], #4
  406678:	f851 3b04 	ldr.w	r3, [r1], #4
  40667c:	f840 3b04 	str.w	r3, [r0], #4
  406680:	f851 3b04 	ldr.w	r3, [r1], #4
  406684:	f840 3b04 	str.w	r3, [r0], #4
  406688:	f851 3b04 	ldr.w	r3, [r1], #4
  40668c:	f840 3b04 	str.w	r3, [r0], #4
  406690:	f851 3b04 	ldr.w	r3, [r1], #4
  406694:	f840 3b04 	str.w	r3, [r0], #4
  406698:	f851 3b04 	ldr.w	r3, [r1], #4
  40669c:	f840 3b04 	str.w	r3, [r0], #4
  4066a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4066a4:	f840 3b04 	str.w	r3, [r0], #4
  4066a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4066ac:	f840 3b04 	str.w	r3, [r0], #4
  4066b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4066b4:	f840 3b04 	str.w	r3, [r0], #4
  4066b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4066bc:	f840 3b04 	str.w	r3, [r0], #4
  4066c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4066c4:	f840 3b04 	str.w	r3, [r0], #4
  4066c8:	3a40      	subs	r2, #64	; 0x40
  4066ca:	d2bd      	bcs.n	406648 <memcpy+0x10>
  4066cc:	3230      	adds	r2, #48	; 0x30
  4066ce:	d311      	bcc.n	4066f4 <memcpy+0xbc>
  4066d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4066d4:	f840 3b04 	str.w	r3, [r0], #4
  4066d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4066dc:	f840 3b04 	str.w	r3, [r0], #4
  4066e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4066e4:	f840 3b04 	str.w	r3, [r0], #4
  4066e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4066ec:	f840 3b04 	str.w	r3, [r0], #4
  4066f0:	3a10      	subs	r2, #16
  4066f2:	d2ed      	bcs.n	4066d0 <memcpy+0x98>
  4066f4:	320c      	adds	r2, #12
  4066f6:	d305      	bcc.n	406704 <memcpy+0xcc>
  4066f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4066fc:	f840 3b04 	str.w	r3, [r0], #4
  406700:	3a04      	subs	r2, #4
  406702:	d2f9      	bcs.n	4066f8 <memcpy+0xc0>
  406704:	3204      	adds	r2, #4
  406706:	d008      	beq.n	40671a <memcpy+0xe2>
  406708:	07d2      	lsls	r2, r2, #31
  40670a:	bf1c      	itt	ne
  40670c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406710:	f800 3b01 	strbne.w	r3, [r0], #1
  406714:	d301      	bcc.n	40671a <memcpy+0xe2>
  406716:	880b      	ldrh	r3, [r1, #0]
  406718:	8003      	strh	r3, [r0, #0]
  40671a:	4660      	mov	r0, ip
  40671c:	4770      	bx	lr
  40671e:	bf00      	nop
  406720:	2a08      	cmp	r2, #8
  406722:	d313      	bcc.n	40674c <memcpy+0x114>
  406724:	078b      	lsls	r3, r1, #30
  406726:	d08d      	beq.n	406644 <memcpy+0xc>
  406728:	f010 0303 	ands.w	r3, r0, #3
  40672c:	d08a      	beq.n	406644 <memcpy+0xc>
  40672e:	f1c3 0304 	rsb	r3, r3, #4
  406732:	1ad2      	subs	r2, r2, r3
  406734:	07db      	lsls	r3, r3, #31
  406736:	bf1c      	itt	ne
  406738:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40673c:	f800 3b01 	strbne.w	r3, [r0], #1
  406740:	d380      	bcc.n	406644 <memcpy+0xc>
  406742:	f831 3b02 	ldrh.w	r3, [r1], #2
  406746:	f820 3b02 	strh.w	r3, [r0], #2
  40674a:	e77b      	b.n	406644 <memcpy+0xc>
  40674c:	3a04      	subs	r2, #4
  40674e:	d3d9      	bcc.n	406704 <memcpy+0xcc>
  406750:	3a01      	subs	r2, #1
  406752:	f811 3b01 	ldrb.w	r3, [r1], #1
  406756:	f800 3b01 	strb.w	r3, [r0], #1
  40675a:	d2f9      	bcs.n	406750 <memcpy+0x118>
  40675c:	780b      	ldrb	r3, [r1, #0]
  40675e:	7003      	strb	r3, [r0, #0]
  406760:	784b      	ldrb	r3, [r1, #1]
  406762:	7043      	strb	r3, [r0, #1]
  406764:	788b      	ldrb	r3, [r1, #2]
  406766:	7083      	strb	r3, [r0, #2]
  406768:	4660      	mov	r0, ip
  40676a:	4770      	bx	lr

0040676c <memset>:
  40676c:	b470      	push	{r4, r5, r6}
  40676e:	0786      	lsls	r6, r0, #30
  406770:	d046      	beq.n	406800 <memset+0x94>
  406772:	1e54      	subs	r4, r2, #1
  406774:	2a00      	cmp	r2, #0
  406776:	d041      	beq.n	4067fc <memset+0x90>
  406778:	b2ca      	uxtb	r2, r1
  40677a:	4603      	mov	r3, r0
  40677c:	e002      	b.n	406784 <memset+0x18>
  40677e:	f114 34ff 	adds.w	r4, r4, #4294967295
  406782:	d33b      	bcc.n	4067fc <memset+0x90>
  406784:	f803 2b01 	strb.w	r2, [r3], #1
  406788:	079d      	lsls	r5, r3, #30
  40678a:	d1f8      	bne.n	40677e <memset+0x12>
  40678c:	2c03      	cmp	r4, #3
  40678e:	d92e      	bls.n	4067ee <memset+0x82>
  406790:	b2cd      	uxtb	r5, r1
  406792:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406796:	2c0f      	cmp	r4, #15
  406798:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40679c:	d919      	bls.n	4067d2 <memset+0x66>
  40679e:	f103 0210 	add.w	r2, r3, #16
  4067a2:	4626      	mov	r6, r4
  4067a4:	3e10      	subs	r6, #16
  4067a6:	2e0f      	cmp	r6, #15
  4067a8:	f842 5c10 	str.w	r5, [r2, #-16]
  4067ac:	f842 5c0c 	str.w	r5, [r2, #-12]
  4067b0:	f842 5c08 	str.w	r5, [r2, #-8]
  4067b4:	f842 5c04 	str.w	r5, [r2, #-4]
  4067b8:	f102 0210 	add.w	r2, r2, #16
  4067bc:	d8f2      	bhi.n	4067a4 <memset+0x38>
  4067be:	f1a4 0210 	sub.w	r2, r4, #16
  4067c2:	f022 020f 	bic.w	r2, r2, #15
  4067c6:	f004 040f 	and.w	r4, r4, #15
  4067ca:	3210      	adds	r2, #16
  4067cc:	2c03      	cmp	r4, #3
  4067ce:	4413      	add	r3, r2
  4067d0:	d90d      	bls.n	4067ee <memset+0x82>
  4067d2:	461e      	mov	r6, r3
  4067d4:	4622      	mov	r2, r4
  4067d6:	3a04      	subs	r2, #4
  4067d8:	2a03      	cmp	r2, #3
  4067da:	f846 5b04 	str.w	r5, [r6], #4
  4067de:	d8fa      	bhi.n	4067d6 <memset+0x6a>
  4067e0:	1f22      	subs	r2, r4, #4
  4067e2:	f022 0203 	bic.w	r2, r2, #3
  4067e6:	3204      	adds	r2, #4
  4067e8:	4413      	add	r3, r2
  4067ea:	f004 0403 	and.w	r4, r4, #3
  4067ee:	b12c      	cbz	r4, 4067fc <memset+0x90>
  4067f0:	b2c9      	uxtb	r1, r1
  4067f2:	441c      	add	r4, r3
  4067f4:	f803 1b01 	strb.w	r1, [r3], #1
  4067f8:	429c      	cmp	r4, r3
  4067fa:	d1fb      	bne.n	4067f4 <memset+0x88>
  4067fc:	bc70      	pop	{r4, r5, r6}
  4067fe:	4770      	bx	lr
  406800:	4614      	mov	r4, r2
  406802:	4603      	mov	r3, r0
  406804:	e7c2      	b.n	40678c <memset+0x20>
  406806:	bf00      	nop

00406808 <setbuf>:
  406808:	2900      	cmp	r1, #0
  40680a:	bf0c      	ite	eq
  40680c:	2202      	moveq	r2, #2
  40680e:	2200      	movne	r2, #0
  406810:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406814:	f000 b800 	b.w	406818 <setvbuf>

00406818 <setvbuf>:
  406818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40681c:	4c61      	ldr	r4, [pc, #388]	; (4069a4 <setvbuf+0x18c>)
  40681e:	6825      	ldr	r5, [r4, #0]
  406820:	b083      	sub	sp, #12
  406822:	4604      	mov	r4, r0
  406824:	460f      	mov	r7, r1
  406826:	4690      	mov	r8, r2
  406828:	461e      	mov	r6, r3
  40682a:	b115      	cbz	r5, 406832 <setvbuf+0x1a>
  40682c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40682e:	2b00      	cmp	r3, #0
  406830:	d064      	beq.n	4068fc <setvbuf+0xe4>
  406832:	f1b8 0f02 	cmp.w	r8, #2
  406836:	d006      	beq.n	406846 <setvbuf+0x2e>
  406838:	f1b8 0f01 	cmp.w	r8, #1
  40683c:	f200 809f 	bhi.w	40697e <setvbuf+0x166>
  406840:	2e00      	cmp	r6, #0
  406842:	f2c0 809c 	blt.w	40697e <setvbuf+0x166>
  406846:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406848:	07d8      	lsls	r0, r3, #31
  40684a:	d534      	bpl.n	4068b6 <setvbuf+0x9e>
  40684c:	4621      	mov	r1, r4
  40684e:	4628      	mov	r0, r5
  406850:	f003 fb70 	bl	409f34 <_fflush_r>
  406854:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406856:	b141      	cbz	r1, 40686a <setvbuf+0x52>
  406858:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40685c:	4299      	cmp	r1, r3
  40685e:	d002      	beq.n	406866 <setvbuf+0x4e>
  406860:	4628      	mov	r0, r5
  406862:	f003 fce5 	bl	40a230 <_free_r>
  406866:	2300      	movs	r3, #0
  406868:	6323      	str	r3, [r4, #48]	; 0x30
  40686a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40686e:	2200      	movs	r2, #0
  406870:	61a2      	str	r2, [r4, #24]
  406872:	6062      	str	r2, [r4, #4]
  406874:	061a      	lsls	r2, r3, #24
  406876:	d43a      	bmi.n	4068ee <setvbuf+0xd6>
  406878:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40687c:	f023 0303 	bic.w	r3, r3, #3
  406880:	f1b8 0f02 	cmp.w	r8, #2
  406884:	81a3      	strh	r3, [r4, #12]
  406886:	d01d      	beq.n	4068c4 <setvbuf+0xac>
  406888:	ab01      	add	r3, sp, #4
  40688a:	466a      	mov	r2, sp
  40688c:	4621      	mov	r1, r4
  40688e:	4628      	mov	r0, r5
  406890:	f003 ff7a 	bl	40a788 <__swhatbuf_r>
  406894:	89a3      	ldrh	r3, [r4, #12]
  406896:	4318      	orrs	r0, r3
  406898:	81a0      	strh	r0, [r4, #12]
  40689a:	2e00      	cmp	r6, #0
  40689c:	d132      	bne.n	406904 <setvbuf+0xec>
  40689e:	9e00      	ldr	r6, [sp, #0]
  4068a0:	4630      	mov	r0, r6
  4068a2:	f003 ffe9 	bl	40a878 <malloc>
  4068a6:	4607      	mov	r7, r0
  4068a8:	2800      	cmp	r0, #0
  4068aa:	d06b      	beq.n	406984 <setvbuf+0x16c>
  4068ac:	89a3      	ldrh	r3, [r4, #12]
  4068ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4068b2:	81a3      	strh	r3, [r4, #12]
  4068b4:	e028      	b.n	406908 <setvbuf+0xf0>
  4068b6:	89a3      	ldrh	r3, [r4, #12]
  4068b8:	0599      	lsls	r1, r3, #22
  4068ba:	d4c7      	bmi.n	40684c <setvbuf+0x34>
  4068bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4068be:	f003 ff5f 	bl	40a780 <__retarget_lock_acquire_recursive>
  4068c2:	e7c3      	b.n	40684c <setvbuf+0x34>
  4068c4:	2500      	movs	r5, #0
  4068c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4068c8:	2600      	movs	r6, #0
  4068ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4068ce:	f043 0302 	orr.w	r3, r3, #2
  4068d2:	2001      	movs	r0, #1
  4068d4:	60a6      	str	r6, [r4, #8]
  4068d6:	07ce      	lsls	r6, r1, #31
  4068d8:	81a3      	strh	r3, [r4, #12]
  4068da:	6022      	str	r2, [r4, #0]
  4068dc:	6122      	str	r2, [r4, #16]
  4068de:	6160      	str	r0, [r4, #20]
  4068e0:	d401      	bmi.n	4068e6 <setvbuf+0xce>
  4068e2:	0598      	lsls	r0, r3, #22
  4068e4:	d53e      	bpl.n	406964 <setvbuf+0x14c>
  4068e6:	4628      	mov	r0, r5
  4068e8:	b003      	add	sp, #12
  4068ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4068ee:	6921      	ldr	r1, [r4, #16]
  4068f0:	4628      	mov	r0, r5
  4068f2:	f003 fc9d 	bl	40a230 <_free_r>
  4068f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4068fa:	e7bd      	b.n	406878 <setvbuf+0x60>
  4068fc:	4628      	mov	r0, r5
  4068fe:	f003 fb71 	bl	409fe4 <__sinit>
  406902:	e796      	b.n	406832 <setvbuf+0x1a>
  406904:	2f00      	cmp	r7, #0
  406906:	d0cb      	beq.n	4068a0 <setvbuf+0x88>
  406908:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40690a:	2b00      	cmp	r3, #0
  40690c:	d033      	beq.n	406976 <setvbuf+0x15e>
  40690e:	9b00      	ldr	r3, [sp, #0]
  406910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406914:	6027      	str	r7, [r4, #0]
  406916:	429e      	cmp	r6, r3
  406918:	bf1c      	itt	ne
  40691a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40691e:	81a2      	strhne	r2, [r4, #12]
  406920:	f1b8 0f01 	cmp.w	r8, #1
  406924:	bf04      	itt	eq
  406926:	f042 0201 	orreq.w	r2, r2, #1
  40692a:	81a2      	strheq	r2, [r4, #12]
  40692c:	b292      	uxth	r2, r2
  40692e:	f012 0308 	ands.w	r3, r2, #8
  406932:	6127      	str	r7, [r4, #16]
  406934:	6166      	str	r6, [r4, #20]
  406936:	d00e      	beq.n	406956 <setvbuf+0x13e>
  406938:	07d1      	lsls	r1, r2, #31
  40693a:	d51a      	bpl.n	406972 <setvbuf+0x15a>
  40693c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40693e:	4276      	negs	r6, r6
  406940:	2300      	movs	r3, #0
  406942:	f015 0501 	ands.w	r5, r5, #1
  406946:	61a6      	str	r6, [r4, #24]
  406948:	60a3      	str	r3, [r4, #8]
  40694a:	d009      	beq.n	406960 <setvbuf+0x148>
  40694c:	2500      	movs	r5, #0
  40694e:	4628      	mov	r0, r5
  406950:	b003      	add	sp, #12
  406952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406956:	60a3      	str	r3, [r4, #8]
  406958:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40695a:	f015 0501 	ands.w	r5, r5, #1
  40695e:	d1f5      	bne.n	40694c <setvbuf+0x134>
  406960:	0593      	lsls	r3, r2, #22
  406962:	d4c0      	bmi.n	4068e6 <setvbuf+0xce>
  406964:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406966:	f003 ff0d 	bl	40a784 <__retarget_lock_release_recursive>
  40696a:	4628      	mov	r0, r5
  40696c:	b003      	add	sp, #12
  40696e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406972:	60a6      	str	r6, [r4, #8]
  406974:	e7f0      	b.n	406958 <setvbuf+0x140>
  406976:	4628      	mov	r0, r5
  406978:	f003 fb34 	bl	409fe4 <__sinit>
  40697c:	e7c7      	b.n	40690e <setvbuf+0xf6>
  40697e:	f04f 35ff 	mov.w	r5, #4294967295
  406982:	e7b0      	b.n	4068e6 <setvbuf+0xce>
  406984:	f8dd 9000 	ldr.w	r9, [sp]
  406988:	45b1      	cmp	r9, r6
  40698a:	d004      	beq.n	406996 <setvbuf+0x17e>
  40698c:	4648      	mov	r0, r9
  40698e:	f003 ff73 	bl	40a878 <malloc>
  406992:	4607      	mov	r7, r0
  406994:	b920      	cbnz	r0, 4069a0 <setvbuf+0x188>
  406996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40699a:	f04f 35ff 	mov.w	r5, #4294967295
  40699e:	e792      	b.n	4068c6 <setvbuf+0xae>
  4069a0:	464e      	mov	r6, r9
  4069a2:	e783      	b.n	4068ac <setvbuf+0x94>
  4069a4:	20400028 	.word	0x20400028

004069a8 <sprintf>:
  4069a8:	b40e      	push	{r1, r2, r3}
  4069aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4069ac:	b09c      	sub	sp, #112	; 0x70
  4069ae:	ab21      	add	r3, sp, #132	; 0x84
  4069b0:	490f      	ldr	r1, [pc, #60]	; (4069f0 <sprintf+0x48>)
  4069b2:	f853 2b04 	ldr.w	r2, [r3], #4
  4069b6:	9301      	str	r3, [sp, #4]
  4069b8:	4605      	mov	r5, r0
  4069ba:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4069be:	6808      	ldr	r0, [r1, #0]
  4069c0:	9502      	str	r5, [sp, #8]
  4069c2:	f44f 7702 	mov.w	r7, #520	; 0x208
  4069c6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4069ca:	a902      	add	r1, sp, #8
  4069cc:	9506      	str	r5, [sp, #24]
  4069ce:	f8ad 7014 	strh.w	r7, [sp, #20]
  4069d2:	9404      	str	r4, [sp, #16]
  4069d4:	9407      	str	r4, [sp, #28]
  4069d6:	f8ad 6016 	strh.w	r6, [sp, #22]
  4069da:	f000 f8df 	bl	406b9c <_svfprintf_r>
  4069de:	9b02      	ldr	r3, [sp, #8]
  4069e0:	2200      	movs	r2, #0
  4069e2:	701a      	strb	r2, [r3, #0]
  4069e4:	b01c      	add	sp, #112	; 0x70
  4069e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4069ea:	b003      	add	sp, #12
  4069ec:	4770      	bx	lr
  4069ee:	bf00      	nop
  4069f0:	20400028 	.word	0x20400028

004069f4 <strcpy>:
  4069f4:	ea80 0201 	eor.w	r2, r0, r1
  4069f8:	4684      	mov	ip, r0
  4069fa:	f012 0f03 	tst.w	r2, #3
  4069fe:	d14f      	bne.n	406aa0 <strcpy+0xac>
  406a00:	f011 0f03 	tst.w	r1, #3
  406a04:	d132      	bne.n	406a6c <strcpy+0x78>
  406a06:	f84d 4d04 	str.w	r4, [sp, #-4]!
  406a0a:	f011 0f04 	tst.w	r1, #4
  406a0e:	f851 3b04 	ldr.w	r3, [r1], #4
  406a12:	d00b      	beq.n	406a2c <strcpy+0x38>
  406a14:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  406a18:	439a      	bics	r2, r3
  406a1a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406a1e:	bf04      	itt	eq
  406a20:	f84c 3b04 	streq.w	r3, [ip], #4
  406a24:	f851 3b04 	ldreq.w	r3, [r1], #4
  406a28:	d116      	bne.n	406a58 <strcpy+0x64>
  406a2a:	bf00      	nop
  406a2c:	f851 4b04 	ldr.w	r4, [r1], #4
  406a30:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  406a34:	439a      	bics	r2, r3
  406a36:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406a3a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  406a3e:	d10b      	bne.n	406a58 <strcpy+0x64>
  406a40:	f84c 3b04 	str.w	r3, [ip], #4
  406a44:	43a2      	bics	r2, r4
  406a46:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406a4a:	bf04      	itt	eq
  406a4c:	f851 3b04 	ldreq.w	r3, [r1], #4
  406a50:	f84c 4b04 	streq.w	r4, [ip], #4
  406a54:	d0ea      	beq.n	406a2c <strcpy+0x38>
  406a56:	4623      	mov	r3, r4
  406a58:	f80c 3b01 	strb.w	r3, [ip], #1
  406a5c:	f013 0fff 	tst.w	r3, #255	; 0xff
  406a60:	ea4f 2333 	mov.w	r3, r3, ror #8
  406a64:	d1f8      	bne.n	406a58 <strcpy+0x64>
  406a66:	f85d 4b04 	ldr.w	r4, [sp], #4
  406a6a:	4770      	bx	lr
  406a6c:	f011 0f01 	tst.w	r1, #1
  406a70:	d006      	beq.n	406a80 <strcpy+0x8c>
  406a72:	f811 2b01 	ldrb.w	r2, [r1], #1
  406a76:	f80c 2b01 	strb.w	r2, [ip], #1
  406a7a:	2a00      	cmp	r2, #0
  406a7c:	bf08      	it	eq
  406a7e:	4770      	bxeq	lr
  406a80:	f011 0f02 	tst.w	r1, #2
  406a84:	d0bf      	beq.n	406a06 <strcpy+0x12>
  406a86:	f831 2b02 	ldrh.w	r2, [r1], #2
  406a8a:	f012 0fff 	tst.w	r2, #255	; 0xff
  406a8e:	bf16      	itet	ne
  406a90:	f82c 2b02 	strhne.w	r2, [ip], #2
  406a94:	f88c 2000 	strbeq.w	r2, [ip]
  406a98:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  406a9c:	d1b3      	bne.n	406a06 <strcpy+0x12>
  406a9e:	4770      	bx	lr
  406aa0:	f811 2b01 	ldrb.w	r2, [r1], #1
  406aa4:	f80c 2b01 	strb.w	r2, [ip], #1
  406aa8:	2a00      	cmp	r2, #0
  406aaa:	d1f9      	bne.n	406aa0 <strcpy+0xac>
  406aac:	4770      	bx	lr
  406aae:	bf00      	nop
	...

00406ac0 <strlen>:
  406ac0:	f890 f000 	pld	[r0]
  406ac4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406ac8:	f020 0107 	bic.w	r1, r0, #7
  406acc:	f06f 0c00 	mvn.w	ip, #0
  406ad0:	f010 0407 	ands.w	r4, r0, #7
  406ad4:	f891 f020 	pld	[r1, #32]
  406ad8:	f040 8049 	bne.w	406b6e <strlen+0xae>
  406adc:	f04f 0400 	mov.w	r4, #0
  406ae0:	f06f 0007 	mvn.w	r0, #7
  406ae4:	e9d1 2300 	ldrd	r2, r3, [r1]
  406ae8:	f891 f040 	pld	[r1, #64]	; 0x40
  406aec:	f100 0008 	add.w	r0, r0, #8
  406af0:	fa82 f24c 	uadd8	r2, r2, ip
  406af4:	faa4 f28c 	sel	r2, r4, ip
  406af8:	fa83 f34c 	uadd8	r3, r3, ip
  406afc:	faa2 f38c 	sel	r3, r2, ip
  406b00:	bb4b      	cbnz	r3, 406b56 <strlen+0x96>
  406b02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406b06:	fa82 f24c 	uadd8	r2, r2, ip
  406b0a:	f100 0008 	add.w	r0, r0, #8
  406b0e:	faa4 f28c 	sel	r2, r4, ip
  406b12:	fa83 f34c 	uadd8	r3, r3, ip
  406b16:	faa2 f38c 	sel	r3, r2, ip
  406b1a:	b9e3      	cbnz	r3, 406b56 <strlen+0x96>
  406b1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406b20:	fa82 f24c 	uadd8	r2, r2, ip
  406b24:	f100 0008 	add.w	r0, r0, #8
  406b28:	faa4 f28c 	sel	r2, r4, ip
  406b2c:	fa83 f34c 	uadd8	r3, r3, ip
  406b30:	faa2 f38c 	sel	r3, r2, ip
  406b34:	b97b      	cbnz	r3, 406b56 <strlen+0x96>
  406b36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406b3a:	f101 0120 	add.w	r1, r1, #32
  406b3e:	fa82 f24c 	uadd8	r2, r2, ip
  406b42:	f100 0008 	add.w	r0, r0, #8
  406b46:	faa4 f28c 	sel	r2, r4, ip
  406b4a:	fa83 f34c 	uadd8	r3, r3, ip
  406b4e:	faa2 f38c 	sel	r3, r2, ip
  406b52:	2b00      	cmp	r3, #0
  406b54:	d0c6      	beq.n	406ae4 <strlen+0x24>
  406b56:	2a00      	cmp	r2, #0
  406b58:	bf04      	itt	eq
  406b5a:	3004      	addeq	r0, #4
  406b5c:	461a      	moveq	r2, r3
  406b5e:	ba12      	rev	r2, r2
  406b60:	fab2 f282 	clz	r2, r2
  406b64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406b68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406b6c:	4770      	bx	lr
  406b6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406b72:	f004 0503 	and.w	r5, r4, #3
  406b76:	f1c4 0000 	rsb	r0, r4, #0
  406b7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406b7e:	f014 0f04 	tst.w	r4, #4
  406b82:	f891 f040 	pld	[r1, #64]	; 0x40
  406b86:	fa0c f505 	lsl.w	r5, ip, r5
  406b8a:	ea62 0205 	orn	r2, r2, r5
  406b8e:	bf1c      	itt	ne
  406b90:	ea63 0305 	ornne	r3, r3, r5
  406b94:	4662      	movne	r2, ip
  406b96:	f04f 0400 	mov.w	r4, #0
  406b9a:	e7a9      	b.n	406af0 <strlen+0x30>

00406b9c <_svfprintf_r>:
  406b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ba0:	b0c3      	sub	sp, #268	; 0x10c
  406ba2:	460c      	mov	r4, r1
  406ba4:	910b      	str	r1, [sp, #44]	; 0x2c
  406ba6:	4692      	mov	sl, r2
  406ba8:	930f      	str	r3, [sp, #60]	; 0x3c
  406baa:	900c      	str	r0, [sp, #48]	; 0x30
  406bac:	f003 fdd6 	bl	40a75c <_localeconv_r>
  406bb0:	6803      	ldr	r3, [r0, #0]
  406bb2:	931a      	str	r3, [sp, #104]	; 0x68
  406bb4:	4618      	mov	r0, r3
  406bb6:	f7ff ff83 	bl	406ac0 <strlen>
  406bba:	89a3      	ldrh	r3, [r4, #12]
  406bbc:	9019      	str	r0, [sp, #100]	; 0x64
  406bbe:	0619      	lsls	r1, r3, #24
  406bc0:	d503      	bpl.n	406bca <_svfprintf_r+0x2e>
  406bc2:	6923      	ldr	r3, [r4, #16]
  406bc4:	2b00      	cmp	r3, #0
  406bc6:	f001 8003 	beq.w	407bd0 <_svfprintf_r+0x1034>
  406bca:	2300      	movs	r3, #0
  406bcc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  406bd0:	9313      	str	r3, [sp, #76]	; 0x4c
  406bd2:	9315      	str	r3, [sp, #84]	; 0x54
  406bd4:	9314      	str	r3, [sp, #80]	; 0x50
  406bd6:	9327      	str	r3, [sp, #156]	; 0x9c
  406bd8:	9326      	str	r3, [sp, #152]	; 0x98
  406bda:	9318      	str	r3, [sp, #96]	; 0x60
  406bdc:	931b      	str	r3, [sp, #108]	; 0x6c
  406bde:	9309      	str	r3, [sp, #36]	; 0x24
  406be0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  406be4:	46c8      	mov	r8, r9
  406be6:	9316      	str	r3, [sp, #88]	; 0x58
  406be8:	9317      	str	r3, [sp, #92]	; 0x5c
  406bea:	f89a 3000 	ldrb.w	r3, [sl]
  406bee:	4654      	mov	r4, sl
  406bf0:	b1e3      	cbz	r3, 406c2c <_svfprintf_r+0x90>
  406bf2:	2b25      	cmp	r3, #37	; 0x25
  406bf4:	d102      	bne.n	406bfc <_svfprintf_r+0x60>
  406bf6:	e019      	b.n	406c2c <_svfprintf_r+0x90>
  406bf8:	2b25      	cmp	r3, #37	; 0x25
  406bfa:	d003      	beq.n	406c04 <_svfprintf_r+0x68>
  406bfc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406c00:	2b00      	cmp	r3, #0
  406c02:	d1f9      	bne.n	406bf8 <_svfprintf_r+0x5c>
  406c04:	eba4 050a 	sub.w	r5, r4, sl
  406c08:	b185      	cbz	r5, 406c2c <_svfprintf_r+0x90>
  406c0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406c0c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406c0e:	f8c8 a000 	str.w	sl, [r8]
  406c12:	3301      	adds	r3, #1
  406c14:	442a      	add	r2, r5
  406c16:	2b07      	cmp	r3, #7
  406c18:	f8c8 5004 	str.w	r5, [r8, #4]
  406c1c:	9227      	str	r2, [sp, #156]	; 0x9c
  406c1e:	9326      	str	r3, [sp, #152]	; 0x98
  406c20:	dc7f      	bgt.n	406d22 <_svfprintf_r+0x186>
  406c22:	f108 0808 	add.w	r8, r8, #8
  406c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406c28:	442b      	add	r3, r5
  406c2a:	9309      	str	r3, [sp, #36]	; 0x24
  406c2c:	7823      	ldrb	r3, [r4, #0]
  406c2e:	2b00      	cmp	r3, #0
  406c30:	d07f      	beq.n	406d32 <_svfprintf_r+0x196>
  406c32:	2300      	movs	r3, #0
  406c34:	461a      	mov	r2, r3
  406c36:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  406c3a:	4619      	mov	r1, r3
  406c3c:	930d      	str	r3, [sp, #52]	; 0x34
  406c3e:	469b      	mov	fp, r3
  406c40:	f04f 30ff 	mov.w	r0, #4294967295
  406c44:	7863      	ldrb	r3, [r4, #1]
  406c46:	900a      	str	r0, [sp, #40]	; 0x28
  406c48:	f104 0a01 	add.w	sl, r4, #1
  406c4c:	f10a 0a01 	add.w	sl, sl, #1
  406c50:	f1a3 0020 	sub.w	r0, r3, #32
  406c54:	2858      	cmp	r0, #88	; 0x58
  406c56:	f200 83c1 	bhi.w	4073dc <_svfprintf_r+0x840>
  406c5a:	e8df f010 	tbh	[pc, r0, lsl #1]
  406c5e:	0238      	.short	0x0238
  406c60:	03bf03bf 	.word	0x03bf03bf
  406c64:	03bf0240 	.word	0x03bf0240
  406c68:	03bf03bf 	.word	0x03bf03bf
  406c6c:	03bf03bf 	.word	0x03bf03bf
  406c70:	024503bf 	.word	0x024503bf
  406c74:	03bf0203 	.word	0x03bf0203
  406c78:	026b005d 	.word	0x026b005d
  406c7c:	028603bf 	.word	0x028603bf
  406c80:	039d039d 	.word	0x039d039d
  406c84:	039d039d 	.word	0x039d039d
  406c88:	039d039d 	.word	0x039d039d
  406c8c:	039d039d 	.word	0x039d039d
  406c90:	03bf039d 	.word	0x03bf039d
  406c94:	03bf03bf 	.word	0x03bf03bf
  406c98:	03bf03bf 	.word	0x03bf03bf
  406c9c:	03bf03bf 	.word	0x03bf03bf
  406ca0:	03bf03bf 	.word	0x03bf03bf
  406ca4:	033703bf 	.word	0x033703bf
  406ca8:	03bf0357 	.word	0x03bf0357
  406cac:	03bf0357 	.word	0x03bf0357
  406cb0:	03bf03bf 	.word	0x03bf03bf
  406cb4:	039803bf 	.word	0x039803bf
  406cb8:	03bf03bf 	.word	0x03bf03bf
  406cbc:	03bf03ad 	.word	0x03bf03ad
  406cc0:	03bf03bf 	.word	0x03bf03bf
  406cc4:	03bf03bf 	.word	0x03bf03bf
  406cc8:	03bf0259 	.word	0x03bf0259
  406ccc:	031e03bf 	.word	0x031e03bf
  406cd0:	03bf03bf 	.word	0x03bf03bf
  406cd4:	03bf03bf 	.word	0x03bf03bf
  406cd8:	03bf03bf 	.word	0x03bf03bf
  406cdc:	03bf03bf 	.word	0x03bf03bf
  406ce0:	03bf03bf 	.word	0x03bf03bf
  406ce4:	02db02c6 	.word	0x02db02c6
  406ce8:	03570357 	.word	0x03570357
  406cec:	028b0357 	.word	0x028b0357
  406cf0:	03bf02db 	.word	0x03bf02db
  406cf4:	029003bf 	.word	0x029003bf
  406cf8:	029d03bf 	.word	0x029d03bf
  406cfc:	02b401cc 	.word	0x02b401cc
  406d00:	03bf0208 	.word	0x03bf0208
  406d04:	03bf01e1 	.word	0x03bf01e1
  406d08:	03bf007e 	.word	0x03bf007e
  406d0c:	020d03bf 	.word	0x020d03bf
  406d10:	980d      	ldr	r0, [sp, #52]	; 0x34
  406d12:	930f      	str	r3, [sp, #60]	; 0x3c
  406d14:	4240      	negs	r0, r0
  406d16:	900d      	str	r0, [sp, #52]	; 0x34
  406d18:	f04b 0b04 	orr.w	fp, fp, #4
  406d1c:	f89a 3000 	ldrb.w	r3, [sl]
  406d20:	e794      	b.n	406c4c <_svfprintf_r+0xb0>
  406d22:	aa25      	add	r2, sp, #148	; 0x94
  406d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406d26:	980c      	ldr	r0, [sp, #48]	; 0x30
  406d28:	f004 fe30 	bl	40b98c <__ssprint_r>
  406d2c:	b940      	cbnz	r0, 406d40 <_svfprintf_r+0x1a4>
  406d2e:	46c8      	mov	r8, r9
  406d30:	e779      	b.n	406c26 <_svfprintf_r+0x8a>
  406d32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  406d34:	b123      	cbz	r3, 406d40 <_svfprintf_r+0x1a4>
  406d36:	980c      	ldr	r0, [sp, #48]	; 0x30
  406d38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406d3a:	aa25      	add	r2, sp, #148	; 0x94
  406d3c:	f004 fe26 	bl	40b98c <__ssprint_r>
  406d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406d42:	899b      	ldrh	r3, [r3, #12]
  406d44:	f013 0f40 	tst.w	r3, #64	; 0x40
  406d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406d4a:	bf18      	it	ne
  406d4c:	f04f 33ff 	movne.w	r3, #4294967295
  406d50:	9309      	str	r3, [sp, #36]	; 0x24
  406d52:	9809      	ldr	r0, [sp, #36]	; 0x24
  406d54:	b043      	add	sp, #268	; 0x10c
  406d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d5a:	f01b 0f20 	tst.w	fp, #32
  406d5e:	9311      	str	r3, [sp, #68]	; 0x44
  406d60:	f040 81dd 	bne.w	40711e <_svfprintf_r+0x582>
  406d64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406d66:	f01b 0f10 	tst.w	fp, #16
  406d6a:	4613      	mov	r3, r2
  406d6c:	f040 856e 	bne.w	40784c <_svfprintf_r+0xcb0>
  406d70:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406d74:	f000 856a 	beq.w	40784c <_svfprintf_r+0xcb0>
  406d78:	8814      	ldrh	r4, [r2, #0]
  406d7a:	3204      	adds	r2, #4
  406d7c:	2500      	movs	r5, #0
  406d7e:	2301      	movs	r3, #1
  406d80:	920f      	str	r2, [sp, #60]	; 0x3c
  406d82:	2700      	movs	r7, #0
  406d84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406d88:	990a      	ldr	r1, [sp, #40]	; 0x28
  406d8a:	1c4a      	adds	r2, r1, #1
  406d8c:	f000 8265 	beq.w	40725a <_svfprintf_r+0x6be>
  406d90:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  406d94:	9207      	str	r2, [sp, #28]
  406d96:	ea54 0205 	orrs.w	r2, r4, r5
  406d9a:	f040 8264 	bne.w	407266 <_svfprintf_r+0x6ca>
  406d9e:	2900      	cmp	r1, #0
  406da0:	f040 843c 	bne.w	40761c <_svfprintf_r+0xa80>
  406da4:	2b00      	cmp	r3, #0
  406da6:	f040 84d7 	bne.w	407758 <_svfprintf_r+0xbbc>
  406daa:	f01b 0301 	ands.w	r3, fp, #1
  406dae:	930e      	str	r3, [sp, #56]	; 0x38
  406db0:	f000 8604 	beq.w	4079bc <_svfprintf_r+0xe20>
  406db4:	ae42      	add	r6, sp, #264	; 0x108
  406db6:	2330      	movs	r3, #48	; 0x30
  406db8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  406dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406dbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406dc0:	4293      	cmp	r3, r2
  406dc2:	bfb8      	it	lt
  406dc4:	4613      	movlt	r3, r2
  406dc6:	9308      	str	r3, [sp, #32]
  406dc8:	2300      	movs	r3, #0
  406dca:	9312      	str	r3, [sp, #72]	; 0x48
  406dcc:	b117      	cbz	r7, 406dd4 <_svfprintf_r+0x238>
  406dce:	9b08      	ldr	r3, [sp, #32]
  406dd0:	3301      	adds	r3, #1
  406dd2:	9308      	str	r3, [sp, #32]
  406dd4:	9b07      	ldr	r3, [sp, #28]
  406dd6:	f013 0302 	ands.w	r3, r3, #2
  406dda:	9310      	str	r3, [sp, #64]	; 0x40
  406ddc:	d002      	beq.n	406de4 <_svfprintf_r+0x248>
  406dde:	9b08      	ldr	r3, [sp, #32]
  406de0:	3302      	adds	r3, #2
  406de2:	9308      	str	r3, [sp, #32]
  406de4:	9b07      	ldr	r3, [sp, #28]
  406de6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  406dea:	f040 830e 	bne.w	40740a <_svfprintf_r+0x86e>
  406dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406df0:	9a08      	ldr	r2, [sp, #32]
  406df2:	eba3 0b02 	sub.w	fp, r3, r2
  406df6:	f1bb 0f00 	cmp.w	fp, #0
  406dfa:	f340 8306 	ble.w	40740a <_svfprintf_r+0x86e>
  406dfe:	f1bb 0f10 	cmp.w	fp, #16
  406e02:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406e04:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406e06:	dd29      	ble.n	406e5c <_svfprintf_r+0x2c0>
  406e08:	4643      	mov	r3, r8
  406e0a:	4621      	mov	r1, r4
  406e0c:	46a8      	mov	r8, r5
  406e0e:	2710      	movs	r7, #16
  406e10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406e12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406e14:	e006      	b.n	406e24 <_svfprintf_r+0x288>
  406e16:	f1ab 0b10 	sub.w	fp, fp, #16
  406e1a:	f1bb 0f10 	cmp.w	fp, #16
  406e1e:	f103 0308 	add.w	r3, r3, #8
  406e22:	dd18      	ble.n	406e56 <_svfprintf_r+0x2ba>
  406e24:	3201      	adds	r2, #1
  406e26:	48b7      	ldr	r0, [pc, #732]	; (407104 <_svfprintf_r+0x568>)
  406e28:	9226      	str	r2, [sp, #152]	; 0x98
  406e2a:	3110      	adds	r1, #16
  406e2c:	2a07      	cmp	r2, #7
  406e2e:	9127      	str	r1, [sp, #156]	; 0x9c
  406e30:	e883 0081 	stmia.w	r3, {r0, r7}
  406e34:	ddef      	ble.n	406e16 <_svfprintf_r+0x27a>
  406e36:	aa25      	add	r2, sp, #148	; 0x94
  406e38:	4629      	mov	r1, r5
  406e3a:	4620      	mov	r0, r4
  406e3c:	f004 fda6 	bl	40b98c <__ssprint_r>
  406e40:	2800      	cmp	r0, #0
  406e42:	f47f af7d 	bne.w	406d40 <_svfprintf_r+0x1a4>
  406e46:	f1ab 0b10 	sub.w	fp, fp, #16
  406e4a:	f1bb 0f10 	cmp.w	fp, #16
  406e4e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406e50:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406e52:	464b      	mov	r3, r9
  406e54:	dce6      	bgt.n	406e24 <_svfprintf_r+0x288>
  406e56:	4645      	mov	r5, r8
  406e58:	460c      	mov	r4, r1
  406e5a:	4698      	mov	r8, r3
  406e5c:	3201      	adds	r2, #1
  406e5e:	4ba9      	ldr	r3, [pc, #676]	; (407104 <_svfprintf_r+0x568>)
  406e60:	9226      	str	r2, [sp, #152]	; 0x98
  406e62:	445c      	add	r4, fp
  406e64:	2a07      	cmp	r2, #7
  406e66:	9427      	str	r4, [sp, #156]	; 0x9c
  406e68:	e888 0808 	stmia.w	r8, {r3, fp}
  406e6c:	f300 8498 	bgt.w	4077a0 <_svfprintf_r+0xc04>
  406e70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406e74:	f108 0808 	add.w	r8, r8, #8
  406e78:	b177      	cbz	r7, 406e98 <_svfprintf_r+0x2fc>
  406e7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e7c:	3301      	adds	r3, #1
  406e7e:	3401      	adds	r4, #1
  406e80:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  406e84:	2201      	movs	r2, #1
  406e86:	2b07      	cmp	r3, #7
  406e88:	9427      	str	r4, [sp, #156]	; 0x9c
  406e8a:	9326      	str	r3, [sp, #152]	; 0x98
  406e8c:	e888 0006 	stmia.w	r8, {r1, r2}
  406e90:	f300 83db 	bgt.w	40764a <_svfprintf_r+0xaae>
  406e94:	f108 0808 	add.w	r8, r8, #8
  406e98:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406e9a:	b16b      	cbz	r3, 406eb8 <_svfprintf_r+0x31c>
  406e9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e9e:	3301      	adds	r3, #1
  406ea0:	3402      	adds	r4, #2
  406ea2:	a91e      	add	r1, sp, #120	; 0x78
  406ea4:	2202      	movs	r2, #2
  406ea6:	2b07      	cmp	r3, #7
  406ea8:	9427      	str	r4, [sp, #156]	; 0x9c
  406eaa:	9326      	str	r3, [sp, #152]	; 0x98
  406eac:	e888 0006 	stmia.w	r8, {r1, r2}
  406eb0:	f300 83d6 	bgt.w	407660 <_svfprintf_r+0xac4>
  406eb4:	f108 0808 	add.w	r8, r8, #8
  406eb8:	2d80      	cmp	r5, #128	; 0x80
  406eba:	f000 8315 	beq.w	4074e8 <_svfprintf_r+0x94c>
  406ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406ec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406ec2:	1a9f      	subs	r7, r3, r2
  406ec4:	2f00      	cmp	r7, #0
  406ec6:	dd36      	ble.n	406f36 <_svfprintf_r+0x39a>
  406ec8:	2f10      	cmp	r7, #16
  406eca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406ecc:	4d8e      	ldr	r5, [pc, #568]	; (407108 <_svfprintf_r+0x56c>)
  406ece:	dd27      	ble.n	406f20 <_svfprintf_r+0x384>
  406ed0:	4642      	mov	r2, r8
  406ed2:	4621      	mov	r1, r4
  406ed4:	46b0      	mov	r8, r6
  406ed6:	f04f 0b10 	mov.w	fp, #16
  406eda:	462e      	mov	r6, r5
  406edc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406ede:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406ee0:	e004      	b.n	406eec <_svfprintf_r+0x350>
  406ee2:	3f10      	subs	r7, #16
  406ee4:	2f10      	cmp	r7, #16
  406ee6:	f102 0208 	add.w	r2, r2, #8
  406eea:	dd15      	ble.n	406f18 <_svfprintf_r+0x37c>
  406eec:	3301      	adds	r3, #1
  406eee:	3110      	adds	r1, #16
  406ef0:	2b07      	cmp	r3, #7
  406ef2:	9127      	str	r1, [sp, #156]	; 0x9c
  406ef4:	9326      	str	r3, [sp, #152]	; 0x98
  406ef6:	e882 0840 	stmia.w	r2, {r6, fp}
  406efa:	ddf2      	ble.n	406ee2 <_svfprintf_r+0x346>
  406efc:	aa25      	add	r2, sp, #148	; 0x94
  406efe:	4629      	mov	r1, r5
  406f00:	4620      	mov	r0, r4
  406f02:	f004 fd43 	bl	40b98c <__ssprint_r>
  406f06:	2800      	cmp	r0, #0
  406f08:	f47f af1a 	bne.w	406d40 <_svfprintf_r+0x1a4>
  406f0c:	3f10      	subs	r7, #16
  406f0e:	2f10      	cmp	r7, #16
  406f10:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406f12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f14:	464a      	mov	r2, r9
  406f16:	dce9      	bgt.n	406eec <_svfprintf_r+0x350>
  406f18:	4635      	mov	r5, r6
  406f1a:	460c      	mov	r4, r1
  406f1c:	4646      	mov	r6, r8
  406f1e:	4690      	mov	r8, r2
  406f20:	3301      	adds	r3, #1
  406f22:	443c      	add	r4, r7
  406f24:	2b07      	cmp	r3, #7
  406f26:	9427      	str	r4, [sp, #156]	; 0x9c
  406f28:	9326      	str	r3, [sp, #152]	; 0x98
  406f2a:	e888 00a0 	stmia.w	r8, {r5, r7}
  406f2e:	f300 8381 	bgt.w	407634 <_svfprintf_r+0xa98>
  406f32:	f108 0808 	add.w	r8, r8, #8
  406f36:	9b07      	ldr	r3, [sp, #28]
  406f38:	05df      	lsls	r7, r3, #23
  406f3a:	f100 8268 	bmi.w	40740e <_svfprintf_r+0x872>
  406f3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f40:	990e      	ldr	r1, [sp, #56]	; 0x38
  406f42:	f8c8 6000 	str.w	r6, [r8]
  406f46:	3301      	adds	r3, #1
  406f48:	440c      	add	r4, r1
  406f4a:	2b07      	cmp	r3, #7
  406f4c:	9427      	str	r4, [sp, #156]	; 0x9c
  406f4e:	f8c8 1004 	str.w	r1, [r8, #4]
  406f52:	9326      	str	r3, [sp, #152]	; 0x98
  406f54:	f300 834d 	bgt.w	4075f2 <_svfprintf_r+0xa56>
  406f58:	f108 0808 	add.w	r8, r8, #8
  406f5c:	9b07      	ldr	r3, [sp, #28]
  406f5e:	075b      	lsls	r3, r3, #29
  406f60:	d53a      	bpl.n	406fd8 <_svfprintf_r+0x43c>
  406f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406f64:	9a08      	ldr	r2, [sp, #32]
  406f66:	1a9d      	subs	r5, r3, r2
  406f68:	2d00      	cmp	r5, #0
  406f6a:	dd35      	ble.n	406fd8 <_svfprintf_r+0x43c>
  406f6c:	2d10      	cmp	r5, #16
  406f6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f70:	dd20      	ble.n	406fb4 <_svfprintf_r+0x418>
  406f72:	2610      	movs	r6, #16
  406f74:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406f76:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  406f7a:	e004      	b.n	406f86 <_svfprintf_r+0x3ea>
  406f7c:	3d10      	subs	r5, #16
  406f7e:	2d10      	cmp	r5, #16
  406f80:	f108 0808 	add.w	r8, r8, #8
  406f84:	dd16      	ble.n	406fb4 <_svfprintf_r+0x418>
  406f86:	3301      	adds	r3, #1
  406f88:	4a5e      	ldr	r2, [pc, #376]	; (407104 <_svfprintf_r+0x568>)
  406f8a:	9326      	str	r3, [sp, #152]	; 0x98
  406f8c:	3410      	adds	r4, #16
  406f8e:	2b07      	cmp	r3, #7
  406f90:	9427      	str	r4, [sp, #156]	; 0x9c
  406f92:	e888 0044 	stmia.w	r8, {r2, r6}
  406f96:	ddf1      	ble.n	406f7c <_svfprintf_r+0x3e0>
  406f98:	aa25      	add	r2, sp, #148	; 0x94
  406f9a:	4659      	mov	r1, fp
  406f9c:	4638      	mov	r0, r7
  406f9e:	f004 fcf5 	bl	40b98c <__ssprint_r>
  406fa2:	2800      	cmp	r0, #0
  406fa4:	f47f aecc 	bne.w	406d40 <_svfprintf_r+0x1a4>
  406fa8:	3d10      	subs	r5, #16
  406faa:	2d10      	cmp	r5, #16
  406fac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406fae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406fb0:	46c8      	mov	r8, r9
  406fb2:	dce8      	bgt.n	406f86 <_svfprintf_r+0x3ea>
  406fb4:	3301      	adds	r3, #1
  406fb6:	4a53      	ldr	r2, [pc, #332]	; (407104 <_svfprintf_r+0x568>)
  406fb8:	9326      	str	r3, [sp, #152]	; 0x98
  406fba:	442c      	add	r4, r5
  406fbc:	2b07      	cmp	r3, #7
  406fbe:	9427      	str	r4, [sp, #156]	; 0x9c
  406fc0:	e888 0024 	stmia.w	r8, {r2, r5}
  406fc4:	dd08      	ble.n	406fd8 <_svfprintf_r+0x43c>
  406fc6:	aa25      	add	r2, sp, #148	; 0x94
  406fc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406fca:	980c      	ldr	r0, [sp, #48]	; 0x30
  406fcc:	f004 fcde 	bl	40b98c <__ssprint_r>
  406fd0:	2800      	cmp	r0, #0
  406fd2:	f47f aeb5 	bne.w	406d40 <_svfprintf_r+0x1a4>
  406fd6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406fda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406fdc:	9908      	ldr	r1, [sp, #32]
  406fde:	428a      	cmp	r2, r1
  406fe0:	bfac      	ite	ge
  406fe2:	189b      	addge	r3, r3, r2
  406fe4:	185b      	addlt	r3, r3, r1
  406fe6:	9309      	str	r3, [sp, #36]	; 0x24
  406fe8:	2c00      	cmp	r4, #0
  406fea:	f040 830d 	bne.w	407608 <_svfprintf_r+0xa6c>
  406fee:	2300      	movs	r3, #0
  406ff0:	9326      	str	r3, [sp, #152]	; 0x98
  406ff2:	46c8      	mov	r8, r9
  406ff4:	e5f9      	b.n	406bea <_svfprintf_r+0x4e>
  406ff6:	9311      	str	r3, [sp, #68]	; 0x44
  406ff8:	f01b 0320 	ands.w	r3, fp, #32
  406ffc:	f040 81e3 	bne.w	4073c6 <_svfprintf_r+0x82a>
  407000:	f01b 0210 	ands.w	r2, fp, #16
  407004:	f040 842e 	bne.w	407864 <_svfprintf_r+0xcc8>
  407008:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40700c:	f000 842a 	beq.w	407864 <_svfprintf_r+0xcc8>
  407010:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407012:	4613      	mov	r3, r2
  407014:	460a      	mov	r2, r1
  407016:	3204      	adds	r2, #4
  407018:	880c      	ldrh	r4, [r1, #0]
  40701a:	920f      	str	r2, [sp, #60]	; 0x3c
  40701c:	2500      	movs	r5, #0
  40701e:	e6b0      	b.n	406d82 <_svfprintf_r+0x1e6>
  407020:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407022:	9311      	str	r3, [sp, #68]	; 0x44
  407024:	6816      	ldr	r6, [r2, #0]
  407026:	2400      	movs	r4, #0
  407028:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40702c:	1d15      	adds	r5, r2, #4
  40702e:	2e00      	cmp	r6, #0
  407030:	f000 86a7 	beq.w	407d82 <_svfprintf_r+0x11e6>
  407034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407036:	1c53      	adds	r3, r2, #1
  407038:	f000 8609 	beq.w	407c4e <_svfprintf_r+0x10b2>
  40703c:	4621      	mov	r1, r4
  40703e:	4630      	mov	r0, r6
  407040:	f003 feee 	bl	40ae20 <memchr>
  407044:	2800      	cmp	r0, #0
  407046:	f000 86e1 	beq.w	407e0c <_svfprintf_r+0x1270>
  40704a:	1b83      	subs	r3, r0, r6
  40704c:	930e      	str	r3, [sp, #56]	; 0x38
  40704e:	940a      	str	r4, [sp, #40]	; 0x28
  407050:	950f      	str	r5, [sp, #60]	; 0x3c
  407052:	f8cd b01c 	str.w	fp, [sp, #28]
  407056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40705a:	9308      	str	r3, [sp, #32]
  40705c:	9412      	str	r4, [sp, #72]	; 0x48
  40705e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407062:	e6b3      	b.n	406dcc <_svfprintf_r+0x230>
  407064:	f89a 3000 	ldrb.w	r3, [sl]
  407068:	2201      	movs	r2, #1
  40706a:	212b      	movs	r1, #43	; 0x2b
  40706c:	e5ee      	b.n	406c4c <_svfprintf_r+0xb0>
  40706e:	f04b 0b20 	orr.w	fp, fp, #32
  407072:	f89a 3000 	ldrb.w	r3, [sl]
  407076:	e5e9      	b.n	406c4c <_svfprintf_r+0xb0>
  407078:	9311      	str	r3, [sp, #68]	; 0x44
  40707a:	2a00      	cmp	r2, #0
  40707c:	f040 8795 	bne.w	407faa <_svfprintf_r+0x140e>
  407080:	4b22      	ldr	r3, [pc, #136]	; (40710c <_svfprintf_r+0x570>)
  407082:	9318      	str	r3, [sp, #96]	; 0x60
  407084:	f01b 0f20 	tst.w	fp, #32
  407088:	f040 8111 	bne.w	4072ae <_svfprintf_r+0x712>
  40708c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40708e:	f01b 0f10 	tst.w	fp, #16
  407092:	4613      	mov	r3, r2
  407094:	f040 83e1 	bne.w	40785a <_svfprintf_r+0xcbe>
  407098:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40709c:	f000 83dd 	beq.w	40785a <_svfprintf_r+0xcbe>
  4070a0:	3304      	adds	r3, #4
  4070a2:	8814      	ldrh	r4, [r2, #0]
  4070a4:	930f      	str	r3, [sp, #60]	; 0x3c
  4070a6:	2500      	movs	r5, #0
  4070a8:	f01b 0f01 	tst.w	fp, #1
  4070ac:	f000 810c 	beq.w	4072c8 <_svfprintf_r+0x72c>
  4070b0:	ea54 0305 	orrs.w	r3, r4, r5
  4070b4:	f000 8108 	beq.w	4072c8 <_svfprintf_r+0x72c>
  4070b8:	2330      	movs	r3, #48	; 0x30
  4070ba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4070be:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4070c2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4070c6:	f04b 0b02 	orr.w	fp, fp, #2
  4070ca:	2302      	movs	r3, #2
  4070cc:	e659      	b.n	406d82 <_svfprintf_r+0x1e6>
  4070ce:	f89a 3000 	ldrb.w	r3, [sl]
  4070d2:	2900      	cmp	r1, #0
  4070d4:	f47f adba 	bne.w	406c4c <_svfprintf_r+0xb0>
  4070d8:	2201      	movs	r2, #1
  4070da:	2120      	movs	r1, #32
  4070dc:	e5b6      	b.n	406c4c <_svfprintf_r+0xb0>
  4070de:	f04b 0b01 	orr.w	fp, fp, #1
  4070e2:	f89a 3000 	ldrb.w	r3, [sl]
  4070e6:	e5b1      	b.n	406c4c <_svfprintf_r+0xb0>
  4070e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4070ea:	6823      	ldr	r3, [r4, #0]
  4070ec:	930d      	str	r3, [sp, #52]	; 0x34
  4070ee:	4618      	mov	r0, r3
  4070f0:	2800      	cmp	r0, #0
  4070f2:	4623      	mov	r3, r4
  4070f4:	f103 0304 	add.w	r3, r3, #4
  4070f8:	f6ff ae0a 	blt.w	406d10 <_svfprintf_r+0x174>
  4070fc:	930f      	str	r3, [sp, #60]	; 0x3c
  4070fe:	f89a 3000 	ldrb.w	r3, [sl]
  407102:	e5a3      	b.n	406c4c <_svfprintf_r+0xb0>
  407104:	0040da74 	.word	0x0040da74
  407108:	0040da84 	.word	0x0040da84
  40710c:	0040da54 	.word	0x0040da54
  407110:	f04b 0b10 	orr.w	fp, fp, #16
  407114:	f01b 0f20 	tst.w	fp, #32
  407118:	9311      	str	r3, [sp, #68]	; 0x44
  40711a:	f43f ae23 	beq.w	406d64 <_svfprintf_r+0x1c8>
  40711e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407120:	3507      	adds	r5, #7
  407122:	f025 0307 	bic.w	r3, r5, #7
  407126:	f103 0208 	add.w	r2, r3, #8
  40712a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40712e:	920f      	str	r2, [sp, #60]	; 0x3c
  407130:	2301      	movs	r3, #1
  407132:	e626      	b.n	406d82 <_svfprintf_r+0x1e6>
  407134:	f89a 3000 	ldrb.w	r3, [sl]
  407138:	2b2a      	cmp	r3, #42	; 0x2a
  40713a:	f10a 0401 	add.w	r4, sl, #1
  40713e:	f000 8727 	beq.w	407f90 <_svfprintf_r+0x13f4>
  407142:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407146:	2809      	cmp	r0, #9
  407148:	46a2      	mov	sl, r4
  40714a:	f200 86ad 	bhi.w	407ea8 <_svfprintf_r+0x130c>
  40714e:	2300      	movs	r3, #0
  407150:	461c      	mov	r4, r3
  407152:	f81a 3b01 	ldrb.w	r3, [sl], #1
  407156:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40715a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40715e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407162:	2809      	cmp	r0, #9
  407164:	d9f5      	bls.n	407152 <_svfprintf_r+0x5b6>
  407166:	940a      	str	r4, [sp, #40]	; 0x28
  407168:	e572      	b.n	406c50 <_svfprintf_r+0xb4>
  40716a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40716e:	f89a 3000 	ldrb.w	r3, [sl]
  407172:	e56b      	b.n	406c4c <_svfprintf_r+0xb0>
  407174:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  407178:	f89a 3000 	ldrb.w	r3, [sl]
  40717c:	e566      	b.n	406c4c <_svfprintf_r+0xb0>
  40717e:	f89a 3000 	ldrb.w	r3, [sl]
  407182:	2b6c      	cmp	r3, #108	; 0x6c
  407184:	bf03      	ittte	eq
  407186:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40718a:	f04b 0b20 	orreq.w	fp, fp, #32
  40718e:	f10a 0a01 	addeq.w	sl, sl, #1
  407192:	f04b 0b10 	orrne.w	fp, fp, #16
  407196:	e559      	b.n	406c4c <_svfprintf_r+0xb0>
  407198:	2a00      	cmp	r2, #0
  40719a:	f040 8711 	bne.w	407fc0 <_svfprintf_r+0x1424>
  40719e:	f01b 0f20 	tst.w	fp, #32
  4071a2:	f040 84f9 	bne.w	407b98 <_svfprintf_r+0xffc>
  4071a6:	f01b 0f10 	tst.w	fp, #16
  4071aa:	f040 84ac 	bne.w	407b06 <_svfprintf_r+0xf6a>
  4071ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4071b2:	f000 84a8 	beq.w	407b06 <_svfprintf_r+0xf6a>
  4071b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4071b8:	6813      	ldr	r3, [r2, #0]
  4071ba:	3204      	adds	r2, #4
  4071bc:	920f      	str	r2, [sp, #60]	; 0x3c
  4071be:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4071c2:	801a      	strh	r2, [r3, #0]
  4071c4:	e511      	b.n	406bea <_svfprintf_r+0x4e>
  4071c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4071c8:	4bb3      	ldr	r3, [pc, #716]	; (407498 <_svfprintf_r+0x8fc>)
  4071ca:	680c      	ldr	r4, [r1, #0]
  4071cc:	9318      	str	r3, [sp, #96]	; 0x60
  4071ce:	2230      	movs	r2, #48	; 0x30
  4071d0:	2378      	movs	r3, #120	; 0x78
  4071d2:	3104      	adds	r1, #4
  4071d4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4071d8:	9311      	str	r3, [sp, #68]	; 0x44
  4071da:	f04b 0b02 	orr.w	fp, fp, #2
  4071de:	910f      	str	r1, [sp, #60]	; 0x3c
  4071e0:	2500      	movs	r5, #0
  4071e2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4071e6:	2302      	movs	r3, #2
  4071e8:	e5cb      	b.n	406d82 <_svfprintf_r+0x1e6>
  4071ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4071ec:	9311      	str	r3, [sp, #68]	; 0x44
  4071ee:	680a      	ldr	r2, [r1, #0]
  4071f0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4071f4:	2300      	movs	r3, #0
  4071f6:	460a      	mov	r2, r1
  4071f8:	461f      	mov	r7, r3
  4071fa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4071fe:	3204      	adds	r2, #4
  407200:	2301      	movs	r3, #1
  407202:	9308      	str	r3, [sp, #32]
  407204:	f8cd b01c 	str.w	fp, [sp, #28]
  407208:	970a      	str	r7, [sp, #40]	; 0x28
  40720a:	9712      	str	r7, [sp, #72]	; 0x48
  40720c:	920f      	str	r2, [sp, #60]	; 0x3c
  40720e:	930e      	str	r3, [sp, #56]	; 0x38
  407210:	ae28      	add	r6, sp, #160	; 0xa0
  407212:	e5df      	b.n	406dd4 <_svfprintf_r+0x238>
  407214:	9311      	str	r3, [sp, #68]	; 0x44
  407216:	2a00      	cmp	r2, #0
  407218:	f040 86ea 	bne.w	407ff0 <_svfprintf_r+0x1454>
  40721c:	f01b 0f20 	tst.w	fp, #32
  407220:	d15d      	bne.n	4072de <_svfprintf_r+0x742>
  407222:	f01b 0f10 	tst.w	fp, #16
  407226:	f040 8308 	bne.w	40783a <_svfprintf_r+0xc9e>
  40722a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40722e:	f000 8304 	beq.w	40783a <_svfprintf_r+0xc9e>
  407232:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407234:	f9b1 4000 	ldrsh.w	r4, [r1]
  407238:	3104      	adds	r1, #4
  40723a:	17e5      	asrs	r5, r4, #31
  40723c:	4622      	mov	r2, r4
  40723e:	462b      	mov	r3, r5
  407240:	910f      	str	r1, [sp, #60]	; 0x3c
  407242:	2a00      	cmp	r2, #0
  407244:	f173 0300 	sbcs.w	r3, r3, #0
  407248:	db58      	blt.n	4072fc <_svfprintf_r+0x760>
  40724a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40724c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407250:	1c4a      	adds	r2, r1, #1
  407252:	f04f 0301 	mov.w	r3, #1
  407256:	f47f ad9b 	bne.w	406d90 <_svfprintf_r+0x1f4>
  40725a:	ea54 0205 	orrs.w	r2, r4, r5
  40725e:	f000 81df 	beq.w	407620 <_svfprintf_r+0xa84>
  407262:	f8cd b01c 	str.w	fp, [sp, #28]
  407266:	2b01      	cmp	r3, #1
  407268:	f000 827b 	beq.w	407762 <_svfprintf_r+0xbc6>
  40726c:	2b02      	cmp	r3, #2
  40726e:	f040 8206 	bne.w	40767e <_svfprintf_r+0xae2>
  407272:	9818      	ldr	r0, [sp, #96]	; 0x60
  407274:	464e      	mov	r6, r9
  407276:	0923      	lsrs	r3, r4, #4
  407278:	f004 010f 	and.w	r1, r4, #15
  40727c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407280:	092a      	lsrs	r2, r5, #4
  407282:	461c      	mov	r4, r3
  407284:	4615      	mov	r5, r2
  407286:	5c43      	ldrb	r3, [r0, r1]
  407288:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40728c:	ea54 0305 	orrs.w	r3, r4, r5
  407290:	d1f1      	bne.n	407276 <_svfprintf_r+0x6da>
  407292:	eba9 0306 	sub.w	r3, r9, r6
  407296:	930e      	str	r3, [sp, #56]	; 0x38
  407298:	e590      	b.n	406dbc <_svfprintf_r+0x220>
  40729a:	9311      	str	r3, [sp, #68]	; 0x44
  40729c:	2a00      	cmp	r2, #0
  40729e:	f040 86a3 	bne.w	407fe8 <_svfprintf_r+0x144c>
  4072a2:	4b7e      	ldr	r3, [pc, #504]	; (40749c <_svfprintf_r+0x900>)
  4072a4:	9318      	str	r3, [sp, #96]	; 0x60
  4072a6:	f01b 0f20 	tst.w	fp, #32
  4072aa:	f43f aeef 	beq.w	40708c <_svfprintf_r+0x4f0>
  4072ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4072b0:	3507      	adds	r5, #7
  4072b2:	f025 0307 	bic.w	r3, r5, #7
  4072b6:	f103 0208 	add.w	r2, r3, #8
  4072ba:	f01b 0f01 	tst.w	fp, #1
  4072be:	920f      	str	r2, [sp, #60]	; 0x3c
  4072c0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4072c4:	f47f aef4 	bne.w	4070b0 <_svfprintf_r+0x514>
  4072c8:	2302      	movs	r3, #2
  4072ca:	e55a      	b.n	406d82 <_svfprintf_r+0x1e6>
  4072cc:	9311      	str	r3, [sp, #68]	; 0x44
  4072ce:	2a00      	cmp	r2, #0
  4072d0:	f040 8686 	bne.w	407fe0 <_svfprintf_r+0x1444>
  4072d4:	f04b 0b10 	orr.w	fp, fp, #16
  4072d8:	f01b 0f20 	tst.w	fp, #32
  4072dc:	d0a1      	beq.n	407222 <_svfprintf_r+0x686>
  4072de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4072e0:	3507      	adds	r5, #7
  4072e2:	f025 0507 	bic.w	r5, r5, #7
  4072e6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4072ea:	2a00      	cmp	r2, #0
  4072ec:	f105 0108 	add.w	r1, r5, #8
  4072f0:	461d      	mov	r5, r3
  4072f2:	f173 0300 	sbcs.w	r3, r3, #0
  4072f6:	910f      	str	r1, [sp, #60]	; 0x3c
  4072f8:	4614      	mov	r4, r2
  4072fa:	daa6      	bge.n	40724a <_svfprintf_r+0x6ae>
  4072fc:	272d      	movs	r7, #45	; 0x2d
  4072fe:	4264      	negs	r4, r4
  407300:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  407304:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407308:	2301      	movs	r3, #1
  40730a:	e53d      	b.n	406d88 <_svfprintf_r+0x1ec>
  40730c:	9311      	str	r3, [sp, #68]	; 0x44
  40730e:	2a00      	cmp	r2, #0
  407310:	f040 8662 	bne.w	407fd8 <_svfprintf_r+0x143c>
  407314:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407316:	3507      	adds	r5, #7
  407318:	f025 0307 	bic.w	r3, r5, #7
  40731c:	f103 0208 	add.w	r2, r3, #8
  407320:	920f      	str	r2, [sp, #60]	; 0x3c
  407322:	681a      	ldr	r2, [r3, #0]
  407324:	9215      	str	r2, [sp, #84]	; 0x54
  407326:	685b      	ldr	r3, [r3, #4]
  407328:	9314      	str	r3, [sp, #80]	; 0x50
  40732a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40732c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40732e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  407332:	4628      	mov	r0, r5
  407334:	4621      	mov	r1, r4
  407336:	f04f 32ff 	mov.w	r2, #4294967295
  40733a:	4b59      	ldr	r3, [pc, #356]	; (4074a0 <_svfprintf_r+0x904>)
  40733c:	f005 f9f4 	bl	40c728 <__aeabi_dcmpun>
  407340:	2800      	cmp	r0, #0
  407342:	f040 834a 	bne.w	4079da <_svfprintf_r+0xe3e>
  407346:	4628      	mov	r0, r5
  407348:	4621      	mov	r1, r4
  40734a:	f04f 32ff 	mov.w	r2, #4294967295
  40734e:	4b54      	ldr	r3, [pc, #336]	; (4074a0 <_svfprintf_r+0x904>)
  407350:	f005 f9cc 	bl	40c6ec <__aeabi_dcmple>
  407354:	2800      	cmp	r0, #0
  407356:	f040 8340 	bne.w	4079da <_svfprintf_r+0xe3e>
  40735a:	a815      	add	r0, sp, #84	; 0x54
  40735c:	c80d      	ldmia	r0, {r0, r2, r3}
  40735e:	9914      	ldr	r1, [sp, #80]	; 0x50
  407360:	f005 f9ba 	bl	40c6d8 <__aeabi_dcmplt>
  407364:	2800      	cmp	r0, #0
  407366:	f040 8530 	bne.w	407dca <_svfprintf_r+0x122e>
  40736a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40736e:	4e4d      	ldr	r6, [pc, #308]	; (4074a4 <_svfprintf_r+0x908>)
  407370:	4b4d      	ldr	r3, [pc, #308]	; (4074a8 <_svfprintf_r+0x90c>)
  407372:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  407376:	9007      	str	r0, [sp, #28]
  407378:	9811      	ldr	r0, [sp, #68]	; 0x44
  40737a:	2203      	movs	r2, #3
  40737c:	2100      	movs	r1, #0
  40737e:	9208      	str	r2, [sp, #32]
  407380:	910a      	str	r1, [sp, #40]	; 0x28
  407382:	2847      	cmp	r0, #71	; 0x47
  407384:	bfd8      	it	le
  407386:	461e      	movle	r6, r3
  407388:	920e      	str	r2, [sp, #56]	; 0x38
  40738a:	9112      	str	r1, [sp, #72]	; 0x48
  40738c:	e51e      	b.n	406dcc <_svfprintf_r+0x230>
  40738e:	f04b 0b08 	orr.w	fp, fp, #8
  407392:	f89a 3000 	ldrb.w	r3, [sl]
  407396:	e459      	b.n	406c4c <_svfprintf_r+0xb0>
  407398:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40739c:	2300      	movs	r3, #0
  40739e:	461c      	mov	r4, r3
  4073a0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4073a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4073a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4073ac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4073b0:	2809      	cmp	r0, #9
  4073b2:	d9f5      	bls.n	4073a0 <_svfprintf_r+0x804>
  4073b4:	940d      	str	r4, [sp, #52]	; 0x34
  4073b6:	e44b      	b.n	406c50 <_svfprintf_r+0xb4>
  4073b8:	f04b 0b10 	orr.w	fp, fp, #16
  4073bc:	9311      	str	r3, [sp, #68]	; 0x44
  4073be:	f01b 0320 	ands.w	r3, fp, #32
  4073c2:	f43f ae1d 	beq.w	407000 <_svfprintf_r+0x464>
  4073c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4073c8:	3507      	adds	r5, #7
  4073ca:	f025 0307 	bic.w	r3, r5, #7
  4073ce:	f103 0208 	add.w	r2, r3, #8
  4073d2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4073d6:	920f      	str	r2, [sp, #60]	; 0x3c
  4073d8:	2300      	movs	r3, #0
  4073da:	e4d2      	b.n	406d82 <_svfprintf_r+0x1e6>
  4073dc:	9311      	str	r3, [sp, #68]	; 0x44
  4073de:	2a00      	cmp	r2, #0
  4073e0:	f040 85e7 	bne.w	407fb2 <_svfprintf_r+0x1416>
  4073e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4073e6:	2a00      	cmp	r2, #0
  4073e8:	f43f aca3 	beq.w	406d32 <_svfprintf_r+0x196>
  4073ec:	2300      	movs	r3, #0
  4073ee:	2101      	movs	r1, #1
  4073f0:	461f      	mov	r7, r3
  4073f2:	9108      	str	r1, [sp, #32]
  4073f4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4073f8:	f8cd b01c 	str.w	fp, [sp, #28]
  4073fc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  407400:	930a      	str	r3, [sp, #40]	; 0x28
  407402:	9312      	str	r3, [sp, #72]	; 0x48
  407404:	910e      	str	r1, [sp, #56]	; 0x38
  407406:	ae28      	add	r6, sp, #160	; 0xa0
  407408:	e4e4      	b.n	406dd4 <_svfprintf_r+0x238>
  40740a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40740c:	e534      	b.n	406e78 <_svfprintf_r+0x2dc>
  40740e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407410:	2b65      	cmp	r3, #101	; 0x65
  407412:	f340 80a7 	ble.w	407564 <_svfprintf_r+0x9c8>
  407416:	a815      	add	r0, sp, #84	; 0x54
  407418:	c80d      	ldmia	r0, {r0, r2, r3}
  40741a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40741c:	f005 f952 	bl	40c6c4 <__aeabi_dcmpeq>
  407420:	2800      	cmp	r0, #0
  407422:	f000 8150 	beq.w	4076c6 <_svfprintf_r+0xb2a>
  407426:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407428:	4a20      	ldr	r2, [pc, #128]	; (4074ac <_svfprintf_r+0x910>)
  40742a:	f8c8 2000 	str.w	r2, [r8]
  40742e:	3301      	adds	r3, #1
  407430:	3401      	adds	r4, #1
  407432:	2201      	movs	r2, #1
  407434:	2b07      	cmp	r3, #7
  407436:	9427      	str	r4, [sp, #156]	; 0x9c
  407438:	9326      	str	r3, [sp, #152]	; 0x98
  40743a:	f8c8 2004 	str.w	r2, [r8, #4]
  40743e:	f300 836a 	bgt.w	407b16 <_svfprintf_r+0xf7a>
  407442:	f108 0808 	add.w	r8, r8, #8
  407446:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407448:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40744a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40744c:	4293      	cmp	r3, r2
  40744e:	db03      	blt.n	407458 <_svfprintf_r+0x8bc>
  407450:	9b07      	ldr	r3, [sp, #28]
  407452:	07dd      	lsls	r5, r3, #31
  407454:	f57f ad82 	bpl.w	406f5c <_svfprintf_r+0x3c0>
  407458:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40745a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40745c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40745e:	f8c8 2000 	str.w	r2, [r8]
  407462:	3301      	adds	r3, #1
  407464:	440c      	add	r4, r1
  407466:	2b07      	cmp	r3, #7
  407468:	f8c8 1004 	str.w	r1, [r8, #4]
  40746c:	9427      	str	r4, [sp, #156]	; 0x9c
  40746e:	9326      	str	r3, [sp, #152]	; 0x98
  407470:	f300 839e 	bgt.w	407bb0 <_svfprintf_r+0x1014>
  407474:	f108 0808 	add.w	r8, r8, #8
  407478:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40747a:	1e5e      	subs	r6, r3, #1
  40747c:	2e00      	cmp	r6, #0
  40747e:	f77f ad6d 	ble.w	406f5c <_svfprintf_r+0x3c0>
  407482:	2e10      	cmp	r6, #16
  407484:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407486:	4d0a      	ldr	r5, [pc, #40]	; (4074b0 <_svfprintf_r+0x914>)
  407488:	f340 81f5 	ble.w	407876 <_svfprintf_r+0xcda>
  40748c:	4622      	mov	r2, r4
  40748e:	2710      	movs	r7, #16
  407490:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407494:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407496:	e013      	b.n	4074c0 <_svfprintf_r+0x924>
  407498:	0040da54 	.word	0x0040da54
  40749c:	0040da40 	.word	0x0040da40
  4074a0:	7fefffff 	.word	0x7fefffff
  4074a4:	0040da34 	.word	0x0040da34
  4074a8:	0040da30 	.word	0x0040da30
  4074ac:	0040da70 	.word	0x0040da70
  4074b0:	0040da84 	.word	0x0040da84
  4074b4:	f108 0808 	add.w	r8, r8, #8
  4074b8:	3e10      	subs	r6, #16
  4074ba:	2e10      	cmp	r6, #16
  4074bc:	f340 81da 	ble.w	407874 <_svfprintf_r+0xcd8>
  4074c0:	3301      	adds	r3, #1
  4074c2:	3210      	adds	r2, #16
  4074c4:	2b07      	cmp	r3, #7
  4074c6:	9227      	str	r2, [sp, #156]	; 0x9c
  4074c8:	9326      	str	r3, [sp, #152]	; 0x98
  4074ca:	e888 00a0 	stmia.w	r8, {r5, r7}
  4074ce:	ddf1      	ble.n	4074b4 <_svfprintf_r+0x918>
  4074d0:	aa25      	add	r2, sp, #148	; 0x94
  4074d2:	4621      	mov	r1, r4
  4074d4:	4658      	mov	r0, fp
  4074d6:	f004 fa59 	bl	40b98c <__ssprint_r>
  4074da:	2800      	cmp	r0, #0
  4074dc:	f47f ac30 	bne.w	406d40 <_svfprintf_r+0x1a4>
  4074e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4074e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4074e4:	46c8      	mov	r8, r9
  4074e6:	e7e7      	b.n	4074b8 <_svfprintf_r+0x91c>
  4074e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4074ea:	9a08      	ldr	r2, [sp, #32]
  4074ec:	1a9f      	subs	r7, r3, r2
  4074ee:	2f00      	cmp	r7, #0
  4074f0:	f77f ace5 	ble.w	406ebe <_svfprintf_r+0x322>
  4074f4:	2f10      	cmp	r7, #16
  4074f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4074f8:	4db6      	ldr	r5, [pc, #728]	; (4077d4 <_svfprintf_r+0xc38>)
  4074fa:	dd27      	ble.n	40754c <_svfprintf_r+0x9b0>
  4074fc:	4642      	mov	r2, r8
  4074fe:	4621      	mov	r1, r4
  407500:	46b0      	mov	r8, r6
  407502:	f04f 0b10 	mov.w	fp, #16
  407506:	462e      	mov	r6, r5
  407508:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40750a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40750c:	e004      	b.n	407518 <_svfprintf_r+0x97c>
  40750e:	3f10      	subs	r7, #16
  407510:	2f10      	cmp	r7, #16
  407512:	f102 0208 	add.w	r2, r2, #8
  407516:	dd15      	ble.n	407544 <_svfprintf_r+0x9a8>
  407518:	3301      	adds	r3, #1
  40751a:	3110      	adds	r1, #16
  40751c:	2b07      	cmp	r3, #7
  40751e:	9127      	str	r1, [sp, #156]	; 0x9c
  407520:	9326      	str	r3, [sp, #152]	; 0x98
  407522:	e882 0840 	stmia.w	r2, {r6, fp}
  407526:	ddf2      	ble.n	40750e <_svfprintf_r+0x972>
  407528:	aa25      	add	r2, sp, #148	; 0x94
  40752a:	4629      	mov	r1, r5
  40752c:	4620      	mov	r0, r4
  40752e:	f004 fa2d 	bl	40b98c <__ssprint_r>
  407532:	2800      	cmp	r0, #0
  407534:	f47f ac04 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407538:	3f10      	subs	r7, #16
  40753a:	2f10      	cmp	r7, #16
  40753c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40753e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407540:	464a      	mov	r2, r9
  407542:	dce9      	bgt.n	407518 <_svfprintf_r+0x97c>
  407544:	4635      	mov	r5, r6
  407546:	460c      	mov	r4, r1
  407548:	4646      	mov	r6, r8
  40754a:	4690      	mov	r8, r2
  40754c:	3301      	adds	r3, #1
  40754e:	443c      	add	r4, r7
  407550:	2b07      	cmp	r3, #7
  407552:	9427      	str	r4, [sp, #156]	; 0x9c
  407554:	9326      	str	r3, [sp, #152]	; 0x98
  407556:	e888 00a0 	stmia.w	r8, {r5, r7}
  40755a:	f300 8232 	bgt.w	4079c2 <_svfprintf_r+0xe26>
  40755e:	f108 0808 	add.w	r8, r8, #8
  407562:	e4ac      	b.n	406ebe <_svfprintf_r+0x322>
  407564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407566:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407568:	2b01      	cmp	r3, #1
  40756a:	f340 81fe 	ble.w	40796a <_svfprintf_r+0xdce>
  40756e:	3701      	adds	r7, #1
  407570:	3401      	adds	r4, #1
  407572:	2301      	movs	r3, #1
  407574:	2f07      	cmp	r7, #7
  407576:	9427      	str	r4, [sp, #156]	; 0x9c
  407578:	9726      	str	r7, [sp, #152]	; 0x98
  40757a:	f8c8 6000 	str.w	r6, [r8]
  40757e:	f8c8 3004 	str.w	r3, [r8, #4]
  407582:	f300 8203 	bgt.w	40798c <_svfprintf_r+0xdf0>
  407586:	f108 0808 	add.w	r8, r8, #8
  40758a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40758c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40758e:	f8c8 3000 	str.w	r3, [r8]
  407592:	3701      	adds	r7, #1
  407594:	4414      	add	r4, r2
  407596:	2f07      	cmp	r7, #7
  407598:	9427      	str	r4, [sp, #156]	; 0x9c
  40759a:	9726      	str	r7, [sp, #152]	; 0x98
  40759c:	f8c8 2004 	str.w	r2, [r8, #4]
  4075a0:	f300 8200 	bgt.w	4079a4 <_svfprintf_r+0xe08>
  4075a4:	f108 0808 	add.w	r8, r8, #8
  4075a8:	a815      	add	r0, sp, #84	; 0x54
  4075aa:	c80d      	ldmia	r0, {r0, r2, r3}
  4075ac:	9914      	ldr	r1, [sp, #80]	; 0x50
  4075ae:	f005 f889 	bl	40c6c4 <__aeabi_dcmpeq>
  4075b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4075b4:	2800      	cmp	r0, #0
  4075b6:	f040 8101 	bne.w	4077bc <_svfprintf_r+0xc20>
  4075ba:	3b01      	subs	r3, #1
  4075bc:	3701      	adds	r7, #1
  4075be:	3601      	adds	r6, #1
  4075c0:	441c      	add	r4, r3
  4075c2:	2f07      	cmp	r7, #7
  4075c4:	9726      	str	r7, [sp, #152]	; 0x98
  4075c6:	9427      	str	r4, [sp, #156]	; 0x9c
  4075c8:	f8c8 6000 	str.w	r6, [r8]
  4075cc:	f8c8 3004 	str.w	r3, [r8, #4]
  4075d0:	f300 8127 	bgt.w	407822 <_svfprintf_r+0xc86>
  4075d4:	f108 0808 	add.w	r8, r8, #8
  4075d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4075da:	f8c8 2004 	str.w	r2, [r8, #4]
  4075de:	3701      	adds	r7, #1
  4075e0:	4414      	add	r4, r2
  4075e2:	ab21      	add	r3, sp, #132	; 0x84
  4075e4:	2f07      	cmp	r7, #7
  4075e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4075e8:	9726      	str	r7, [sp, #152]	; 0x98
  4075ea:	f8c8 3000 	str.w	r3, [r8]
  4075ee:	f77f acb3 	ble.w	406f58 <_svfprintf_r+0x3bc>
  4075f2:	aa25      	add	r2, sp, #148	; 0x94
  4075f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4075f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4075f8:	f004 f9c8 	bl	40b98c <__ssprint_r>
  4075fc:	2800      	cmp	r0, #0
  4075fe:	f47f ab9f 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407602:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407604:	46c8      	mov	r8, r9
  407606:	e4a9      	b.n	406f5c <_svfprintf_r+0x3c0>
  407608:	aa25      	add	r2, sp, #148	; 0x94
  40760a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40760c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40760e:	f004 f9bd 	bl	40b98c <__ssprint_r>
  407612:	2800      	cmp	r0, #0
  407614:	f43f aceb 	beq.w	406fee <_svfprintf_r+0x452>
  407618:	f7ff bb92 	b.w	406d40 <_svfprintf_r+0x1a4>
  40761c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407620:	2b01      	cmp	r3, #1
  407622:	f000 8134 	beq.w	40788e <_svfprintf_r+0xcf2>
  407626:	2b02      	cmp	r3, #2
  407628:	d125      	bne.n	407676 <_svfprintf_r+0xada>
  40762a:	f8cd b01c 	str.w	fp, [sp, #28]
  40762e:	2400      	movs	r4, #0
  407630:	2500      	movs	r5, #0
  407632:	e61e      	b.n	407272 <_svfprintf_r+0x6d6>
  407634:	aa25      	add	r2, sp, #148	; 0x94
  407636:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407638:	980c      	ldr	r0, [sp, #48]	; 0x30
  40763a:	f004 f9a7 	bl	40b98c <__ssprint_r>
  40763e:	2800      	cmp	r0, #0
  407640:	f47f ab7e 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407644:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407646:	46c8      	mov	r8, r9
  407648:	e475      	b.n	406f36 <_svfprintf_r+0x39a>
  40764a:	aa25      	add	r2, sp, #148	; 0x94
  40764c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40764e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407650:	f004 f99c 	bl	40b98c <__ssprint_r>
  407654:	2800      	cmp	r0, #0
  407656:	f47f ab73 	bne.w	406d40 <_svfprintf_r+0x1a4>
  40765a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40765c:	46c8      	mov	r8, r9
  40765e:	e41b      	b.n	406e98 <_svfprintf_r+0x2fc>
  407660:	aa25      	add	r2, sp, #148	; 0x94
  407662:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407664:	980c      	ldr	r0, [sp, #48]	; 0x30
  407666:	f004 f991 	bl	40b98c <__ssprint_r>
  40766a:	2800      	cmp	r0, #0
  40766c:	f47f ab68 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407670:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407672:	46c8      	mov	r8, r9
  407674:	e420      	b.n	406eb8 <_svfprintf_r+0x31c>
  407676:	f8cd b01c 	str.w	fp, [sp, #28]
  40767a:	2400      	movs	r4, #0
  40767c:	2500      	movs	r5, #0
  40767e:	4649      	mov	r1, r9
  407680:	e000      	b.n	407684 <_svfprintf_r+0xae8>
  407682:	4631      	mov	r1, r6
  407684:	08e2      	lsrs	r2, r4, #3
  407686:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40768a:	08e8      	lsrs	r0, r5, #3
  40768c:	f004 0307 	and.w	r3, r4, #7
  407690:	4605      	mov	r5, r0
  407692:	4614      	mov	r4, r2
  407694:	3330      	adds	r3, #48	; 0x30
  407696:	ea54 0205 	orrs.w	r2, r4, r5
  40769a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40769e:	f101 36ff 	add.w	r6, r1, #4294967295
  4076a2:	d1ee      	bne.n	407682 <_svfprintf_r+0xae6>
  4076a4:	9a07      	ldr	r2, [sp, #28]
  4076a6:	07d2      	lsls	r2, r2, #31
  4076a8:	f57f adf3 	bpl.w	407292 <_svfprintf_r+0x6f6>
  4076ac:	2b30      	cmp	r3, #48	; 0x30
  4076ae:	f43f adf0 	beq.w	407292 <_svfprintf_r+0x6f6>
  4076b2:	3902      	subs	r1, #2
  4076b4:	2330      	movs	r3, #48	; 0x30
  4076b6:	f806 3c01 	strb.w	r3, [r6, #-1]
  4076ba:	eba9 0301 	sub.w	r3, r9, r1
  4076be:	930e      	str	r3, [sp, #56]	; 0x38
  4076c0:	460e      	mov	r6, r1
  4076c2:	f7ff bb7b 	b.w	406dbc <_svfprintf_r+0x220>
  4076c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4076c8:	2900      	cmp	r1, #0
  4076ca:	f340 822e 	ble.w	407b2a <_svfprintf_r+0xf8e>
  4076ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4076d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4076d2:	4293      	cmp	r3, r2
  4076d4:	bfa8      	it	ge
  4076d6:	4613      	movge	r3, r2
  4076d8:	2b00      	cmp	r3, #0
  4076da:	461f      	mov	r7, r3
  4076dc:	dd0d      	ble.n	4076fa <_svfprintf_r+0xb5e>
  4076de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4076e0:	f8c8 6000 	str.w	r6, [r8]
  4076e4:	3301      	adds	r3, #1
  4076e6:	443c      	add	r4, r7
  4076e8:	2b07      	cmp	r3, #7
  4076ea:	9427      	str	r4, [sp, #156]	; 0x9c
  4076ec:	f8c8 7004 	str.w	r7, [r8, #4]
  4076f0:	9326      	str	r3, [sp, #152]	; 0x98
  4076f2:	f300 831f 	bgt.w	407d34 <_svfprintf_r+0x1198>
  4076f6:	f108 0808 	add.w	r8, r8, #8
  4076fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4076fc:	2f00      	cmp	r7, #0
  4076fe:	bfa8      	it	ge
  407700:	1bdb      	subge	r3, r3, r7
  407702:	2b00      	cmp	r3, #0
  407704:	461f      	mov	r7, r3
  407706:	f340 80d6 	ble.w	4078b6 <_svfprintf_r+0xd1a>
  40770a:	2f10      	cmp	r7, #16
  40770c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40770e:	4d31      	ldr	r5, [pc, #196]	; (4077d4 <_svfprintf_r+0xc38>)
  407710:	f340 81ed 	ble.w	407aee <_svfprintf_r+0xf52>
  407714:	4642      	mov	r2, r8
  407716:	4621      	mov	r1, r4
  407718:	46b0      	mov	r8, r6
  40771a:	f04f 0b10 	mov.w	fp, #16
  40771e:	462e      	mov	r6, r5
  407720:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407722:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407724:	e004      	b.n	407730 <_svfprintf_r+0xb94>
  407726:	3208      	adds	r2, #8
  407728:	3f10      	subs	r7, #16
  40772a:	2f10      	cmp	r7, #16
  40772c:	f340 81db 	ble.w	407ae6 <_svfprintf_r+0xf4a>
  407730:	3301      	adds	r3, #1
  407732:	3110      	adds	r1, #16
  407734:	2b07      	cmp	r3, #7
  407736:	9127      	str	r1, [sp, #156]	; 0x9c
  407738:	9326      	str	r3, [sp, #152]	; 0x98
  40773a:	e882 0840 	stmia.w	r2, {r6, fp}
  40773e:	ddf2      	ble.n	407726 <_svfprintf_r+0xb8a>
  407740:	aa25      	add	r2, sp, #148	; 0x94
  407742:	4629      	mov	r1, r5
  407744:	4620      	mov	r0, r4
  407746:	f004 f921 	bl	40b98c <__ssprint_r>
  40774a:	2800      	cmp	r0, #0
  40774c:	f47f aaf8 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407750:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407752:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407754:	464a      	mov	r2, r9
  407756:	e7e7      	b.n	407728 <_svfprintf_r+0xb8c>
  407758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40775a:	930e      	str	r3, [sp, #56]	; 0x38
  40775c:	464e      	mov	r6, r9
  40775e:	f7ff bb2d 	b.w	406dbc <_svfprintf_r+0x220>
  407762:	2d00      	cmp	r5, #0
  407764:	bf08      	it	eq
  407766:	2c0a      	cmpeq	r4, #10
  407768:	f0c0 808f 	bcc.w	40788a <_svfprintf_r+0xcee>
  40776c:	464e      	mov	r6, r9
  40776e:	4620      	mov	r0, r4
  407770:	4629      	mov	r1, r5
  407772:	220a      	movs	r2, #10
  407774:	2300      	movs	r3, #0
  407776:	f005 f815 	bl	40c7a4 <__aeabi_uldivmod>
  40777a:	3230      	adds	r2, #48	; 0x30
  40777c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  407780:	4620      	mov	r0, r4
  407782:	4629      	mov	r1, r5
  407784:	2300      	movs	r3, #0
  407786:	220a      	movs	r2, #10
  407788:	f005 f80c 	bl	40c7a4 <__aeabi_uldivmod>
  40778c:	4604      	mov	r4, r0
  40778e:	460d      	mov	r5, r1
  407790:	ea54 0305 	orrs.w	r3, r4, r5
  407794:	d1eb      	bne.n	40776e <_svfprintf_r+0xbd2>
  407796:	eba9 0306 	sub.w	r3, r9, r6
  40779a:	930e      	str	r3, [sp, #56]	; 0x38
  40779c:	f7ff bb0e 	b.w	406dbc <_svfprintf_r+0x220>
  4077a0:	aa25      	add	r2, sp, #148	; 0x94
  4077a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4077a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4077a6:	f004 f8f1 	bl	40b98c <__ssprint_r>
  4077aa:	2800      	cmp	r0, #0
  4077ac:	f47f aac8 	bne.w	406d40 <_svfprintf_r+0x1a4>
  4077b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4077b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4077b6:	46c8      	mov	r8, r9
  4077b8:	f7ff bb5e 	b.w	406e78 <_svfprintf_r+0x2dc>
  4077bc:	1e5e      	subs	r6, r3, #1
  4077be:	2e00      	cmp	r6, #0
  4077c0:	f77f af0a 	ble.w	4075d8 <_svfprintf_r+0xa3c>
  4077c4:	2e10      	cmp	r6, #16
  4077c6:	4d03      	ldr	r5, [pc, #12]	; (4077d4 <_svfprintf_r+0xc38>)
  4077c8:	dd22      	ble.n	407810 <_svfprintf_r+0xc74>
  4077ca:	4622      	mov	r2, r4
  4077cc:	f04f 0b10 	mov.w	fp, #16
  4077d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4077d2:	e006      	b.n	4077e2 <_svfprintf_r+0xc46>
  4077d4:	0040da84 	.word	0x0040da84
  4077d8:	3e10      	subs	r6, #16
  4077da:	2e10      	cmp	r6, #16
  4077dc:	f108 0808 	add.w	r8, r8, #8
  4077e0:	dd15      	ble.n	40780e <_svfprintf_r+0xc72>
  4077e2:	3701      	adds	r7, #1
  4077e4:	3210      	adds	r2, #16
  4077e6:	2f07      	cmp	r7, #7
  4077e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4077ea:	9726      	str	r7, [sp, #152]	; 0x98
  4077ec:	e888 0820 	stmia.w	r8, {r5, fp}
  4077f0:	ddf2      	ble.n	4077d8 <_svfprintf_r+0xc3c>
  4077f2:	aa25      	add	r2, sp, #148	; 0x94
  4077f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4077f6:	4620      	mov	r0, r4
  4077f8:	f004 f8c8 	bl	40b98c <__ssprint_r>
  4077fc:	2800      	cmp	r0, #0
  4077fe:	f47f aa9f 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407802:	3e10      	subs	r6, #16
  407804:	2e10      	cmp	r6, #16
  407806:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407808:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40780a:	46c8      	mov	r8, r9
  40780c:	dce9      	bgt.n	4077e2 <_svfprintf_r+0xc46>
  40780e:	4614      	mov	r4, r2
  407810:	3701      	adds	r7, #1
  407812:	4434      	add	r4, r6
  407814:	2f07      	cmp	r7, #7
  407816:	9427      	str	r4, [sp, #156]	; 0x9c
  407818:	9726      	str	r7, [sp, #152]	; 0x98
  40781a:	e888 0060 	stmia.w	r8, {r5, r6}
  40781e:	f77f aed9 	ble.w	4075d4 <_svfprintf_r+0xa38>
  407822:	aa25      	add	r2, sp, #148	; 0x94
  407824:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407826:	980c      	ldr	r0, [sp, #48]	; 0x30
  407828:	f004 f8b0 	bl	40b98c <__ssprint_r>
  40782c:	2800      	cmp	r0, #0
  40782e:	f47f aa87 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407832:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407834:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407836:	46c8      	mov	r8, r9
  407838:	e6ce      	b.n	4075d8 <_svfprintf_r+0xa3c>
  40783a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40783c:	6814      	ldr	r4, [r2, #0]
  40783e:	4613      	mov	r3, r2
  407840:	3304      	adds	r3, #4
  407842:	17e5      	asrs	r5, r4, #31
  407844:	930f      	str	r3, [sp, #60]	; 0x3c
  407846:	4622      	mov	r2, r4
  407848:	462b      	mov	r3, r5
  40784a:	e4fa      	b.n	407242 <_svfprintf_r+0x6a6>
  40784c:	3204      	adds	r2, #4
  40784e:	681c      	ldr	r4, [r3, #0]
  407850:	920f      	str	r2, [sp, #60]	; 0x3c
  407852:	2301      	movs	r3, #1
  407854:	2500      	movs	r5, #0
  407856:	f7ff ba94 	b.w	406d82 <_svfprintf_r+0x1e6>
  40785a:	681c      	ldr	r4, [r3, #0]
  40785c:	3304      	adds	r3, #4
  40785e:	930f      	str	r3, [sp, #60]	; 0x3c
  407860:	2500      	movs	r5, #0
  407862:	e421      	b.n	4070a8 <_svfprintf_r+0x50c>
  407864:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407866:	460a      	mov	r2, r1
  407868:	3204      	adds	r2, #4
  40786a:	680c      	ldr	r4, [r1, #0]
  40786c:	920f      	str	r2, [sp, #60]	; 0x3c
  40786e:	2500      	movs	r5, #0
  407870:	f7ff ba87 	b.w	406d82 <_svfprintf_r+0x1e6>
  407874:	4614      	mov	r4, r2
  407876:	3301      	adds	r3, #1
  407878:	4434      	add	r4, r6
  40787a:	2b07      	cmp	r3, #7
  40787c:	9427      	str	r4, [sp, #156]	; 0x9c
  40787e:	9326      	str	r3, [sp, #152]	; 0x98
  407880:	e888 0060 	stmia.w	r8, {r5, r6}
  407884:	f77f ab68 	ble.w	406f58 <_svfprintf_r+0x3bc>
  407888:	e6b3      	b.n	4075f2 <_svfprintf_r+0xa56>
  40788a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40788e:	f8cd b01c 	str.w	fp, [sp, #28]
  407892:	ae42      	add	r6, sp, #264	; 0x108
  407894:	3430      	adds	r4, #48	; 0x30
  407896:	2301      	movs	r3, #1
  407898:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40789c:	930e      	str	r3, [sp, #56]	; 0x38
  40789e:	f7ff ba8d 	b.w	406dbc <_svfprintf_r+0x220>
  4078a2:	aa25      	add	r2, sp, #148	; 0x94
  4078a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4078a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4078a8:	f004 f870 	bl	40b98c <__ssprint_r>
  4078ac:	2800      	cmp	r0, #0
  4078ae:	f47f aa47 	bne.w	406d40 <_svfprintf_r+0x1a4>
  4078b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4078b4:	46c8      	mov	r8, r9
  4078b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4078b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4078ba:	429a      	cmp	r2, r3
  4078bc:	db44      	blt.n	407948 <_svfprintf_r+0xdac>
  4078be:	9b07      	ldr	r3, [sp, #28]
  4078c0:	07d9      	lsls	r1, r3, #31
  4078c2:	d441      	bmi.n	407948 <_svfprintf_r+0xdac>
  4078c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4078c6:	9812      	ldr	r0, [sp, #72]	; 0x48
  4078c8:	1a9a      	subs	r2, r3, r2
  4078ca:	1a1d      	subs	r5, r3, r0
  4078cc:	4295      	cmp	r5, r2
  4078ce:	bfa8      	it	ge
  4078d0:	4615      	movge	r5, r2
  4078d2:	2d00      	cmp	r5, #0
  4078d4:	dd0e      	ble.n	4078f4 <_svfprintf_r+0xd58>
  4078d6:	9926      	ldr	r1, [sp, #152]	; 0x98
  4078d8:	f8c8 5004 	str.w	r5, [r8, #4]
  4078dc:	3101      	adds	r1, #1
  4078de:	4406      	add	r6, r0
  4078e0:	442c      	add	r4, r5
  4078e2:	2907      	cmp	r1, #7
  4078e4:	f8c8 6000 	str.w	r6, [r8]
  4078e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4078ea:	9126      	str	r1, [sp, #152]	; 0x98
  4078ec:	f300 823b 	bgt.w	407d66 <_svfprintf_r+0x11ca>
  4078f0:	f108 0808 	add.w	r8, r8, #8
  4078f4:	2d00      	cmp	r5, #0
  4078f6:	bfac      	ite	ge
  4078f8:	1b56      	subge	r6, r2, r5
  4078fa:	4616      	movlt	r6, r2
  4078fc:	2e00      	cmp	r6, #0
  4078fe:	f77f ab2d 	ble.w	406f5c <_svfprintf_r+0x3c0>
  407902:	2e10      	cmp	r6, #16
  407904:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407906:	4db0      	ldr	r5, [pc, #704]	; (407bc8 <_svfprintf_r+0x102c>)
  407908:	ddb5      	ble.n	407876 <_svfprintf_r+0xcda>
  40790a:	4622      	mov	r2, r4
  40790c:	2710      	movs	r7, #16
  40790e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407912:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407914:	e004      	b.n	407920 <_svfprintf_r+0xd84>
  407916:	f108 0808 	add.w	r8, r8, #8
  40791a:	3e10      	subs	r6, #16
  40791c:	2e10      	cmp	r6, #16
  40791e:	dda9      	ble.n	407874 <_svfprintf_r+0xcd8>
  407920:	3301      	adds	r3, #1
  407922:	3210      	adds	r2, #16
  407924:	2b07      	cmp	r3, #7
  407926:	9227      	str	r2, [sp, #156]	; 0x9c
  407928:	9326      	str	r3, [sp, #152]	; 0x98
  40792a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40792e:	ddf2      	ble.n	407916 <_svfprintf_r+0xd7a>
  407930:	aa25      	add	r2, sp, #148	; 0x94
  407932:	4621      	mov	r1, r4
  407934:	4658      	mov	r0, fp
  407936:	f004 f829 	bl	40b98c <__ssprint_r>
  40793a:	2800      	cmp	r0, #0
  40793c:	f47f aa00 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407940:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407942:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407944:	46c8      	mov	r8, r9
  407946:	e7e8      	b.n	40791a <_svfprintf_r+0xd7e>
  407948:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40794a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40794c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40794e:	f8c8 1000 	str.w	r1, [r8]
  407952:	3301      	adds	r3, #1
  407954:	4404      	add	r4, r0
  407956:	2b07      	cmp	r3, #7
  407958:	9427      	str	r4, [sp, #156]	; 0x9c
  40795a:	f8c8 0004 	str.w	r0, [r8, #4]
  40795e:	9326      	str	r3, [sp, #152]	; 0x98
  407960:	f300 81f5 	bgt.w	407d4e <_svfprintf_r+0x11b2>
  407964:	f108 0808 	add.w	r8, r8, #8
  407968:	e7ac      	b.n	4078c4 <_svfprintf_r+0xd28>
  40796a:	9b07      	ldr	r3, [sp, #28]
  40796c:	07da      	lsls	r2, r3, #31
  40796e:	f53f adfe 	bmi.w	40756e <_svfprintf_r+0x9d2>
  407972:	3701      	adds	r7, #1
  407974:	3401      	adds	r4, #1
  407976:	2301      	movs	r3, #1
  407978:	2f07      	cmp	r7, #7
  40797a:	9427      	str	r4, [sp, #156]	; 0x9c
  40797c:	9726      	str	r7, [sp, #152]	; 0x98
  40797e:	f8c8 6000 	str.w	r6, [r8]
  407982:	f8c8 3004 	str.w	r3, [r8, #4]
  407986:	f77f ae25 	ble.w	4075d4 <_svfprintf_r+0xa38>
  40798a:	e74a      	b.n	407822 <_svfprintf_r+0xc86>
  40798c:	aa25      	add	r2, sp, #148	; 0x94
  40798e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407990:	980c      	ldr	r0, [sp, #48]	; 0x30
  407992:	f003 fffb 	bl	40b98c <__ssprint_r>
  407996:	2800      	cmp	r0, #0
  407998:	f47f a9d2 	bne.w	406d40 <_svfprintf_r+0x1a4>
  40799c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40799e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4079a0:	46c8      	mov	r8, r9
  4079a2:	e5f2      	b.n	40758a <_svfprintf_r+0x9ee>
  4079a4:	aa25      	add	r2, sp, #148	; 0x94
  4079a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4079a8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4079aa:	f003 ffef 	bl	40b98c <__ssprint_r>
  4079ae:	2800      	cmp	r0, #0
  4079b0:	f47f a9c6 	bne.w	406d40 <_svfprintf_r+0x1a4>
  4079b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4079b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4079b8:	46c8      	mov	r8, r9
  4079ba:	e5f5      	b.n	4075a8 <_svfprintf_r+0xa0c>
  4079bc:	464e      	mov	r6, r9
  4079be:	f7ff b9fd 	b.w	406dbc <_svfprintf_r+0x220>
  4079c2:	aa25      	add	r2, sp, #148	; 0x94
  4079c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4079c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4079c8:	f003 ffe0 	bl	40b98c <__ssprint_r>
  4079cc:	2800      	cmp	r0, #0
  4079ce:	f47f a9b7 	bne.w	406d40 <_svfprintf_r+0x1a4>
  4079d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4079d4:	46c8      	mov	r8, r9
  4079d6:	f7ff ba72 	b.w	406ebe <_svfprintf_r+0x322>
  4079da:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4079dc:	4622      	mov	r2, r4
  4079de:	4620      	mov	r0, r4
  4079e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4079e2:	4623      	mov	r3, r4
  4079e4:	4621      	mov	r1, r4
  4079e6:	f004 fe9f 	bl	40c728 <__aeabi_dcmpun>
  4079ea:	2800      	cmp	r0, #0
  4079ec:	f040 8286 	bne.w	407efc <_svfprintf_r+0x1360>
  4079f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4079f2:	3301      	adds	r3, #1
  4079f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4079f6:	f023 0320 	bic.w	r3, r3, #32
  4079fa:	930e      	str	r3, [sp, #56]	; 0x38
  4079fc:	f000 81e2 	beq.w	407dc4 <_svfprintf_r+0x1228>
  407a00:	2b47      	cmp	r3, #71	; 0x47
  407a02:	f000 811e 	beq.w	407c42 <_svfprintf_r+0x10a6>
  407a06:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  407a0a:	9307      	str	r3, [sp, #28]
  407a0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407a0e:	1e1f      	subs	r7, r3, #0
  407a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407a12:	9308      	str	r3, [sp, #32]
  407a14:	bfbb      	ittet	lt
  407a16:	463b      	movlt	r3, r7
  407a18:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  407a1c:	2300      	movge	r3, #0
  407a1e:	232d      	movlt	r3, #45	; 0x2d
  407a20:	9310      	str	r3, [sp, #64]	; 0x40
  407a22:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407a24:	2b66      	cmp	r3, #102	; 0x66
  407a26:	f000 81bb 	beq.w	407da0 <_svfprintf_r+0x1204>
  407a2a:	2b46      	cmp	r3, #70	; 0x46
  407a2c:	f000 80df 	beq.w	407bee <_svfprintf_r+0x1052>
  407a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407a32:	9a08      	ldr	r2, [sp, #32]
  407a34:	2b45      	cmp	r3, #69	; 0x45
  407a36:	bf0c      	ite	eq
  407a38:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  407a3a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  407a3c:	a823      	add	r0, sp, #140	; 0x8c
  407a3e:	a920      	add	r1, sp, #128	; 0x80
  407a40:	bf08      	it	eq
  407a42:	1c5d      	addeq	r5, r3, #1
  407a44:	9004      	str	r0, [sp, #16]
  407a46:	9103      	str	r1, [sp, #12]
  407a48:	a81f      	add	r0, sp, #124	; 0x7c
  407a4a:	2102      	movs	r1, #2
  407a4c:	463b      	mov	r3, r7
  407a4e:	9002      	str	r0, [sp, #8]
  407a50:	9501      	str	r5, [sp, #4]
  407a52:	9100      	str	r1, [sp, #0]
  407a54:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a56:	f001 faa3 	bl	408fa0 <_dtoa_r>
  407a5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407a5c:	2b67      	cmp	r3, #103	; 0x67
  407a5e:	4606      	mov	r6, r0
  407a60:	f040 81e0 	bne.w	407e24 <_svfprintf_r+0x1288>
  407a64:	f01b 0f01 	tst.w	fp, #1
  407a68:	f000 8246 	beq.w	407ef8 <_svfprintf_r+0x135c>
  407a6c:	1974      	adds	r4, r6, r5
  407a6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407a70:	9808      	ldr	r0, [sp, #32]
  407a72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407a74:	4639      	mov	r1, r7
  407a76:	f004 fe25 	bl	40c6c4 <__aeabi_dcmpeq>
  407a7a:	2800      	cmp	r0, #0
  407a7c:	f040 8165 	bne.w	407d4a <_svfprintf_r+0x11ae>
  407a80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407a82:	42a3      	cmp	r3, r4
  407a84:	d206      	bcs.n	407a94 <_svfprintf_r+0xef8>
  407a86:	2130      	movs	r1, #48	; 0x30
  407a88:	1c5a      	adds	r2, r3, #1
  407a8a:	9223      	str	r2, [sp, #140]	; 0x8c
  407a8c:	7019      	strb	r1, [r3, #0]
  407a8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407a90:	429c      	cmp	r4, r3
  407a92:	d8f9      	bhi.n	407a88 <_svfprintf_r+0xeec>
  407a94:	1b9b      	subs	r3, r3, r6
  407a96:	9313      	str	r3, [sp, #76]	; 0x4c
  407a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407a9a:	2b47      	cmp	r3, #71	; 0x47
  407a9c:	f000 80e9 	beq.w	407c72 <_svfprintf_r+0x10d6>
  407aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407aa2:	2b65      	cmp	r3, #101	; 0x65
  407aa4:	f340 81cd 	ble.w	407e42 <_svfprintf_r+0x12a6>
  407aa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407aaa:	2b66      	cmp	r3, #102	; 0x66
  407aac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407aae:	9312      	str	r3, [sp, #72]	; 0x48
  407ab0:	f000 819e 	beq.w	407df0 <_svfprintf_r+0x1254>
  407ab4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407ab6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407ab8:	4619      	mov	r1, r3
  407aba:	4291      	cmp	r1, r2
  407abc:	f300 818a 	bgt.w	407dd4 <_svfprintf_r+0x1238>
  407ac0:	f01b 0f01 	tst.w	fp, #1
  407ac4:	f040 8213 	bne.w	407eee <_svfprintf_r+0x1352>
  407ac8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407acc:	9308      	str	r3, [sp, #32]
  407ace:	2367      	movs	r3, #103	; 0x67
  407ad0:	920e      	str	r2, [sp, #56]	; 0x38
  407ad2:	9311      	str	r3, [sp, #68]	; 0x44
  407ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407ad6:	2b00      	cmp	r3, #0
  407ad8:	f040 80c4 	bne.w	407c64 <_svfprintf_r+0x10c8>
  407adc:	930a      	str	r3, [sp, #40]	; 0x28
  407ade:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407ae2:	f7ff b973 	b.w	406dcc <_svfprintf_r+0x230>
  407ae6:	4635      	mov	r5, r6
  407ae8:	460c      	mov	r4, r1
  407aea:	4646      	mov	r6, r8
  407aec:	4690      	mov	r8, r2
  407aee:	3301      	adds	r3, #1
  407af0:	443c      	add	r4, r7
  407af2:	2b07      	cmp	r3, #7
  407af4:	9427      	str	r4, [sp, #156]	; 0x9c
  407af6:	9326      	str	r3, [sp, #152]	; 0x98
  407af8:	e888 00a0 	stmia.w	r8, {r5, r7}
  407afc:	f73f aed1 	bgt.w	4078a2 <_svfprintf_r+0xd06>
  407b00:	f108 0808 	add.w	r8, r8, #8
  407b04:	e6d7      	b.n	4078b6 <_svfprintf_r+0xd1a>
  407b06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407b08:	6813      	ldr	r3, [r2, #0]
  407b0a:	3204      	adds	r2, #4
  407b0c:	920f      	str	r2, [sp, #60]	; 0x3c
  407b0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407b10:	601a      	str	r2, [r3, #0]
  407b12:	f7ff b86a 	b.w	406bea <_svfprintf_r+0x4e>
  407b16:	aa25      	add	r2, sp, #148	; 0x94
  407b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407b1a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407b1c:	f003 ff36 	bl	40b98c <__ssprint_r>
  407b20:	2800      	cmp	r0, #0
  407b22:	f47f a90d 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407b26:	46c8      	mov	r8, r9
  407b28:	e48d      	b.n	407446 <_svfprintf_r+0x8aa>
  407b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407b2c:	4a27      	ldr	r2, [pc, #156]	; (407bcc <_svfprintf_r+0x1030>)
  407b2e:	f8c8 2000 	str.w	r2, [r8]
  407b32:	3301      	adds	r3, #1
  407b34:	3401      	adds	r4, #1
  407b36:	2201      	movs	r2, #1
  407b38:	2b07      	cmp	r3, #7
  407b3a:	9427      	str	r4, [sp, #156]	; 0x9c
  407b3c:	9326      	str	r3, [sp, #152]	; 0x98
  407b3e:	f8c8 2004 	str.w	r2, [r8, #4]
  407b42:	dc72      	bgt.n	407c2a <_svfprintf_r+0x108e>
  407b44:	f108 0808 	add.w	r8, r8, #8
  407b48:	b929      	cbnz	r1, 407b56 <_svfprintf_r+0xfba>
  407b4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407b4c:	b91b      	cbnz	r3, 407b56 <_svfprintf_r+0xfba>
  407b4e:	9b07      	ldr	r3, [sp, #28]
  407b50:	07d8      	lsls	r0, r3, #31
  407b52:	f57f aa03 	bpl.w	406f5c <_svfprintf_r+0x3c0>
  407b56:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407b58:	9819      	ldr	r0, [sp, #100]	; 0x64
  407b5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407b5c:	f8c8 2000 	str.w	r2, [r8]
  407b60:	3301      	adds	r3, #1
  407b62:	4602      	mov	r2, r0
  407b64:	4422      	add	r2, r4
  407b66:	2b07      	cmp	r3, #7
  407b68:	9227      	str	r2, [sp, #156]	; 0x9c
  407b6a:	f8c8 0004 	str.w	r0, [r8, #4]
  407b6e:	9326      	str	r3, [sp, #152]	; 0x98
  407b70:	f300 818d 	bgt.w	407e8e <_svfprintf_r+0x12f2>
  407b74:	f108 0808 	add.w	r8, r8, #8
  407b78:	2900      	cmp	r1, #0
  407b7a:	f2c0 8165 	blt.w	407e48 <_svfprintf_r+0x12ac>
  407b7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  407b80:	f8c8 6000 	str.w	r6, [r8]
  407b84:	3301      	adds	r3, #1
  407b86:	188c      	adds	r4, r1, r2
  407b88:	2b07      	cmp	r3, #7
  407b8a:	9427      	str	r4, [sp, #156]	; 0x9c
  407b8c:	9326      	str	r3, [sp, #152]	; 0x98
  407b8e:	f8c8 1004 	str.w	r1, [r8, #4]
  407b92:	f77f a9e1 	ble.w	406f58 <_svfprintf_r+0x3bc>
  407b96:	e52c      	b.n	4075f2 <_svfprintf_r+0xa56>
  407b98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
  407b9c:	6813      	ldr	r3, [r2, #0]
  407b9e:	17cd      	asrs	r5, r1, #31
  407ba0:	4608      	mov	r0, r1
  407ba2:	3204      	adds	r2, #4
  407ba4:	4629      	mov	r1, r5
  407ba6:	920f      	str	r2, [sp, #60]	; 0x3c
  407ba8:	e9c3 0100 	strd	r0, r1, [r3]
  407bac:	f7ff b81d 	b.w	406bea <_svfprintf_r+0x4e>
  407bb0:	aa25      	add	r2, sp, #148	; 0x94
  407bb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407bb4:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bb6:	f003 fee9 	bl	40b98c <__ssprint_r>
  407bba:	2800      	cmp	r0, #0
  407bbc:	f47f a8c0 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407bc0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407bc2:	46c8      	mov	r8, r9
  407bc4:	e458      	b.n	407478 <_svfprintf_r+0x8dc>
  407bc6:	bf00      	nop
  407bc8:	0040da84 	.word	0x0040da84
  407bcc:	0040da70 	.word	0x0040da70
  407bd0:	2140      	movs	r1, #64	; 0x40
  407bd2:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bd4:	f002 fe58 	bl	40a888 <_malloc_r>
  407bd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407bda:	6010      	str	r0, [r2, #0]
  407bdc:	6110      	str	r0, [r2, #16]
  407bde:	2800      	cmp	r0, #0
  407be0:	f000 81f2 	beq.w	407fc8 <_svfprintf_r+0x142c>
  407be4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407be6:	2340      	movs	r3, #64	; 0x40
  407be8:	6153      	str	r3, [r2, #20]
  407bea:	f7fe bfee 	b.w	406bca <_svfprintf_r+0x2e>
  407bee:	a823      	add	r0, sp, #140	; 0x8c
  407bf0:	a920      	add	r1, sp, #128	; 0x80
  407bf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407bf4:	9004      	str	r0, [sp, #16]
  407bf6:	9103      	str	r1, [sp, #12]
  407bf8:	a81f      	add	r0, sp, #124	; 0x7c
  407bfa:	2103      	movs	r1, #3
  407bfc:	9002      	str	r0, [sp, #8]
  407bfe:	9a08      	ldr	r2, [sp, #32]
  407c00:	9401      	str	r4, [sp, #4]
  407c02:	463b      	mov	r3, r7
  407c04:	9100      	str	r1, [sp, #0]
  407c06:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c08:	f001 f9ca 	bl	408fa0 <_dtoa_r>
  407c0c:	4625      	mov	r5, r4
  407c0e:	4606      	mov	r6, r0
  407c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407c12:	2b46      	cmp	r3, #70	; 0x46
  407c14:	eb06 0405 	add.w	r4, r6, r5
  407c18:	f47f af29 	bne.w	407a6e <_svfprintf_r+0xed2>
  407c1c:	7833      	ldrb	r3, [r6, #0]
  407c1e:	2b30      	cmp	r3, #48	; 0x30
  407c20:	f000 8178 	beq.w	407f14 <_svfprintf_r+0x1378>
  407c24:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  407c26:	442c      	add	r4, r5
  407c28:	e721      	b.n	407a6e <_svfprintf_r+0xed2>
  407c2a:	aa25      	add	r2, sp, #148	; 0x94
  407c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c2e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c30:	f003 feac 	bl	40b98c <__ssprint_r>
  407c34:	2800      	cmp	r0, #0
  407c36:	f47f a883 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407c3a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407c3c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407c3e:	46c8      	mov	r8, r9
  407c40:	e782      	b.n	407b48 <_svfprintf_r+0xfac>
  407c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c44:	2b00      	cmp	r3, #0
  407c46:	bf08      	it	eq
  407c48:	2301      	moveq	r3, #1
  407c4a:	930a      	str	r3, [sp, #40]	; 0x28
  407c4c:	e6db      	b.n	407a06 <_svfprintf_r+0xe6a>
  407c4e:	4630      	mov	r0, r6
  407c50:	940a      	str	r4, [sp, #40]	; 0x28
  407c52:	f7fe ff35 	bl	406ac0 <strlen>
  407c56:	950f      	str	r5, [sp, #60]	; 0x3c
  407c58:	900e      	str	r0, [sp, #56]	; 0x38
  407c5a:	f8cd b01c 	str.w	fp, [sp, #28]
  407c5e:	4603      	mov	r3, r0
  407c60:	f7ff b9f9 	b.w	407056 <_svfprintf_r+0x4ba>
  407c64:	272d      	movs	r7, #45	; 0x2d
  407c66:	2300      	movs	r3, #0
  407c68:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407c6c:	930a      	str	r3, [sp, #40]	; 0x28
  407c6e:	f7ff b8ae 	b.w	406dce <_svfprintf_r+0x232>
  407c72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407c74:	9312      	str	r3, [sp, #72]	; 0x48
  407c76:	461a      	mov	r2, r3
  407c78:	3303      	adds	r3, #3
  407c7a:	db04      	blt.n	407c86 <_svfprintf_r+0x10ea>
  407c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c7e:	4619      	mov	r1, r3
  407c80:	4291      	cmp	r1, r2
  407c82:	f6bf af17 	bge.w	407ab4 <_svfprintf_r+0xf18>
  407c86:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407c88:	3b02      	subs	r3, #2
  407c8a:	9311      	str	r3, [sp, #68]	; 0x44
  407c8c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  407c90:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  407c94:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407c96:	3b01      	subs	r3, #1
  407c98:	2b00      	cmp	r3, #0
  407c9a:	931f      	str	r3, [sp, #124]	; 0x7c
  407c9c:	bfbd      	ittte	lt
  407c9e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  407ca0:	f1c3 0301 	rsblt	r3, r3, #1
  407ca4:	222d      	movlt	r2, #45	; 0x2d
  407ca6:	222b      	movge	r2, #43	; 0x2b
  407ca8:	2b09      	cmp	r3, #9
  407caa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  407cae:	f340 8116 	ble.w	407ede <_svfprintf_r+0x1342>
  407cb2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  407cb6:	4620      	mov	r0, r4
  407cb8:	4dab      	ldr	r5, [pc, #684]	; (407f68 <_svfprintf_r+0x13cc>)
  407cba:	e000      	b.n	407cbe <_svfprintf_r+0x1122>
  407cbc:	4610      	mov	r0, r2
  407cbe:	fb85 1203 	smull	r1, r2, r5, r3
  407cc2:	17d9      	asrs	r1, r3, #31
  407cc4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407cc8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  407ccc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  407cd0:	3230      	adds	r2, #48	; 0x30
  407cd2:	2909      	cmp	r1, #9
  407cd4:	f800 2c01 	strb.w	r2, [r0, #-1]
  407cd8:	460b      	mov	r3, r1
  407cda:	f100 32ff 	add.w	r2, r0, #4294967295
  407cde:	dced      	bgt.n	407cbc <_svfprintf_r+0x1120>
  407ce0:	3330      	adds	r3, #48	; 0x30
  407ce2:	3802      	subs	r0, #2
  407ce4:	b2d9      	uxtb	r1, r3
  407ce6:	4284      	cmp	r4, r0
  407ce8:	f802 1c01 	strb.w	r1, [r2, #-1]
  407cec:	f240 8165 	bls.w	407fba <_svfprintf_r+0x141e>
  407cf0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  407cf4:	4613      	mov	r3, r2
  407cf6:	e001      	b.n	407cfc <_svfprintf_r+0x1160>
  407cf8:	f813 1b01 	ldrb.w	r1, [r3], #1
  407cfc:	f800 1b01 	strb.w	r1, [r0], #1
  407d00:	42a3      	cmp	r3, r4
  407d02:	d1f9      	bne.n	407cf8 <_svfprintf_r+0x115c>
  407d04:	3301      	adds	r3, #1
  407d06:	1a9b      	subs	r3, r3, r2
  407d08:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  407d0c:	4413      	add	r3, r2
  407d0e:	aa21      	add	r2, sp, #132	; 0x84
  407d10:	1a9b      	subs	r3, r3, r2
  407d12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407d14:	931b      	str	r3, [sp, #108]	; 0x6c
  407d16:	2a01      	cmp	r2, #1
  407d18:	4413      	add	r3, r2
  407d1a:	930e      	str	r3, [sp, #56]	; 0x38
  407d1c:	f340 8119 	ble.w	407f52 <_svfprintf_r+0x13b6>
  407d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407d22:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407d24:	4413      	add	r3, r2
  407d26:	930e      	str	r3, [sp, #56]	; 0x38
  407d28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407d2c:	9308      	str	r3, [sp, #32]
  407d2e:	2300      	movs	r3, #0
  407d30:	9312      	str	r3, [sp, #72]	; 0x48
  407d32:	e6cf      	b.n	407ad4 <_svfprintf_r+0xf38>
  407d34:	aa25      	add	r2, sp, #148	; 0x94
  407d36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d38:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d3a:	f003 fe27 	bl	40b98c <__ssprint_r>
  407d3e:	2800      	cmp	r0, #0
  407d40:	f47e affe 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407d44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407d46:	46c8      	mov	r8, r9
  407d48:	e4d7      	b.n	4076fa <_svfprintf_r+0xb5e>
  407d4a:	4623      	mov	r3, r4
  407d4c:	e6a2      	b.n	407a94 <_svfprintf_r+0xef8>
  407d4e:	aa25      	add	r2, sp, #148	; 0x94
  407d50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d52:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d54:	f003 fe1a 	bl	40b98c <__ssprint_r>
  407d58:	2800      	cmp	r0, #0
  407d5a:	f47e aff1 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407d5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407d60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407d62:	46c8      	mov	r8, r9
  407d64:	e5ae      	b.n	4078c4 <_svfprintf_r+0xd28>
  407d66:	aa25      	add	r2, sp, #148	; 0x94
  407d68:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d6a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d6c:	f003 fe0e 	bl	40b98c <__ssprint_r>
  407d70:	2800      	cmp	r0, #0
  407d72:	f47e afe5 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407d76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407d78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407d7a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407d7c:	1a9a      	subs	r2, r3, r2
  407d7e:	46c8      	mov	r8, r9
  407d80:	e5b8      	b.n	4078f4 <_svfprintf_r+0xd58>
  407d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407d84:	9612      	str	r6, [sp, #72]	; 0x48
  407d86:	2b06      	cmp	r3, #6
  407d88:	bf28      	it	cs
  407d8a:	2306      	movcs	r3, #6
  407d8c:	960a      	str	r6, [sp, #40]	; 0x28
  407d8e:	4637      	mov	r7, r6
  407d90:	9308      	str	r3, [sp, #32]
  407d92:	950f      	str	r5, [sp, #60]	; 0x3c
  407d94:	f8cd b01c 	str.w	fp, [sp, #28]
  407d98:	930e      	str	r3, [sp, #56]	; 0x38
  407d9a:	4e74      	ldr	r6, [pc, #464]	; (407f6c <_svfprintf_r+0x13d0>)
  407d9c:	f7ff b816 	b.w	406dcc <_svfprintf_r+0x230>
  407da0:	a823      	add	r0, sp, #140	; 0x8c
  407da2:	a920      	add	r1, sp, #128	; 0x80
  407da4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407da6:	9004      	str	r0, [sp, #16]
  407da8:	9103      	str	r1, [sp, #12]
  407daa:	a81f      	add	r0, sp, #124	; 0x7c
  407dac:	2103      	movs	r1, #3
  407dae:	9002      	str	r0, [sp, #8]
  407db0:	9a08      	ldr	r2, [sp, #32]
  407db2:	9501      	str	r5, [sp, #4]
  407db4:	463b      	mov	r3, r7
  407db6:	9100      	str	r1, [sp, #0]
  407db8:	980c      	ldr	r0, [sp, #48]	; 0x30
  407dba:	f001 f8f1 	bl	408fa0 <_dtoa_r>
  407dbe:	4606      	mov	r6, r0
  407dc0:	1944      	adds	r4, r0, r5
  407dc2:	e72b      	b.n	407c1c <_svfprintf_r+0x1080>
  407dc4:	2306      	movs	r3, #6
  407dc6:	930a      	str	r3, [sp, #40]	; 0x28
  407dc8:	e61d      	b.n	407a06 <_svfprintf_r+0xe6a>
  407dca:	272d      	movs	r7, #45	; 0x2d
  407dcc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407dd0:	f7ff bacd 	b.w	40736e <_svfprintf_r+0x7d2>
  407dd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407dd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407dd8:	4413      	add	r3, r2
  407dda:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407ddc:	930e      	str	r3, [sp, #56]	; 0x38
  407dde:	2a00      	cmp	r2, #0
  407de0:	f340 80b0 	ble.w	407f44 <_svfprintf_r+0x13a8>
  407de4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407de8:	9308      	str	r3, [sp, #32]
  407dea:	2367      	movs	r3, #103	; 0x67
  407dec:	9311      	str	r3, [sp, #68]	; 0x44
  407dee:	e671      	b.n	407ad4 <_svfprintf_r+0xf38>
  407df0:	2b00      	cmp	r3, #0
  407df2:	f340 80c3 	ble.w	407f7c <_svfprintf_r+0x13e0>
  407df6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407df8:	2a00      	cmp	r2, #0
  407dfa:	f040 8099 	bne.w	407f30 <_svfprintf_r+0x1394>
  407dfe:	f01b 0f01 	tst.w	fp, #1
  407e02:	f040 8095 	bne.w	407f30 <_svfprintf_r+0x1394>
  407e06:	9308      	str	r3, [sp, #32]
  407e08:	930e      	str	r3, [sp, #56]	; 0x38
  407e0a:	e663      	b.n	407ad4 <_svfprintf_r+0xf38>
  407e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e0e:	9308      	str	r3, [sp, #32]
  407e10:	930e      	str	r3, [sp, #56]	; 0x38
  407e12:	900a      	str	r0, [sp, #40]	; 0x28
  407e14:	950f      	str	r5, [sp, #60]	; 0x3c
  407e16:	f8cd b01c 	str.w	fp, [sp, #28]
  407e1a:	9012      	str	r0, [sp, #72]	; 0x48
  407e1c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407e20:	f7fe bfd4 	b.w	406dcc <_svfprintf_r+0x230>
  407e24:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407e26:	2b47      	cmp	r3, #71	; 0x47
  407e28:	f47f ae20 	bne.w	407a6c <_svfprintf_r+0xed0>
  407e2c:	f01b 0f01 	tst.w	fp, #1
  407e30:	f47f aeee 	bne.w	407c10 <_svfprintf_r+0x1074>
  407e34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407e36:	1b9b      	subs	r3, r3, r6
  407e38:	9313      	str	r3, [sp, #76]	; 0x4c
  407e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407e3c:	2b47      	cmp	r3, #71	; 0x47
  407e3e:	f43f af18 	beq.w	407c72 <_svfprintf_r+0x10d6>
  407e42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407e44:	9312      	str	r3, [sp, #72]	; 0x48
  407e46:	e721      	b.n	407c8c <_svfprintf_r+0x10f0>
  407e48:	424f      	negs	r7, r1
  407e4a:	3110      	adds	r1, #16
  407e4c:	4d48      	ldr	r5, [pc, #288]	; (407f70 <_svfprintf_r+0x13d4>)
  407e4e:	da2f      	bge.n	407eb0 <_svfprintf_r+0x1314>
  407e50:	2410      	movs	r4, #16
  407e52:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407e56:	e004      	b.n	407e62 <_svfprintf_r+0x12c6>
  407e58:	f108 0808 	add.w	r8, r8, #8
  407e5c:	3f10      	subs	r7, #16
  407e5e:	2f10      	cmp	r7, #16
  407e60:	dd26      	ble.n	407eb0 <_svfprintf_r+0x1314>
  407e62:	3301      	adds	r3, #1
  407e64:	3210      	adds	r2, #16
  407e66:	2b07      	cmp	r3, #7
  407e68:	9227      	str	r2, [sp, #156]	; 0x9c
  407e6a:	9326      	str	r3, [sp, #152]	; 0x98
  407e6c:	f8c8 5000 	str.w	r5, [r8]
  407e70:	f8c8 4004 	str.w	r4, [r8, #4]
  407e74:	ddf0      	ble.n	407e58 <_svfprintf_r+0x12bc>
  407e76:	aa25      	add	r2, sp, #148	; 0x94
  407e78:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407e7a:	4658      	mov	r0, fp
  407e7c:	f003 fd86 	bl	40b98c <__ssprint_r>
  407e80:	2800      	cmp	r0, #0
  407e82:	f47e af5d 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407e86:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407e88:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407e8a:	46c8      	mov	r8, r9
  407e8c:	e7e6      	b.n	407e5c <_svfprintf_r+0x12c0>
  407e8e:	aa25      	add	r2, sp, #148	; 0x94
  407e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407e92:	980c      	ldr	r0, [sp, #48]	; 0x30
  407e94:	f003 fd7a 	bl	40b98c <__ssprint_r>
  407e98:	2800      	cmp	r0, #0
  407e9a:	f47e af51 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407e9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407ea0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407ea2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407ea4:	46c8      	mov	r8, r9
  407ea6:	e667      	b.n	407b78 <_svfprintf_r+0xfdc>
  407ea8:	2000      	movs	r0, #0
  407eaa:	900a      	str	r0, [sp, #40]	; 0x28
  407eac:	f7fe bed0 	b.w	406c50 <_svfprintf_r+0xb4>
  407eb0:	3301      	adds	r3, #1
  407eb2:	443a      	add	r2, r7
  407eb4:	2b07      	cmp	r3, #7
  407eb6:	e888 00a0 	stmia.w	r8, {r5, r7}
  407eba:	9227      	str	r2, [sp, #156]	; 0x9c
  407ebc:	9326      	str	r3, [sp, #152]	; 0x98
  407ebe:	f108 0808 	add.w	r8, r8, #8
  407ec2:	f77f ae5c 	ble.w	407b7e <_svfprintf_r+0xfe2>
  407ec6:	aa25      	add	r2, sp, #148	; 0x94
  407ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407eca:	980c      	ldr	r0, [sp, #48]	; 0x30
  407ecc:	f003 fd5e 	bl	40b98c <__ssprint_r>
  407ed0:	2800      	cmp	r0, #0
  407ed2:	f47e af35 	bne.w	406d40 <_svfprintf_r+0x1a4>
  407ed6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407ed8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407eda:	46c8      	mov	r8, r9
  407edc:	e64f      	b.n	407b7e <_svfprintf_r+0xfe2>
  407ede:	3330      	adds	r3, #48	; 0x30
  407ee0:	2230      	movs	r2, #48	; 0x30
  407ee2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  407ee6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  407eea:	ab22      	add	r3, sp, #136	; 0x88
  407eec:	e70f      	b.n	407d0e <_svfprintf_r+0x1172>
  407eee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407ef0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407ef2:	4413      	add	r3, r2
  407ef4:	930e      	str	r3, [sp, #56]	; 0x38
  407ef6:	e775      	b.n	407de4 <_svfprintf_r+0x1248>
  407ef8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407efa:	e5cb      	b.n	407a94 <_svfprintf_r+0xef8>
  407efc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407efe:	4e1d      	ldr	r6, [pc, #116]	; (407f74 <_svfprintf_r+0x13d8>)
  407f00:	2b00      	cmp	r3, #0
  407f02:	bfb6      	itet	lt
  407f04:	272d      	movlt	r7, #45	; 0x2d
  407f06:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  407f0a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  407f0e:	4b1a      	ldr	r3, [pc, #104]	; (407f78 <_svfprintf_r+0x13dc>)
  407f10:	f7ff ba2f 	b.w	407372 <_svfprintf_r+0x7d6>
  407f14:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407f16:	9808      	ldr	r0, [sp, #32]
  407f18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407f1a:	4639      	mov	r1, r7
  407f1c:	f004 fbd2 	bl	40c6c4 <__aeabi_dcmpeq>
  407f20:	2800      	cmp	r0, #0
  407f22:	f47f ae7f 	bne.w	407c24 <_svfprintf_r+0x1088>
  407f26:	f1c5 0501 	rsb	r5, r5, #1
  407f2a:	951f      	str	r5, [sp, #124]	; 0x7c
  407f2c:	442c      	add	r4, r5
  407f2e:	e59e      	b.n	407a6e <_svfprintf_r+0xed2>
  407f30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407f32:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407f34:	4413      	add	r3, r2
  407f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407f38:	441a      	add	r2, r3
  407f3a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407f3e:	920e      	str	r2, [sp, #56]	; 0x38
  407f40:	9308      	str	r3, [sp, #32]
  407f42:	e5c7      	b.n	407ad4 <_svfprintf_r+0xf38>
  407f44:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407f46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407f48:	f1c3 0301 	rsb	r3, r3, #1
  407f4c:	441a      	add	r2, r3
  407f4e:	4613      	mov	r3, r2
  407f50:	e7d0      	b.n	407ef4 <_svfprintf_r+0x1358>
  407f52:	f01b 0301 	ands.w	r3, fp, #1
  407f56:	9312      	str	r3, [sp, #72]	; 0x48
  407f58:	f47f aee2 	bne.w	407d20 <_svfprintf_r+0x1184>
  407f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407f5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407f62:	9308      	str	r3, [sp, #32]
  407f64:	e5b6      	b.n	407ad4 <_svfprintf_r+0xf38>
  407f66:	bf00      	nop
  407f68:	66666667 	.word	0x66666667
  407f6c:	0040da68 	.word	0x0040da68
  407f70:	0040da84 	.word	0x0040da84
  407f74:	0040da3c 	.word	0x0040da3c
  407f78:	0040da38 	.word	0x0040da38
  407f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407f7e:	b913      	cbnz	r3, 407f86 <_svfprintf_r+0x13ea>
  407f80:	f01b 0f01 	tst.w	fp, #1
  407f84:	d002      	beq.n	407f8c <_svfprintf_r+0x13f0>
  407f86:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407f88:	3301      	adds	r3, #1
  407f8a:	e7d4      	b.n	407f36 <_svfprintf_r+0x139a>
  407f8c:	2301      	movs	r3, #1
  407f8e:	e73a      	b.n	407e06 <_svfprintf_r+0x126a>
  407f90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407f92:	f89a 3001 	ldrb.w	r3, [sl, #1]
  407f96:	6828      	ldr	r0, [r5, #0]
  407f98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  407f9c:	900a      	str	r0, [sp, #40]	; 0x28
  407f9e:	4628      	mov	r0, r5
  407fa0:	3004      	adds	r0, #4
  407fa2:	46a2      	mov	sl, r4
  407fa4:	900f      	str	r0, [sp, #60]	; 0x3c
  407fa6:	f7fe be51 	b.w	406c4c <_svfprintf_r+0xb0>
  407faa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fae:	f7ff b867 	b.w	407080 <_svfprintf_r+0x4e4>
  407fb2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fb6:	f7ff ba15 	b.w	4073e4 <_svfprintf_r+0x848>
  407fba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  407fbe:	e6a6      	b.n	407d0e <_svfprintf_r+0x1172>
  407fc0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fc4:	f7ff b8eb 	b.w	40719e <_svfprintf_r+0x602>
  407fc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407fca:	230c      	movs	r3, #12
  407fcc:	6013      	str	r3, [r2, #0]
  407fce:	f04f 33ff 	mov.w	r3, #4294967295
  407fd2:	9309      	str	r3, [sp, #36]	; 0x24
  407fd4:	f7fe bebd 	b.w	406d52 <_svfprintf_r+0x1b6>
  407fd8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fdc:	f7ff b99a 	b.w	407314 <_svfprintf_r+0x778>
  407fe0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fe4:	f7ff b976 	b.w	4072d4 <_svfprintf_r+0x738>
  407fe8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fec:	f7ff b959 	b.w	4072a2 <_svfprintf_r+0x706>
  407ff0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407ff4:	f7ff b912 	b.w	40721c <_svfprintf_r+0x680>

00407ff8 <__sprint_r.part.0>:
  407ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ffc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  407ffe:	049c      	lsls	r4, r3, #18
  408000:	4693      	mov	fp, r2
  408002:	d52f      	bpl.n	408064 <__sprint_r.part.0+0x6c>
  408004:	6893      	ldr	r3, [r2, #8]
  408006:	6812      	ldr	r2, [r2, #0]
  408008:	b353      	cbz	r3, 408060 <__sprint_r.part.0+0x68>
  40800a:	460e      	mov	r6, r1
  40800c:	4607      	mov	r7, r0
  40800e:	f102 0908 	add.w	r9, r2, #8
  408012:	e919 0420 	ldmdb	r9, {r5, sl}
  408016:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40801a:	d017      	beq.n	40804c <__sprint_r.part.0+0x54>
  40801c:	3d04      	subs	r5, #4
  40801e:	2400      	movs	r4, #0
  408020:	e001      	b.n	408026 <__sprint_r.part.0+0x2e>
  408022:	45a0      	cmp	r8, r4
  408024:	d010      	beq.n	408048 <__sprint_r.part.0+0x50>
  408026:	4632      	mov	r2, r6
  408028:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40802c:	4638      	mov	r0, r7
  40802e:	f002 f87b 	bl	40a128 <_fputwc_r>
  408032:	1c43      	adds	r3, r0, #1
  408034:	f104 0401 	add.w	r4, r4, #1
  408038:	d1f3      	bne.n	408022 <__sprint_r.part.0+0x2a>
  40803a:	2300      	movs	r3, #0
  40803c:	f8cb 3008 	str.w	r3, [fp, #8]
  408040:	f8cb 3004 	str.w	r3, [fp, #4]
  408044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408048:	f8db 3008 	ldr.w	r3, [fp, #8]
  40804c:	f02a 0a03 	bic.w	sl, sl, #3
  408050:	eba3 030a 	sub.w	r3, r3, sl
  408054:	f8cb 3008 	str.w	r3, [fp, #8]
  408058:	f109 0908 	add.w	r9, r9, #8
  40805c:	2b00      	cmp	r3, #0
  40805e:	d1d8      	bne.n	408012 <__sprint_r.part.0+0x1a>
  408060:	2000      	movs	r0, #0
  408062:	e7ea      	b.n	40803a <__sprint_r.part.0+0x42>
  408064:	f002 f9ca 	bl	40a3fc <__sfvwrite_r>
  408068:	2300      	movs	r3, #0
  40806a:	f8cb 3008 	str.w	r3, [fp, #8]
  40806e:	f8cb 3004 	str.w	r3, [fp, #4]
  408072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408076:	bf00      	nop

00408078 <_vfiprintf_r>:
  408078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40807c:	b0ad      	sub	sp, #180	; 0xb4
  40807e:	461d      	mov	r5, r3
  408080:	468b      	mov	fp, r1
  408082:	4690      	mov	r8, r2
  408084:	9307      	str	r3, [sp, #28]
  408086:	9006      	str	r0, [sp, #24]
  408088:	b118      	cbz	r0, 408092 <_vfiprintf_r+0x1a>
  40808a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40808c:	2b00      	cmp	r3, #0
  40808e:	f000 80f3 	beq.w	408278 <_vfiprintf_r+0x200>
  408092:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408096:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40809a:	07df      	lsls	r7, r3, #31
  40809c:	b281      	uxth	r1, r0
  40809e:	d402      	bmi.n	4080a6 <_vfiprintf_r+0x2e>
  4080a0:	058e      	lsls	r6, r1, #22
  4080a2:	f140 80fc 	bpl.w	40829e <_vfiprintf_r+0x226>
  4080a6:	048c      	lsls	r4, r1, #18
  4080a8:	d40a      	bmi.n	4080c0 <_vfiprintf_r+0x48>
  4080aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4080ae:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4080b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4080b6:	f8ab 100c 	strh.w	r1, [fp, #12]
  4080ba:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4080be:	b289      	uxth	r1, r1
  4080c0:	0708      	lsls	r0, r1, #28
  4080c2:	f140 80b3 	bpl.w	40822c <_vfiprintf_r+0x1b4>
  4080c6:	f8db 3010 	ldr.w	r3, [fp, #16]
  4080ca:	2b00      	cmp	r3, #0
  4080cc:	f000 80ae 	beq.w	40822c <_vfiprintf_r+0x1b4>
  4080d0:	f001 031a 	and.w	r3, r1, #26
  4080d4:	2b0a      	cmp	r3, #10
  4080d6:	f000 80b5 	beq.w	408244 <_vfiprintf_r+0x1cc>
  4080da:	2300      	movs	r3, #0
  4080dc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4080e0:	930b      	str	r3, [sp, #44]	; 0x2c
  4080e2:	9311      	str	r3, [sp, #68]	; 0x44
  4080e4:	9310      	str	r3, [sp, #64]	; 0x40
  4080e6:	9303      	str	r3, [sp, #12]
  4080e8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4080ec:	46ca      	mov	sl, r9
  4080ee:	f8cd b010 	str.w	fp, [sp, #16]
  4080f2:	f898 3000 	ldrb.w	r3, [r8]
  4080f6:	4644      	mov	r4, r8
  4080f8:	b1fb      	cbz	r3, 40813a <_vfiprintf_r+0xc2>
  4080fa:	2b25      	cmp	r3, #37	; 0x25
  4080fc:	d102      	bne.n	408104 <_vfiprintf_r+0x8c>
  4080fe:	e01c      	b.n	40813a <_vfiprintf_r+0xc2>
  408100:	2b25      	cmp	r3, #37	; 0x25
  408102:	d003      	beq.n	40810c <_vfiprintf_r+0x94>
  408104:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  408108:	2b00      	cmp	r3, #0
  40810a:	d1f9      	bne.n	408100 <_vfiprintf_r+0x88>
  40810c:	eba4 0508 	sub.w	r5, r4, r8
  408110:	b19d      	cbz	r5, 40813a <_vfiprintf_r+0xc2>
  408112:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408114:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408116:	f8ca 8000 	str.w	r8, [sl]
  40811a:	3301      	adds	r3, #1
  40811c:	442a      	add	r2, r5
  40811e:	2b07      	cmp	r3, #7
  408120:	f8ca 5004 	str.w	r5, [sl, #4]
  408124:	9211      	str	r2, [sp, #68]	; 0x44
  408126:	9310      	str	r3, [sp, #64]	; 0x40
  408128:	dd7a      	ble.n	408220 <_vfiprintf_r+0x1a8>
  40812a:	2a00      	cmp	r2, #0
  40812c:	f040 84b0 	bne.w	408a90 <_vfiprintf_r+0xa18>
  408130:	9b03      	ldr	r3, [sp, #12]
  408132:	9210      	str	r2, [sp, #64]	; 0x40
  408134:	442b      	add	r3, r5
  408136:	46ca      	mov	sl, r9
  408138:	9303      	str	r3, [sp, #12]
  40813a:	7823      	ldrb	r3, [r4, #0]
  40813c:	2b00      	cmp	r3, #0
  40813e:	f000 83e0 	beq.w	408902 <_vfiprintf_r+0x88a>
  408142:	2000      	movs	r0, #0
  408144:	f04f 0300 	mov.w	r3, #0
  408148:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40814c:	f104 0801 	add.w	r8, r4, #1
  408150:	7862      	ldrb	r2, [r4, #1]
  408152:	4605      	mov	r5, r0
  408154:	4606      	mov	r6, r0
  408156:	4603      	mov	r3, r0
  408158:	f04f 34ff 	mov.w	r4, #4294967295
  40815c:	f108 0801 	add.w	r8, r8, #1
  408160:	f1a2 0120 	sub.w	r1, r2, #32
  408164:	2958      	cmp	r1, #88	; 0x58
  408166:	f200 82de 	bhi.w	408726 <_vfiprintf_r+0x6ae>
  40816a:	e8df f011 	tbh	[pc, r1, lsl #1]
  40816e:	0221      	.short	0x0221
  408170:	02dc02dc 	.word	0x02dc02dc
  408174:	02dc0229 	.word	0x02dc0229
  408178:	02dc02dc 	.word	0x02dc02dc
  40817c:	02dc02dc 	.word	0x02dc02dc
  408180:	028902dc 	.word	0x028902dc
  408184:	02dc0295 	.word	0x02dc0295
  408188:	02bd00a2 	.word	0x02bd00a2
  40818c:	019f02dc 	.word	0x019f02dc
  408190:	01a401a4 	.word	0x01a401a4
  408194:	01a401a4 	.word	0x01a401a4
  408198:	01a401a4 	.word	0x01a401a4
  40819c:	01a401a4 	.word	0x01a401a4
  4081a0:	02dc01a4 	.word	0x02dc01a4
  4081a4:	02dc02dc 	.word	0x02dc02dc
  4081a8:	02dc02dc 	.word	0x02dc02dc
  4081ac:	02dc02dc 	.word	0x02dc02dc
  4081b0:	02dc02dc 	.word	0x02dc02dc
  4081b4:	01b202dc 	.word	0x01b202dc
  4081b8:	02dc02dc 	.word	0x02dc02dc
  4081bc:	02dc02dc 	.word	0x02dc02dc
  4081c0:	02dc02dc 	.word	0x02dc02dc
  4081c4:	02dc02dc 	.word	0x02dc02dc
  4081c8:	02dc02dc 	.word	0x02dc02dc
  4081cc:	02dc0197 	.word	0x02dc0197
  4081d0:	02dc02dc 	.word	0x02dc02dc
  4081d4:	02dc02dc 	.word	0x02dc02dc
  4081d8:	02dc019b 	.word	0x02dc019b
  4081dc:	025302dc 	.word	0x025302dc
  4081e0:	02dc02dc 	.word	0x02dc02dc
  4081e4:	02dc02dc 	.word	0x02dc02dc
  4081e8:	02dc02dc 	.word	0x02dc02dc
  4081ec:	02dc02dc 	.word	0x02dc02dc
  4081f0:	02dc02dc 	.word	0x02dc02dc
  4081f4:	021b025a 	.word	0x021b025a
  4081f8:	02dc02dc 	.word	0x02dc02dc
  4081fc:	026e02dc 	.word	0x026e02dc
  408200:	02dc021b 	.word	0x02dc021b
  408204:	027302dc 	.word	0x027302dc
  408208:	01f502dc 	.word	0x01f502dc
  40820c:	02090182 	.word	0x02090182
  408210:	02dc02d7 	.word	0x02dc02d7
  408214:	02dc029a 	.word	0x02dc029a
  408218:	02dc00a7 	.word	0x02dc00a7
  40821c:	022e02dc 	.word	0x022e02dc
  408220:	f10a 0a08 	add.w	sl, sl, #8
  408224:	9b03      	ldr	r3, [sp, #12]
  408226:	442b      	add	r3, r5
  408228:	9303      	str	r3, [sp, #12]
  40822a:	e786      	b.n	40813a <_vfiprintf_r+0xc2>
  40822c:	4659      	mov	r1, fp
  40822e:	9806      	ldr	r0, [sp, #24]
  408230:	f000 fdac 	bl	408d8c <__swsetup_r>
  408234:	bb18      	cbnz	r0, 40827e <_vfiprintf_r+0x206>
  408236:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40823a:	f001 031a 	and.w	r3, r1, #26
  40823e:	2b0a      	cmp	r3, #10
  408240:	f47f af4b 	bne.w	4080da <_vfiprintf_r+0x62>
  408244:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  408248:	2b00      	cmp	r3, #0
  40824a:	f6ff af46 	blt.w	4080da <_vfiprintf_r+0x62>
  40824e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408252:	07db      	lsls	r3, r3, #31
  408254:	d405      	bmi.n	408262 <_vfiprintf_r+0x1ea>
  408256:	058f      	lsls	r7, r1, #22
  408258:	d403      	bmi.n	408262 <_vfiprintf_r+0x1ea>
  40825a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40825e:	f002 fa91 	bl	40a784 <__retarget_lock_release_recursive>
  408262:	462b      	mov	r3, r5
  408264:	4642      	mov	r2, r8
  408266:	4659      	mov	r1, fp
  408268:	9806      	ldr	r0, [sp, #24]
  40826a:	f000 fd4d 	bl	408d08 <__sbprintf>
  40826e:	9003      	str	r0, [sp, #12]
  408270:	9803      	ldr	r0, [sp, #12]
  408272:	b02d      	add	sp, #180	; 0xb4
  408274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408278:	f001 feb4 	bl	409fe4 <__sinit>
  40827c:	e709      	b.n	408092 <_vfiprintf_r+0x1a>
  40827e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408282:	07d9      	lsls	r1, r3, #31
  408284:	d404      	bmi.n	408290 <_vfiprintf_r+0x218>
  408286:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40828a:	059a      	lsls	r2, r3, #22
  40828c:	f140 84aa 	bpl.w	408be4 <_vfiprintf_r+0xb6c>
  408290:	f04f 33ff 	mov.w	r3, #4294967295
  408294:	9303      	str	r3, [sp, #12]
  408296:	9803      	ldr	r0, [sp, #12]
  408298:	b02d      	add	sp, #180	; 0xb4
  40829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40829e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4082a2:	f002 fa6d 	bl	40a780 <__retarget_lock_acquire_recursive>
  4082a6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4082aa:	b281      	uxth	r1, r0
  4082ac:	e6fb      	b.n	4080a6 <_vfiprintf_r+0x2e>
  4082ae:	4276      	negs	r6, r6
  4082b0:	9207      	str	r2, [sp, #28]
  4082b2:	f043 0304 	orr.w	r3, r3, #4
  4082b6:	f898 2000 	ldrb.w	r2, [r8]
  4082ba:	e74f      	b.n	40815c <_vfiprintf_r+0xe4>
  4082bc:	9608      	str	r6, [sp, #32]
  4082be:	069e      	lsls	r6, r3, #26
  4082c0:	f100 8450 	bmi.w	408b64 <_vfiprintf_r+0xaec>
  4082c4:	9907      	ldr	r1, [sp, #28]
  4082c6:	06dd      	lsls	r5, r3, #27
  4082c8:	460a      	mov	r2, r1
  4082ca:	f100 83ef 	bmi.w	408aac <_vfiprintf_r+0xa34>
  4082ce:	0658      	lsls	r0, r3, #25
  4082d0:	f140 83ec 	bpl.w	408aac <_vfiprintf_r+0xa34>
  4082d4:	880e      	ldrh	r6, [r1, #0]
  4082d6:	3104      	adds	r1, #4
  4082d8:	2700      	movs	r7, #0
  4082da:	2201      	movs	r2, #1
  4082dc:	9107      	str	r1, [sp, #28]
  4082de:	f04f 0100 	mov.w	r1, #0
  4082e2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4082e6:	2500      	movs	r5, #0
  4082e8:	1c61      	adds	r1, r4, #1
  4082ea:	f000 8116 	beq.w	40851a <_vfiprintf_r+0x4a2>
  4082ee:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4082f2:	9102      	str	r1, [sp, #8]
  4082f4:	ea56 0107 	orrs.w	r1, r6, r7
  4082f8:	f040 8114 	bne.w	408524 <_vfiprintf_r+0x4ac>
  4082fc:	2c00      	cmp	r4, #0
  4082fe:	f040 835c 	bne.w	4089ba <_vfiprintf_r+0x942>
  408302:	2a00      	cmp	r2, #0
  408304:	f040 83b7 	bne.w	408a76 <_vfiprintf_r+0x9fe>
  408308:	f013 0301 	ands.w	r3, r3, #1
  40830c:	9305      	str	r3, [sp, #20]
  40830e:	f000 8457 	beq.w	408bc0 <_vfiprintf_r+0xb48>
  408312:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  408316:	2330      	movs	r3, #48	; 0x30
  408318:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40831c:	9b05      	ldr	r3, [sp, #20]
  40831e:	42a3      	cmp	r3, r4
  408320:	bfb8      	it	lt
  408322:	4623      	movlt	r3, r4
  408324:	9301      	str	r3, [sp, #4]
  408326:	b10d      	cbz	r5, 40832c <_vfiprintf_r+0x2b4>
  408328:	3301      	adds	r3, #1
  40832a:	9301      	str	r3, [sp, #4]
  40832c:	9b02      	ldr	r3, [sp, #8]
  40832e:	f013 0302 	ands.w	r3, r3, #2
  408332:	9309      	str	r3, [sp, #36]	; 0x24
  408334:	d002      	beq.n	40833c <_vfiprintf_r+0x2c4>
  408336:	9b01      	ldr	r3, [sp, #4]
  408338:	3302      	adds	r3, #2
  40833a:	9301      	str	r3, [sp, #4]
  40833c:	9b02      	ldr	r3, [sp, #8]
  40833e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  408342:	930a      	str	r3, [sp, #40]	; 0x28
  408344:	f040 8217 	bne.w	408776 <_vfiprintf_r+0x6fe>
  408348:	9b08      	ldr	r3, [sp, #32]
  40834a:	9a01      	ldr	r2, [sp, #4]
  40834c:	1a9d      	subs	r5, r3, r2
  40834e:	2d00      	cmp	r5, #0
  408350:	f340 8211 	ble.w	408776 <_vfiprintf_r+0x6fe>
  408354:	2d10      	cmp	r5, #16
  408356:	f340 8490 	ble.w	408c7a <_vfiprintf_r+0xc02>
  40835a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40835c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40835e:	4ec4      	ldr	r6, [pc, #784]	; (408670 <_vfiprintf_r+0x5f8>)
  408360:	46d6      	mov	lr, sl
  408362:	2710      	movs	r7, #16
  408364:	46a2      	mov	sl, r4
  408366:	4619      	mov	r1, r3
  408368:	9c06      	ldr	r4, [sp, #24]
  40836a:	e007      	b.n	40837c <_vfiprintf_r+0x304>
  40836c:	f101 0c02 	add.w	ip, r1, #2
  408370:	f10e 0e08 	add.w	lr, lr, #8
  408374:	4601      	mov	r1, r0
  408376:	3d10      	subs	r5, #16
  408378:	2d10      	cmp	r5, #16
  40837a:	dd11      	ble.n	4083a0 <_vfiprintf_r+0x328>
  40837c:	1c48      	adds	r0, r1, #1
  40837e:	3210      	adds	r2, #16
  408380:	2807      	cmp	r0, #7
  408382:	9211      	str	r2, [sp, #68]	; 0x44
  408384:	e88e 00c0 	stmia.w	lr, {r6, r7}
  408388:	9010      	str	r0, [sp, #64]	; 0x40
  40838a:	ddef      	ble.n	40836c <_vfiprintf_r+0x2f4>
  40838c:	2a00      	cmp	r2, #0
  40838e:	f040 81e4 	bne.w	40875a <_vfiprintf_r+0x6e2>
  408392:	3d10      	subs	r5, #16
  408394:	2d10      	cmp	r5, #16
  408396:	4611      	mov	r1, r2
  408398:	f04f 0c01 	mov.w	ip, #1
  40839c:	46ce      	mov	lr, r9
  40839e:	dced      	bgt.n	40837c <_vfiprintf_r+0x304>
  4083a0:	4654      	mov	r4, sl
  4083a2:	4661      	mov	r1, ip
  4083a4:	46f2      	mov	sl, lr
  4083a6:	442a      	add	r2, r5
  4083a8:	2907      	cmp	r1, #7
  4083aa:	9211      	str	r2, [sp, #68]	; 0x44
  4083ac:	f8ca 6000 	str.w	r6, [sl]
  4083b0:	f8ca 5004 	str.w	r5, [sl, #4]
  4083b4:	9110      	str	r1, [sp, #64]	; 0x40
  4083b6:	f300 82ec 	bgt.w	408992 <_vfiprintf_r+0x91a>
  4083ba:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4083be:	f10a 0a08 	add.w	sl, sl, #8
  4083c2:	1c48      	adds	r0, r1, #1
  4083c4:	2d00      	cmp	r5, #0
  4083c6:	f040 81de 	bne.w	408786 <_vfiprintf_r+0x70e>
  4083ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4083cc:	2b00      	cmp	r3, #0
  4083ce:	f000 81f8 	beq.w	4087c2 <_vfiprintf_r+0x74a>
  4083d2:	3202      	adds	r2, #2
  4083d4:	a90e      	add	r1, sp, #56	; 0x38
  4083d6:	2302      	movs	r3, #2
  4083d8:	2807      	cmp	r0, #7
  4083da:	9211      	str	r2, [sp, #68]	; 0x44
  4083dc:	9010      	str	r0, [sp, #64]	; 0x40
  4083de:	e88a 000a 	stmia.w	sl, {r1, r3}
  4083e2:	f340 81ea 	ble.w	4087ba <_vfiprintf_r+0x742>
  4083e6:	2a00      	cmp	r2, #0
  4083e8:	f040 838c 	bne.w	408b04 <_vfiprintf_r+0xa8c>
  4083ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4083ee:	2b80      	cmp	r3, #128	; 0x80
  4083f0:	f04f 0001 	mov.w	r0, #1
  4083f4:	4611      	mov	r1, r2
  4083f6:	46ca      	mov	sl, r9
  4083f8:	f040 81e7 	bne.w	4087ca <_vfiprintf_r+0x752>
  4083fc:	9b08      	ldr	r3, [sp, #32]
  4083fe:	9d01      	ldr	r5, [sp, #4]
  408400:	1b5e      	subs	r6, r3, r5
  408402:	2e00      	cmp	r6, #0
  408404:	f340 81e1 	ble.w	4087ca <_vfiprintf_r+0x752>
  408408:	2e10      	cmp	r6, #16
  40840a:	4d9a      	ldr	r5, [pc, #616]	; (408674 <_vfiprintf_r+0x5fc>)
  40840c:	f340 8450 	ble.w	408cb0 <_vfiprintf_r+0xc38>
  408410:	46d4      	mov	ip, sl
  408412:	2710      	movs	r7, #16
  408414:	46a2      	mov	sl, r4
  408416:	9c06      	ldr	r4, [sp, #24]
  408418:	e007      	b.n	40842a <_vfiprintf_r+0x3b2>
  40841a:	f101 0e02 	add.w	lr, r1, #2
  40841e:	f10c 0c08 	add.w	ip, ip, #8
  408422:	4601      	mov	r1, r0
  408424:	3e10      	subs	r6, #16
  408426:	2e10      	cmp	r6, #16
  408428:	dd11      	ble.n	40844e <_vfiprintf_r+0x3d6>
  40842a:	1c48      	adds	r0, r1, #1
  40842c:	3210      	adds	r2, #16
  40842e:	2807      	cmp	r0, #7
  408430:	9211      	str	r2, [sp, #68]	; 0x44
  408432:	e88c 00a0 	stmia.w	ip, {r5, r7}
  408436:	9010      	str	r0, [sp, #64]	; 0x40
  408438:	ddef      	ble.n	40841a <_vfiprintf_r+0x3a2>
  40843a:	2a00      	cmp	r2, #0
  40843c:	f040 829d 	bne.w	40897a <_vfiprintf_r+0x902>
  408440:	3e10      	subs	r6, #16
  408442:	2e10      	cmp	r6, #16
  408444:	f04f 0e01 	mov.w	lr, #1
  408448:	4611      	mov	r1, r2
  40844a:	46cc      	mov	ip, r9
  40844c:	dced      	bgt.n	40842a <_vfiprintf_r+0x3b2>
  40844e:	4654      	mov	r4, sl
  408450:	46e2      	mov	sl, ip
  408452:	4432      	add	r2, r6
  408454:	f1be 0f07 	cmp.w	lr, #7
  408458:	9211      	str	r2, [sp, #68]	; 0x44
  40845a:	e88a 0060 	stmia.w	sl, {r5, r6}
  40845e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  408462:	f300 8369 	bgt.w	408b38 <_vfiprintf_r+0xac0>
  408466:	f10a 0a08 	add.w	sl, sl, #8
  40846a:	f10e 0001 	add.w	r0, lr, #1
  40846e:	4671      	mov	r1, lr
  408470:	e1ab      	b.n	4087ca <_vfiprintf_r+0x752>
  408472:	9608      	str	r6, [sp, #32]
  408474:	f013 0220 	ands.w	r2, r3, #32
  408478:	f040 838c 	bne.w	408b94 <_vfiprintf_r+0xb1c>
  40847c:	f013 0110 	ands.w	r1, r3, #16
  408480:	f040 831a 	bne.w	408ab8 <_vfiprintf_r+0xa40>
  408484:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  408488:	f000 8316 	beq.w	408ab8 <_vfiprintf_r+0xa40>
  40848c:	9807      	ldr	r0, [sp, #28]
  40848e:	460a      	mov	r2, r1
  408490:	4601      	mov	r1, r0
  408492:	3104      	adds	r1, #4
  408494:	8806      	ldrh	r6, [r0, #0]
  408496:	9107      	str	r1, [sp, #28]
  408498:	2700      	movs	r7, #0
  40849a:	e720      	b.n	4082de <_vfiprintf_r+0x266>
  40849c:	9608      	str	r6, [sp, #32]
  40849e:	f043 0310 	orr.w	r3, r3, #16
  4084a2:	e7e7      	b.n	408474 <_vfiprintf_r+0x3fc>
  4084a4:	9608      	str	r6, [sp, #32]
  4084a6:	f043 0310 	orr.w	r3, r3, #16
  4084aa:	e708      	b.n	4082be <_vfiprintf_r+0x246>
  4084ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4084b0:	f898 2000 	ldrb.w	r2, [r8]
  4084b4:	e652      	b.n	40815c <_vfiprintf_r+0xe4>
  4084b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4084ba:	2600      	movs	r6, #0
  4084bc:	f818 2b01 	ldrb.w	r2, [r8], #1
  4084c0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4084c4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4084c8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4084cc:	2909      	cmp	r1, #9
  4084ce:	d9f5      	bls.n	4084bc <_vfiprintf_r+0x444>
  4084d0:	e646      	b.n	408160 <_vfiprintf_r+0xe8>
  4084d2:	9608      	str	r6, [sp, #32]
  4084d4:	2800      	cmp	r0, #0
  4084d6:	f040 8408 	bne.w	408cea <_vfiprintf_r+0xc72>
  4084da:	f043 0310 	orr.w	r3, r3, #16
  4084de:	069e      	lsls	r6, r3, #26
  4084e0:	f100 834c 	bmi.w	408b7c <_vfiprintf_r+0xb04>
  4084e4:	06dd      	lsls	r5, r3, #27
  4084e6:	f100 82f3 	bmi.w	408ad0 <_vfiprintf_r+0xa58>
  4084ea:	0658      	lsls	r0, r3, #25
  4084ec:	f140 82f0 	bpl.w	408ad0 <_vfiprintf_r+0xa58>
  4084f0:	9d07      	ldr	r5, [sp, #28]
  4084f2:	f9b5 6000 	ldrsh.w	r6, [r5]
  4084f6:	462a      	mov	r2, r5
  4084f8:	17f7      	asrs	r7, r6, #31
  4084fa:	3204      	adds	r2, #4
  4084fc:	4630      	mov	r0, r6
  4084fe:	4639      	mov	r1, r7
  408500:	9207      	str	r2, [sp, #28]
  408502:	2800      	cmp	r0, #0
  408504:	f171 0200 	sbcs.w	r2, r1, #0
  408508:	f2c0 835d 	blt.w	408bc6 <_vfiprintf_r+0xb4e>
  40850c:	1c61      	adds	r1, r4, #1
  40850e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408512:	f04f 0201 	mov.w	r2, #1
  408516:	f47f aeea 	bne.w	4082ee <_vfiprintf_r+0x276>
  40851a:	ea56 0107 	orrs.w	r1, r6, r7
  40851e:	f000 824d 	beq.w	4089bc <_vfiprintf_r+0x944>
  408522:	9302      	str	r3, [sp, #8]
  408524:	2a01      	cmp	r2, #1
  408526:	f000 828c 	beq.w	408a42 <_vfiprintf_r+0x9ca>
  40852a:	2a02      	cmp	r2, #2
  40852c:	f040 825c 	bne.w	4089e8 <_vfiprintf_r+0x970>
  408530:	980b      	ldr	r0, [sp, #44]	; 0x2c
  408532:	46cb      	mov	fp, r9
  408534:	0933      	lsrs	r3, r6, #4
  408536:	f006 010f 	and.w	r1, r6, #15
  40853a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40853e:	093a      	lsrs	r2, r7, #4
  408540:	461e      	mov	r6, r3
  408542:	4617      	mov	r7, r2
  408544:	5c43      	ldrb	r3, [r0, r1]
  408546:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40854a:	ea56 0307 	orrs.w	r3, r6, r7
  40854e:	d1f1      	bne.n	408534 <_vfiprintf_r+0x4bc>
  408550:	eba9 030b 	sub.w	r3, r9, fp
  408554:	9305      	str	r3, [sp, #20]
  408556:	e6e1      	b.n	40831c <_vfiprintf_r+0x2a4>
  408558:	2800      	cmp	r0, #0
  40855a:	f040 83c0 	bne.w	408cde <_vfiprintf_r+0xc66>
  40855e:	0699      	lsls	r1, r3, #26
  408560:	f100 8367 	bmi.w	408c32 <_vfiprintf_r+0xbba>
  408564:	06da      	lsls	r2, r3, #27
  408566:	f100 80f1 	bmi.w	40874c <_vfiprintf_r+0x6d4>
  40856a:	065b      	lsls	r3, r3, #25
  40856c:	f140 80ee 	bpl.w	40874c <_vfiprintf_r+0x6d4>
  408570:	9a07      	ldr	r2, [sp, #28]
  408572:	6813      	ldr	r3, [r2, #0]
  408574:	3204      	adds	r2, #4
  408576:	9207      	str	r2, [sp, #28]
  408578:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40857c:	801a      	strh	r2, [r3, #0]
  40857e:	e5b8      	b.n	4080f2 <_vfiprintf_r+0x7a>
  408580:	9807      	ldr	r0, [sp, #28]
  408582:	4a3d      	ldr	r2, [pc, #244]	; (408678 <_vfiprintf_r+0x600>)
  408584:	9608      	str	r6, [sp, #32]
  408586:	920b      	str	r2, [sp, #44]	; 0x2c
  408588:	6806      	ldr	r6, [r0, #0]
  40858a:	2278      	movs	r2, #120	; 0x78
  40858c:	2130      	movs	r1, #48	; 0x30
  40858e:	3004      	adds	r0, #4
  408590:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  408594:	f043 0302 	orr.w	r3, r3, #2
  408598:	9007      	str	r0, [sp, #28]
  40859a:	2700      	movs	r7, #0
  40859c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4085a0:	2202      	movs	r2, #2
  4085a2:	e69c      	b.n	4082de <_vfiprintf_r+0x266>
  4085a4:	9608      	str	r6, [sp, #32]
  4085a6:	2800      	cmp	r0, #0
  4085a8:	d099      	beq.n	4084de <_vfiprintf_r+0x466>
  4085aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4085ae:	e796      	b.n	4084de <_vfiprintf_r+0x466>
  4085b0:	f898 2000 	ldrb.w	r2, [r8]
  4085b4:	2d00      	cmp	r5, #0
  4085b6:	f47f add1 	bne.w	40815c <_vfiprintf_r+0xe4>
  4085ba:	2001      	movs	r0, #1
  4085bc:	2520      	movs	r5, #32
  4085be:	e5cd      	b.n	40815c <_vfiprintf_r+0xe4>
  4085c0:	f043 0301 	orr.w	r3, r3, #1
  4085c4:	f898 2000 	ldrb.w	r2, [r8]
  4085c8:	e5c8      	b.n	40815c <_vfiprintf_r+0xe4>
  4085ca:	9608      	str	r6, [sp, #32]
  4085cc:	2800      	cmp	r0, #0
  4085ce:	f040 8393 	bne.w	408cf8 <_vfiprintf_r+0xc80>
  4085d2:	4929      	ldr	r1, [pc, #164]	; (408678 <_vfiprintf_r+0x600>)
  4085d4:	910b      	str	r1, [sp, #44]	; 0x2c
  4085d6:	069f      	lsls	r7, r3, #26
  4085d8:	f100 82e8 	bmi.w	408bac <_vfiprintf_r+0xb34>
  4085dc:	9807      	ldr	r0, [sp, #28]
  4085de:	06de      	lsls	r6, r3, #27
  4085e0:	4601      	mov	r1, r0
  4085e2:	f100 8270 	bmi.w	408ac6 <_vfiprintf_r+0xa4e>
  4085e6:	065d      	lsls	r5, r3, #25
  4085e8:	f140 826d 	bpl.w	408ac6 <_vfiprintf_r+0xa4e>
  4085ec:	3104      	adds	r1, #4
  4085ee:	8806      	ldrh	r6, [r0, #0]
  4085f0:	9107      	str	r1, [sp, #28]
  4085f2:	2700      	movs	r7, #0
  4085f4:	07d8      	lsls	r0, r3, #31
  4085f6:	f140 8222 	bpl.w	408a3e <_vfiprintf_r+0x9c6>
  4085fa:	ea56 0107 	orrs.w	r1, r6, r7
  4085fe:	f000 821e 	beq.w	408a3e <_vfiprintf_r+0x9c6>
  408602:	2130      	movs	r1, #48	; 0x30
  408604:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  408608:	f043 0302 	orr.w	r3, r3, #2
  40860c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  408610:	2202      	movs	r2, #2
  408612:	e664      	b.n	4082de <_vfiprintf_r+0x266>
  408614:	9608      	str	r6, [sp, #32]
  408616:	2800      	cmp	r0, #0
  408618:	f040 836b 	bne.w	408cf2 <_vfiprintf_r+0xc7a>
  40861c:	4917      	ldr	r1, [pc, #92]	; (40867c <_vfiprintf_r+0x604>)
  40861e:	910b      	str	r1, [sp, #44]	; 0x2c
  408620:	e7d9      	b.n	4085d6 <_vfiprintf_r+0x55e>
  408622:	9907      	ldr	r1, [sp, #28]
  408624:	9608      	str	r6, [sp, #32]
  408626:	680a      	ldr	r2, [r1, #0]
  408628:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40862c:	f04f 0000 	mov.w	r0, #0
  408630:	460a      	mov	r2, r1
  408632:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  408636:	3204      	adds	r2, #4
  408638:	2001      	movs	r0, #1
  40863a:	9001      	str	r0, [sp, #4]
  40863c:	9207      	str	r2, [sp, #28]
  40863e:	9005      	str	r0, [sp, #20]
  408640:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  408644:	9302      	str	r3, [sp, #8]
  408646:	2400      	movs	r4, #0
  408648:	e670      	b.n	40832c <_vfiprintf_r+0x2b4>
  40864a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40864e:	f898 2000 	ldrb.w	r2, [r8]
  408652:	e583      	b.n	40815c <_vfiprintf_r+0xe4>
  408654:	f898 2000 	ldrb.w	r2, [r8]
  408658:	2a6c      	cmp	r2, #108	; 0x6c
  40865a:	bf03      	ittte	eq
  40865c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  408660:	f043 0320 	orreq.w	r3, r3, #32
  408664:	f108 0801 	addeq.w	r8, r8, #1
  408668:	f043 0310 	orrne.w	r3, r3, #16
  40866c:	e576      	b.n	40815c <_vfiprintf_r+0xe4>
  40866e:	bf00      	nop
  408670:	0040da94 	.word	0x0040da94
  408674:	0040daa4 	.word	0x0040daa4
  408678:	0040da54 	.word	0x0040da54
  40867c:	0040da40 	.word	0x0040da40
  408680:	9907      	ldr	r1, [sp, #28]
  408682:	680e      	ldr	r6, [r1, #0]
  408684:	460a      	mov	r2, r1
  408686:	2e00      	cmp	r6, #0
  408688:	f102 0204 	add.w	r2, r2, #4
  40868c:	f6ff ae0f 	blt.w	4082ae <_vfiprintf_r+0x236>
  408690:	9207      	str	r2, [sp, #28]
  408692:	f898 2000 	ldrb.w	r2, [r8]
  408696:	e561      	b.n	40815c <_vfiprintf_r+0xe4>
  408698:	f898 2000 	ldrb.w	r2, [r8]
  40869c:	2001      	movs	r0, #1
  40869e:	252b      	movs	r5, #43	; 0x2b
  4086a0:	e55c      	b.n	40815c <_vfiprintf_r+0xe4>
  4086a2:	9907      	ldr	r1, [sp, #28]
  4086a4:	9608      	str	r6, [sp, #32]
  4086a6:	f8d1 b000 	ldr.w	fp, [r1]
  4086aa:	f04f 0200 	mov.w	r2, #0
  4086ae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4086b2:	1d0e      	adds	r6, r1, #4
  4086b4:	f1bb 0f00 	cmp.w	fp, #0
  4086b8:	f000 82e5 	beq.w	408c86 <_vfiprintf_r+0xc0e>
  4086bc:	1c67      	adds	r7, r4, #1
  4086be:	f000 82c4 	beq.w	408c4a <_vfiprintf_r+0xbd2>
  4086c2:	4622      	mov	r2, r4
  4086c4:	2100      	movs	r1, #0
  4086c6:	4658      	mov	r0, fp
  4086c8:	9301      	str	r3, [sp, #4]
  4086ca:	f002 fba9 	bl	40ae20 <memchr>
  4086ce:	9b01      	ldr	r3, [sp, #4]
  4086d0:	2800      	cmp	r0, #0
  4086d2:	f000 82e5 	beq.w	408ca0 <_vfiprintf_r+0xc28>
  4086d6:	eba0 020b 	sub.w	r2, r0, fp
  4086da:	9205      	str	r2, [sp, #20]
  4086dc:	9607      	str	r6, [sp, #28]
  4086de:	9302      	str	r3, [sp, #8]
  4086e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4086e4:	2400      	movs	r4, #0
  4086e6:	e619      	b.n	40831c <_vfiprintf_r+0x2a4>
  4086e8:	f898 2000 	ldrb.w	r2, [r8]
  4086ec:	2a2a      	cmp	r2, #42	; 0x2a
  4086ee:	f108 0701 	add.w	r7, r8, #1
  4086f2:	f000 82e9 	beq.w	408cc8 <_vfiprintf_r+0xc50>
  4086f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4086fa:	2909      	cmp	r1, #9
  4086fc:	46b8      	mov	r8, r7
  4086fe:	f04f 0400 	mov.w	r4, #0
  408702:	f63f ad2d 	bhi.w	408160 <_vfiprintf_r+0xe8>
  408706:	f818 2b01 	ldrb.w	r2, [r8], #1
  40870a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40870e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  408712:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408716:	2909      	cmp	r1, #9
  408718:	d9f5      	bls.n	408706 <_vfiprintf_r+0x68e>
  40871a:	e521      	b.n	408160 <_vfiprintf_r+0xe8>
  40871c:	f043 0320 	orr.w	r3, r3, #32
  408720:	f898 2000 	ldrb.w	r2, [r8]
  408724:	e51a      	b.n	40815c <_vfiprintf_r+0xe4>
  408726:	9608      	str	r6, [sp, #32]
  408728:	2800      	cmp	r0, #0
  40872a:	f040 82db 	bne.w	408ce4 <_vfiprintf_r+0xc6c>
  40872e:	2a00      	cmp	r2, #0
  408730:	f000 80e7 	beq.w	408902 <_vfiprintf_r+0x88a>
  408734:	2101      	movs	r1, #1
  408736:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40873a:	f04f 0200 	mov.w	r2, #0
  40873e:	9101      	str	r1, [sp, #4]
  408740:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  408744:	9105      	str	r1, [sp, #20]
  408746:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40874a:	e77b      	b.n	408644 <_vfiprintf_r+0x5cc>
  40874c:	9a07      	ldr	r2, [sp, #28]
  40874e:	6813      	ldr	r3, [r2, #0]
  408750:	3204      	adds	r2, #4
  408752:	9207      	str	r2, [sp, #28]
  408754:	9a03      	ldr	r2, [sp, #12]
  408756:	601a      	str	r2, [r3, #0]
  408758:	e4cb      	b.n	4080f2 <_vfiprintf_r+0x7a>
  40875a:	aa0f      	add	r2, sp, #60	; 0x3c
  40875c:	9904      	ldr	r1, [sp, #16]
  40875e:	4620      	mov	r0, r4
  408760:	f7ff fc4a 	bl	407ff8 <__sprint_r.part.0>
  408764:	2800      	cmp	r0, #0
  408766:	f040 8139 	bne.w	4089dc <_vfiprintf_r+0x964>
  40876a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40876c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40876e:	f101 0c01 	add.w	ip, r1, #1
  408772:	46ce      	mov	lr, r9
  408774:	e5ff      	b.n	408376 <_vfiprintf_r+0x2fe>
  408776:	9910      	ldr	r1, [sp, #64]	; 0x40
  408778:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40877a:	1c48      	adds	r0, r1, #1
  40877c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408780:	2d00      	cmp	r5, #0
  408782:	f43f ae22 	beq.w	4083ca <_vfiprintf_r+0x352>
  408786:	3201      	adds	r2, #1
  408788:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40878c:	2101      	movs	r1, #1
  40878e:	2807      	cmp	r0, #7
  408790:	9211      	str	r2, [sp, #68]	; 0x44
  408792:	9010      	str	r0, [sp, #64]	; 0x40
  408794:	f8ca 5000 	str.w	r5, [sl]
  408798:	f8ca 1004 	str.w	r1, [sl, #4]
  40879c:	f340 8108 	ble.w	4089b0 <_vfiprintf_r+0x938>
  4087a0:	2a00      	cmp	r2, #0
  4087a2:	f040 81bc 	bne.w	408b1e <_vfiprintf_r+0xaa6>
  4087a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4087a8:	2b00      	cmp	r3, #0
  4087aa:	f43f ae1f 	beq.w	4083ec <_vfiprintf_r+0x374>
  4087ae:	ab0e      	add	r3, sp, #56	; 0x38
  4087b0:	2202      	movs	r2, #2
  4087b2:	4608      	mov	r0, r1
  4087b4:	931c      	str	r3, [sp, #112]	; 0x70
  4087b6:	921d      	str	r2, [sp, #116]	; 0x74
  4087b8:	46ca      	mov	sl, r9
  4087ba:	4601      	mov	r1, r0
  4087bc:	f10a 0a08 	add.w	sl, sl, #8
  4087c0:	3001      	adds	r0, #1
  4087c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4087c4:	2b80      	cmp	r3, #128	; 0x80
  4087c6:	f43f ae19 	beq.w	4083fc <_vfiprintf_r+0x384>
  4087ca:	9b05      	ldr	r3, [sp, #20]
  4087cc:	1ae4      	subs	r4, r4, r3
  4087ce:	2c00      	cmp	r4, #0
  4087d0:	dd2e      	ble.n	408830 <_vfiprintf_r+0x7b8>
  4087d2:	2c10      	cmp	r4, #16
  4087d4:	4db3      	ldr	r5, [pc, #716]	; (408aa4 <_vfiprintf_r+0xa2c>)
  4087d6:	dd1e      	ble.n	408816 <_vfiprintf_r+0x79e>
  4087d8:	46d6      	mov	lr, sl
  4087da:	2610      	movs	r6, #16
  4087dc:	9f06      	ldr	r7, [sp, #24]
  4087de:	f8dd a010 	ldr.w	sl, [sp, #16]
  4087e2:	e006      	b.n	4087f2 <_vfiprintf_r+0x77a>
  4087e4:	1c88      	adds	r0, r1, #2
  4087e6:	f10e 0e08 	add.w	lr, lr, #8
  4087ea:	4619      	mov	r1, r3
  4087ec:	3c10      	subs	r4, #16
  4087ee:	2c10      	cmp	r4, #16
  4087f0:	dd10      	ble.n	408814 <_vfiprintf_r+0x79c>
  4087f2:	1c4b      	adds	r3, r1, #1
  4087f4:	3210      	adds	r2, #16
  4087f6:	2b07      	cmp	r3, #7
  4087f8:	9211      	str	r2, [sp, #68]	; 0x44
  4087fa:	e88e 0060 	stmia.w	lr, {r5, r6}
  4087fe:	9310      	str	r3, [sp, #64]	; 0x40
  408800:	ddf0      	ble.n	4087e4 <_vfiprintf_r+0x76c>
  408802:	2a00      	cmp	r2, #0
  408804:	d165      	bne.n	4088d2 <_vfiprintf_r+0x85a>
  408806:	3c10      	subs	r4, #16
  408808:	2c10      	cmp	r4, #16
  40880a:	f04f 0001 	mov.w	r0, #1
  40880e:	4611      	mov	r1, r2
  408810:	46ce      	mov	lr, r9
  408812:	dcee      	bgt.n	4087f2 <_vfiprintf_r+0x77a>
  408814:	46f2      	mov	sl, lr
  408816:	4422      	add	r2, r4
  408818:	2807      	cmp	r0, #7
  40881a:	9211      	str	r2, [sp, #68]	; 0x44
  40881c:	f8ca 5000 	str.w	r5, [sl]
  408820:	f8ca 4004 	str.w	r4, [sl, #4]
  408824:	9010      	str	r0, [sp, #64]	; 0x40
  408826:	f300 8085 	bgt.w	408934 <_vfiprintf_r+0x8bc>
  40882a:	f10a 0a08 	add.w	sl, sl, #8
  40882e:	3001      	adds	r0, #1
  408830:	9905      	ldr	r1, [sp, #20]
  408832:	f8ca b000 	str.w	fp, [sl]
  408836:	440a      	add	r2, r1
  408838:	2807      	cmp	r0, #7
  40883a:	9211      	str	r2, [sp, #68]	; 0x44
  40883c:	f8ca 1004 	str.w	r1, [sl, #4]
  408840:	9010      	str	r0, [sp, #64]	; 0x40
  408842:	f340 8082 	ble.w	40894a <_vfiprintf_r+0x8d2>
  408846:	2a00      	cmp	r2, #0
  408848:	f040 8118 	bne.w	408a7c <_vfiprintf_r+0xa04>
  40884c:	9b02      	ldr	r3, [sp, #8]
  40884e:	9210      	str	r2, [sp, #64]	; 0x40
  408850:	0758      	lsls	r0, r3, #29
  408852:	d535      	bpl.n	4088c0 <_vfiprintf_r+0x848>
  408854:	9b08      	ldr	r3, [sp, #32]
  408856:	9901      	ldr	r1, [sp, #4]
  408858:	1a5c      	subs	r4, r3, r1
  40885a:	2c00      	cmp	r4, #0
  40885c:	f340 80e7 	ble.w	408a2e <_vfiprintf_r+0x9b6>
  408860:	46ca      	mov	sl, r9
  408862:	2c10      	cmp	r4, #16
  408864:	f340 8218 	ble.w	408c98 <_vfiprintf_r+0xc20>
  408868:	9910      	ldr	r1, [sp, #64]	; 0x40
  40886a:	4e8f      	ldr	r6, [pc, #572]	; (408aa8 <_vfiprintf_r+0xa30>)
  40886c:	9f06      	ldr	r7, [sp, #24]
  40886e:	f8dd b010 	ldr.w	fp, [sp, #16]
  408872:	2510      	movs	r5, #16
  408874:	e006      	b.n	408884 <_vfiprintf_r+0x80c>
  408876:	1c88      	adds	r0, r1, #2
  408878:	f10a 0a08 	add.w	sl, sl, #8
  40887c:	4619      	mov	r1, r3
  40887e:	3c10      	subs	r4, #16
  408880:	2c10      	cmp	r4, #16
  408882:	dd11      	ble.n	4088a8 <_vfiprintf_r+0x830>
  408884:	1c4b      	adds	r3, r1, #1
  408886:	3210      	adds	r2, #16
  408888:	2b07      	cmp	r3, #7
  40888a:	9211      	str	r2, [sp, #68]	; 0x44
  40888c:	f8ca 6000 	str.w	r6, [sl]
  408890:	f8ca 5004 	str.w	r5, [sl, #4]
  408894:	9310      	str	r3, [sp, #64]	; 0x40
  408896:	ddee      	ble.n	408876 <_vfiprintf_r+0x7fe>
  408898:	bb42      	cbnz	r2, 4088ec <_vfiprintf_r+0x874>
  40889a:	3c10      	subs	r4, #16
  40889c:	2c10      	cmp	r4, #16
  40889e:	f04f 0001 	mov.w	r0, #1
  4088a2:	4611      	mov	r1, r2
  4088a4:	46ca      	mov	sl, r9
  4088a6:	dced      	bgt.n	408884 <_vfiprintf_r+0x80c>
  4088a8:	4422      	add	r2, r4
  4088aa:	2807      	cmp	r0, #7
  4088ac:	9211      	str	r2, [sp, #68]	; 0x44
  4088ae:	f8ca 6000 	str.w	r6, [sl]
  4088b2:	f8ca 4004 	str.w	r4, [sl, #4]
  4088b6:	9010      	str	r0, [sp, #64]	; 0x40
  4088b8:	dd51      	ble.n	40895e <_vfiprintf_r+0x8e6>
  4088ba:	2a00      	cmp	r2, #0
  4088bc:	f040 819b 	bne.w	408bf6 <_vfiprintf_r+0xb7e>
  4088c0:	9b03      	ldr	r3, [sp, #12]
  4088c2:	9a08      	ldr	r2, [sp, #32]
  4088c4:	9901      	ldr	r1, [sp, #4]
  4088c6:	428a      	cmp	r2, r1
  4088c8:	bfac      	ite	ge
  4088ca:	189b      	addge	r3, r3, r2
  4088cc:	185b      	addlt	r3, r3, r1
  4088ce:	9303      	str	r3, [sp, #12]
  4088d0:	e04e      	b.n	408970 <_vfiprintf_r+0x8f8>
  4088d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4088d4:	4651      	mov	r1, sl
  4088d6:	4638      	mov	r0, r7
  4088d8:	f7ff fb8e 	bl	407ff8 <__sprint_r.part.0>
  4088dc:	2800      	cmp	r0, #0
  4088de:	f040 813f 	bne.w	408b60 <_vfiprintf_r+0xae8>
  4088e2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4088e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4088e6:	1c48      	adds	r0, r1, #1
  4088e8:	46ce      	mov	lr, r9
  4088ea:	e77f      	b.n	4087ec <_vfiprintf_r+0x774>
  4088ec:	aa0f      	add	r2, sp, #60	; 0x3c
  4088ee:	4659      	mov	r1, fp
  4088f0:	4638      	mov	r0, r7
  4088f2:	f7ff fb81 	bl	407ff8 <__sprint_r.part.0>
  4088f6:	b960      	cbnz	r0, 408912 <_vfiprintf_r+0x89a>
  4088f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4088fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4088fc:	1c48      	adds	r0, r1, #1
  4088fe:	46ca      	mov	sl, r9
  408900:	e7bd      	b.n	40887e <_vfiprintf_r+0x806>
  408902:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408904:	f8dd b010 	ldr.w	fp, [sp, #16]
  408908:	2b00      	cmp	r3, #0
  40890a:	f040 81d4 	bne.w	408cb6 <_vfiprintf_r+0xc3e>
  40890e:	2300      	movs	r3, #0
  408910:	9310      	str	r3, [sp, #64]	; 0x40
  408912:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408916:	f013 0f01 	tst.w	r3, #1
  40891a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40891e:	d102      	bne.n	408926 <_vfiprintf_r+0x8ae>
  408920:	059a      	lsls	r2, r3, #22
  408922:	f140 80de 	bpl.w	408ae2 <_vfiprintf_r+0xa6a>
  408926:	065b      	lsls	r3, r3, #25
  408928:	f53f acb2 	bmi.w	408290 <_vfiprintf_r+0x218>
  40892c:	9803      	ldr	r0, [sp, #12]
  40892e:	b02d      	add	sp, #180	; 0xb4
  408930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408934:	2a00      	cmp	r2, #0
  408936:	f040 8106 	bne.w	408b46 <_vfiprintf_r+0xace>
  40893a:	9a05      	ldr	r2, [sp, #20]
  40893c:	921d      	str	r2, [sp, #116]	; 0x74
  40893e:	2301      	movs	r3, #1
  408940:	9211      	str	r2, [sp, #68]	; 0x44
  408942:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  408946:	9310      	str	r3, [sp, #64]	; 0x40
  408948:	46ca      	mov	sl, r9
  40894a:	f10a 0a08 	add.w	sl, sl, #8
  40894e:	9b02      	ldr	r3, [sp, #8]
  408950:	0759      	lsls	r1, r3, #29
  408952:	d504      	bpl.n	40895e <_vfiprintf_r+0x8e6>
  408954:	9b08      	ldr	r3, [sp, #32]
  408956:	9901      	ldr	r1, [sp, #4]
  408958:	1a5c      	subs	r4, r3, r1
  40895a:	2c00      	cmp	r4, #0
  40895c:	dc81      	bgt.n	408862 <_vfiprintf_r+0x7ea>
  40895e:	9b03      	ldr	r3, [sp, #12]
  408960:	9908      	ldr	r1, [sp, #32]
  408962:	9801      	ldr	r0, [sp, #4]
  408964:	4281      	cmp	r1, r0
  408966:	bfac      	ite	ge
  408968:	185b      	addge	r3, r3, r1
  40896a:	181b      	addlt	r3, r3, r0
  40896c:	9303      	str	r3, [sp, #12]
  40896e:	bb72      	cbnz	r2, 4089ce <_vfiprintf_r+0x956>
  408970:	2300      	movs	r3, #0
  408972:	9310      	str	r3, [sp, #64]	; 0x40
  408974:	46ca      	mov	sl, r9
  408976:	f7ff bbbc 	b.w	4080f2 <_vfiprintf_r+0x7a>
  40897a:	aa0f      	add	r2, sp, #60	; 0x3c
  40897c:	9904      	ldr	r1, [sp, #16]
  40897e:	4620      	mov	r0, r4
  408980:	f7ff fb3a 	bl	407ff8 <__sprint_r.part.0>
  408984:	bb50      	cbnz	r0, 4089dc <_vfiprintf_r+0x964>
  408986:	9910      	ldr	r1, [sp, #64]	; 0x40
  408988:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40898a:	f101 0e01 	add.w	lr, r1, #1
  40898e:	46cc      	mov	ip, r9
  408990:	e548      	b.n	408424 <_vfiprintf_r+0x3ac>
  408992:	2a00      	cmp	r2, #0
  408994:	f040 8140 	bne.w	408c18 <_vfiprintf_r+0xba0>
  408998:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40899c:	2900      	cmp	r1, #0
  40899e:	f000 811b 	beq.w	408bd8 <_vfiprintf_r+0xb60>
  4089a2:	2201      	movs	r2, #1
  4089a4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4089a8:	4610      	mov	r0, r2
  4089aa:	921d      	str	r2, [sp, #116]	; 0x74
  4089ac:	911c      	str	r1, [sp, #112]	; 0x70
  4089ae:	46ca      	mov	sl, r9
  4089b0:	4601      	mov	r1, r0
  4089b2:	f10a 0a08 	add.w	sl, sl, #8
  4089b6:	3001      	adds	r0, #1
  4089b8:	e507      	b.n	4083ca <_vfiprintf_r+0x352>
  4089ba:	9b02      	ldr	r3, [sp, #8]
  4089bc:	2a01      	cmp	r2, #1
  4089be:	f000 8098 	beq.w	408af2 <_vfiprintf_r+0xa7a>
  4089c2:	2a02      	cmp	r2, #2
  4089c4:	d10d      	bne.n	4089e2 <_vfiprintf_r+0x96a>
  4089c6:	9302      	str	r3, [sp, #8]
  4089c8:	2600      	movs	r6, #0
  4089ca:	2700      	movs	r7, #0
  4089cc:	e5b0      	b.n	408530 <_vfiprintf_r+0x4b8>
  4089ce:	aa0f      	add	r2, sp, #60	; 0x3c
  4089d0:	9904      	ldr	r1, [sp, #16]
  4089d2:	9806      	ldr	r0, [sp, #24]
  4089d4:	f7ff fb10 	bl	407ff8 <__sprint_r.part.0>
  4089d8:	2800      	cmp	r0, #0
  4089da:	d0c9      	beq.n	408970 <_vfiprintf_r+0x8f8>
  4089dc:	f8dd b010 	ldr.w	fp, [sp, #16]
  4089e0:	e797      	b.n	408912 <_vfiprintf_r+0x89a>
  4089e2:	9302      	str	r3, [sp, #8]
  4089e4:	2600      	movs	r6, #0
  4089e6:	2700      	movs	r7, #0
  4089e8:	4649      	mov	r1, r9
  4089ea:	e000      	b.n	4089ee <_vfiprintf_r+0x976>
  4089ec:	4659      	mov	r1, fp
  4089ee:	08f2      	lsrs	r2, r6, #3
  4089f0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4089f4:	08f8      	lsrs	r0, r7, #3
  4089f6:	f006 0307 	and.w	r3, r6, #7
  4089fa:	4607      	mov	r7, r0
  4089fc:	4616      	mov	r6, r2
  4089fe:	3330      	adds	r3, #48	; 0x30
  408a00:	ea56 0207 	orrs.w	r2, r6, r7
  408a04:	f801 3c01 	strb.w	r3, [r1, #-1]
  408a08:	f101 3bff 	add.w	fp, r1, #4294967295
  408a0c:	d1ee      	bne.n	4089ec <_vfiprintf_r+0x974>
  408a0e:	9a02      	ldr	r2, [sp, #8]
  408a10:	07d6      	lsls	r6, r2, #31
  408a12:	f57f ad9d 	bpl.w	408550 <_vfiprintf_r+0x4d8>
  408a16:	2b30      	cmp	r3, #48	; 0x30
  408a18:	f43f ad9a 	beq.w	408550 <_vfiprintf_r+0x4d8>
  408a1c:	3902      	subs	r1, #2
  408a1e:	2330      	movs	r3, #48	; 0x30
  408a20:	f80b 3c01 	strb.w	r3, [fp, #-1]
  408a24:	eba9 0301 	sub.w	r3, r9, r1
  408a28:	9305      	str	r3, [sp, #20]
  408a2a:	468b      	mov	fp, r1
  408a2c:	e476      	b.n	40831c <_vfiprintf_r+0x2a4>
  408a2e:	9b03      	ldr	r3, [sp, #12]
  408a30:	9a08      	ldr	r2, [sp, #32]
  408a32:	428a      	cmp	r2, r1
  408a34:	bfac      	ite	ge
  408a36:	189b      	addge	r3, r3, r2
  408a38:	185b      	addlt	r3, r3, r1
  408a3a:	9303      	str	r3, [sp, #12]
  408a3c:	e798      	b.n	408970 <_vfiprintf_r+0x8f8>
  408a3e:	2202      	movs	r2, #2
  408a40:	e44d      	b.n	4082de <_vfiprintf_r+0x266>
  408a42:	2f00      	cmp	r7, #0
  408a44:	bf08      	it	eq
  408a46:	2e0a      	cmpeq	r6, #10
  408a48:	d352      	bcc.n	408af0 <_vfiprintf_r+0xa78>
  408a4a:	46cb      	mov	fp, r9
  408a4c:	4630      	mov	r0, r6
  408a4e:	4639      	mov	r1, r7
  408a50:	220a      	movs	r2, #10
  408a52:	2300      	movs	r3, #0
  408a54:	f003 fea6 	bl	40c7a4 <__aeabi_uldivmod>
  408a58:	3230      	adds	r2, #48	; 0x30
  408a5a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  408a5e:	4630      	mov	r0, r6
  408a60:	4639      	mov	r1, r7
  408a62:	2300      	movs	r3, #0
  408a64:	220a      	movs	r2, #10
  408a66:	f003 fe9d 	bl	40c7a4 <__aeabi_uldivmod>
  408a6a:	4606      	mov	r6, r0
  408a6c:	460f      	mov	r7, r1
  408a6e:	ea56 0307 	orrs.w	r3, r6, r7
  408a72:	d1eb      	bne.n	408a4c <_vfiprintf_r+0x9d4>
  408a74:	e56c      	b.n	408550 <_vfiprintf_r+0x4d8>
  408a76:	9405      	str	r4, [sp, #20]
  408a78:	46cb      	mov	fp, r9
  408a7a:	e44f      	b.n	40831c <_vfiprintf_r+0x2a4>
  408a7c:	aa0f      	add	r2, sp, #60	; 0x3c
  408a7e:	9904      	ldr	r1, [sp, #16]
  408a80:	9806      	ldr	r0, [sp, #24]
  408a82:	f7ff fab9 	bl	407ff8 <__sprint_r.part.0>
  408a86:	2800      	cmp	r0, #0
  408a88:	d1a8      	bne.n	4089dc <_vfiprintf_r+0x964>
  408a8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408a8c:	46ca      	mov	sl, r9
  408a8e:	e75e      	b.n	40894e <_vfiprintf_r+0x8d6>
  408a90:	aa0f      	add	r2, sp, #60	; 0x3c
  408a92:	9904      	ldr	r1, [sp, #16]
  408a94:	9806      	ldr	r0, [sp, #24]
  408a96:	f7ff faaf 	bl	407ff8 <__sprint_r.part.0>
  408a9a:	2800      	cmp	r0, #0
  408a9c:	d19e      	bne.n	4089dc <_vfiprintf_r+0x964>
  408a9e:	46ca      	mov	sl, r9
  408aa0:	f7ff bbc0 	b.w	408224 <_vfiprintf_r+0x1ac>
  408aa4:	0040daa4 	.word	0x0040daa4
  408aa8:	0040da94 	.word	0x0040da94
  408aac:	3104      	adds	r1, #4
  408aae:	6816      	ldr	r6, [r2, #0]
  408ab0:	9107      	str	r1, [sp, #28]
  408ab2:	2201      	movs	r2, #1
  408ab4:	2700      	movs	r7, #0
  408ab6:	e412      	b.n	4082de <_vfiprintf_r+0x266>
  408ab8:	9807      	ldr	r0, [sp, #28]
  408aba:	4601      	mov	r1, r0
  408abc:	3104      	adds	r1, #4
  408abe:	6806      	ldr	r6, [r0, #0]
  408ac0:	9107      	str	r1, [sp, #28]
  408ac2:	2700      	movs	r7, #0
  408ac4:	e40b      	b.n	4082de <_vfiprintf_r+0x266>
  408ac6:	680e      	ldr	r6, [r1, #0]
  408ac8:	3104      	adds	r1, #4
  408aca:	9107      	str	r1, [sp, #28]
  408acc:	2700      	movs	r7, #0
  408ace:	e591      	b.n	4085f4 <_vfiprintf_r+0x57c>
  408ad0:	9907      	ldr	r1, [sp, #28]
  408ad2:	680e      	ldr	r6, [r1, #0]
  408ad4:	460a      	mov	r2, r1
  408ad6:	17f7      	asrs	r7, r6, #31
  408ad8:	3204      	adds	r2, #4
  408ada:	9207      	str	r2, [sp, #28]
  408adc:	4630      	mov	r0, r6
  408ade:	4639      	mov	r1, r7
  408ae0:	e50f      	b.n	408502 <_vfiprintf_r+0x48a>
  408ae2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408ae6:	f001 fe4d 	bl	40a784 <__retarget_lock_release_recursive>
  408aea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  408aee:	e71a      	b.n	408926 <_vfiprintf_r+0x8ae>
  408af0:	9b02      	ldr	r3, [sp, #8]
  408af2:	9302      	str	r3, [sp, #8]
  408af4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  408af8:	3630      	adds	r6, #48	; 0x30
  408afa:	2301      	movs	r3, #1
  408afc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  408b00:	9305      	str	r3, [sp, #20]
  408b02:	e40b      	b.n	40831c <_vfiprintf_r+0x2a4>
  408b04:	aa0f      	add	r2, sp, #60	; 0x3c
  408b06:	9904      	ldr	r1, [sp, #16]
  408b08:	9806      	ldr	r0, [sp, #24]
  408b0a:	f7ff fa75 	bl	407ff8 <__sprint_r.part.0>
  408b0e:	2800      	cmp	r0, #0
  408b10:	f47f af64 	bne.w	4089dc <_vfiprintf_r+0x964>
  408b14:	9910      	ldr	r1, [sp, #64]	; 0x40
  408b16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408b18:	1c48      	adds	r0, r1, #1
  408b1a:	46ca      	mov	sl, r9
  408b1c:	e651      	b.n	4087c2 <_vfiprintf_r+0x74a>
  408b1e:	aa0f      	add	r2, sp, #60	; 0x3c
  408b20:	9904      	ldr	r1, [sp, #16]
  408b22:	9806      	ldr	r0, [sp, #24]
  408b24:	f7ff fa68 	bl	407ff8 <__sprint_r.part.0>
  408b28:	2800      	cmp	r0, #0
  408b2a:	f47f af57 	bne.w	4089dc <_vfiprintf_r+0x964>
  408b2e:	9910      	ldr	r1, [sp, #64]	; 0x40
  408b30:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408b32:	1c48      	adds	r0, r1, #1
  408b34:	46ca      	mov	sl, r9
  408b36:	e448      	b.n	4083ca <_vfiprintf_r+0x352>
  408b38:	2a00      	cmp	r2, #0
  408b3a:	f040 8091 	bne.w	408c60 <_vfiprintf_r+0xbe8>
  408b3e:	2001      	movs	r0, #1
  408b40:	4611      	mov	r1, r2
  408b42:	46ca      	mov	sl, r9
  408b44:	e641      	b.n	4087ca <_vfiprintf_r+0x752>
  408b46:	aa0f      	add	r2, sp, #60	; 0x3c
  408b48:	9904      	ldr	r1, [sp, #16]
  408b4a:	9806      	ldr	r0, [sp, #24]
  408b4c:	f7ff fa54 	bl	407ff8 <__sprint_r.part.0>
  408b50:	2800      	cmp	r0, #0
  408b52:	f47f af43 	bne.w	4089dc <_vfiprintf_r+0x964>
  408b56:	9810      	ldr	r0, [sp, #64]	; 0x40
  408b58:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408b5a:	3001      	adds	r0, #1
  408b5c:	46ca      	mov	sl, r9
  408b5e:	e667      	b.n	408830 <_vfiprintf_r+0x7b8>
  408b60:	46d3      	mov	fp, sl
  408b62:	e6d6      	b.n	408912 <_vfiprintf_r+0x89a>
  408b64:	9e07      	ldr	r6, [sp, #28]
  408b66:	3607      	adds	r6, #7
  408b68:	f026 0207 	bic.w	r2, r6, #7
  408b6c:	f102 0108 	add.w	r1, r2, #8
  408b70:	e9d2 6700 	ldrd	r6, r7, [r2]
  408b74:	9107      	str	r1, [sp, #28]
  408b76:	2201      	movs	r2, #1
  408b78:	f7ff bbb1 	b.w	4082de <_vfiprintf_r+0x266>
  408b7c:	9e07      	ldr	r6, [sp, #28]
  408b7e:	3607      	adds	r6, #7
  408b80:	f026 0607 	bic.w	r6, r6, #7
  408b84:	e9d6 0100 	ldrd	r0, r1, [r6]
  408b88:	f106 0208 	add.w	r2, r6, #8
  408b8c:	9207      	str	r2, [sp, #28]
  408b8e:	4606      	mov	r6, r0
  408b90:	460f      	mov	r7, r1
  408b92:	e4b6      	b.n	408502 <_vfiprintf_r+0x48a>
  408b94:	9e07      	ldr	r6, [sp, #28]
  408b96:	3607      	adds	r6, #7
  408b98:	f026 0207 	bic.w	r2, r6, #7
  408b9c:	f102 0108 	add.w	r1, r2, #8
  408ba0:	e9d2 6700 	ldrd	r6, r7, [r2]
  408ba4:	9107      	str	r1, [sp, #28]
  408ba6:	2200      	movs	r2, #0
  408ba8:	f7ff bb99 	b.w	4082de <_vfiprintf_r+0x266>
  408bac:	9e07      	ldr	r6, [sp, #28]
  408bae:	3607      	adds	r6, #7
  408bb0:	f026 0107 	bic.w	r1, r6, #7
  408bb4:	f101 0008 	add.w	r0, r1, #8
  408bb8:	9007      	str	r0, [sp, #28]
  408bba:	e9d1 6700 	ldrd	r6, r7, [r1]
  408bbe:	e519      	b.n	4085f4 <_vfiprintf_r+0x57c>
  408bc0:	46cb      	mov	fp, r9
  408bc2:	f7ff bbab 	b.w	40831c <_vfiprintf_r+0x2a4>
  408bc6:	252d      	movs	r5, #45	; 0x2d
  408bc8:	4276      	negs	r6, r6
  408bca:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  408bce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408bd2:	2201      	movs	r2, #1
  408bd4:	f7ff bb88 	b.w	4082e8 <_vfiprintf_r+0x270>
  408bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408bda:	b9b3      	cbnz	r3, 408c0a <_vfiprintf_r+0xb92>
  408bdc:	4611      	mov	r1, r2
  408bde:	2001      	movs	r0, #1
  408be0:	46ca      	mov	sl, r9
  408be2:	e5f2      	b.n	4087ca <_vfiprintf_r+0x752>
  408be4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408be8:	f001 fdcc 	bl	40a784 <__retarget_lock_release_recursive>
  408bec:	f04f 33ff 	mov.w	r3, #4294967295
  408bf0:	9303      	str	r3, [sp, #12]
  408bf2:	f7ff bb50 	b.w	408296 <_vfiprintf_r+0x21e>
  408bf6:	aa0f      	add	r2, sp, #60	; 0x3c
  408bf8:	9904      	ldr	r1, [sp, #16]
  408bfa:	9806      	ldr	r0, [sp, #24]
  408bfc:	f7ff f9fc 	bl	407ff8 <__sprint_r.part.0>
  408c00:	2800      	cmp	r0, #0
  408c02:	f47f aeeb 	bne.w	4089dc <_vfiprintf_r+0x964>
  408c06:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408c08:	e6a9      	b.n	40895e <_vfiprintf_r+0x8e6>
  408c0a:	ab0e      	add	r3, sp, #56	; 0x38
  408c0c:	2202      	movs	r2, #2
  408c0e:	931c      	str	r3, [sp, #112]	; 0x70
  408c10:	921d      	str	r2, [sp, #116]	; 0x74
  408c12:	2001      	movs	r0, #1
  408c14:	46ca      	mov	sl, r9
  408c16:	e5d0      	b.n	4087ba <_vfiprintf_r+0x742>
  408c18:	aa0f      	add	r2, sp, #60	; 0x3c
  408c1a:	9904      	ldr	r1, [sp, #16]
  408c1c:	9806      	ldr	r0, [sp, #24]
  408c1e:	f7ff f9eb 	bl	407ff8 <__sprint_r.part.0>
  408c22:	2800      	cmp	r0, #0
  408c24:	f47f aeda 	bne.w	4089dc <_vfiprintf_r+0x964>
  408c28:	9910      	ldr	r1, [sp, #64]	; 0x40
  408c2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408c2c:	1c48      	adds	r0, r1, #1
  408c2e:	46ca      	mov	sl, r9
  408c30:	e5a4      	b.n	40877c <_vfiprintf_r+0x704>
  408c32:	9a07      	ldr	r2, [sp, #28]
  408c34:	9903      	ldr	r1, [sp, #12]
  408c36:	6813      	ldr	r3, [r2, #0]
  408c38:	17cd      	asrs	r5, r1, #31
  408c3a:	4608      	mov	r0, r1
  408c3c:	3204      	adds	r2, #4
  408c3e:	4629      	mov	r1, r5
  408c40:	9207      	str	r2, [sp, #28]
  408c42:	e9c3 0100 	strd	r0, r1, [r3]
  408c46:	f7ff ba54 	b.w	4080f2 <_vfiprintf_r+0x7a>
  408c4a:	4658      	mov	r0, fp
  408c4c:	9607      	str	r6, [sp, #28]
  408c4e:	9302      	str	r3, [sp, #8]
  408c50:	f7fd ff36 	bl	406ac0 <strlen>
  408c54:	2400      	movs	r4, #0
  408c56:	9005      	str	r0, [sp, #20]
  408c58:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408c5c:	f7ff bb5e 	b.w	40831c <_vfiprintf_r+0x2a4>
  408c60:	aa0f      	add	r2, sp, #60	; 0x3c
  408c62:	9904      	ldr	r1, [sp, #16]
  408c64:	9806      	ldr	r0, [sp, #24]
  408c66:	f7ff f9c7 	bl	407ff8 <__sprint_r.part.0>
  408c6a:	2800      	cmp	r0, #0
  408c6c:	f47f aeb6 	bne.w	4089dc <_vfiprintf_r+0x964>
  408c70:	9910      	ldr	r1, [sp, #64]	; 0x40
  408c72:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408c74:	1c48      	adds	r0, r1, #1
  408c76:	46ca      	mov	sl, r9
  408c78:	e5a7      	b.n	4087ca <_vfiprintf_r+0x752>
  408c7a:	9910      	ldr	r1, [sp, #64]	; 0x40
  408c7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408c7e:	4e20      	ldr	r6, [pc, #128]	; (408d00 <_vfiprintf_r+0xc88>)
  408c80:	3101      	adds	r1, #1
  408c82:	f7ff bb90 	b.w	4083a6 <_vfiprintf_r+0x32e>
  408c86:	2c06      	cmp	r4, #6
  408c88:	bf28      	it	cs
  408c8a:	2406      	movcs	r4, #6
  408c8c:	9405      	str	r4, [sp, #20]
  408c8e:	9607      	str	r6, [sp, #28]
  408c90:	9401      	str	r4, [sp, #4]
  408c92:	f8df b070 	ldr.w	fp, [pc, #112]	; 408d04 <_vfiprintf_r+0xc8c>
  408c96:	e4d5      	b.n	408644 <_vfiprintf_r+0x5cc>
  408c98:	9810      	ldr	r0, [sp, #64]	; 0x40
  408c9a:	4e19      	ldr	r6, [pc, #100]	; (408d00 <_vfiprintf_r+0xc88>)
  408c9c:	3001      	adds	r0, #1
  408c9e:	e603      	b.n	4088a8 <_vfiprintf_r+0x830>
  408ca0:	9405      	str	r4, [sp, #20]
  408ca2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408ca6:	9607      	str	r6, [sp, #28]
  408ca8:	9302      	str	r3, [sp, #8]
  408caa:	4604      	mov	r4, r0
  408cac:	f7ff bb36 	b.w	40831c <_vfiprintf_r+0x2a4>
  408cb0:	4686      	mov	lr, r0
  408cb2:	f7ff bbce 	b.w	408452 <_vfiprintf_r+0x3da>
  408cb6:	9806      	ldr	r0, [sp, #24]
  408cb8:	aa0f      	add	r2, sp, #60	; 0x3c
  408cba:	4659      	mov	r1, fp
  408cbc:	f7ff f99c 	bl	407ff8 <__sprint_r.part.0>
  408cc0:	2800      	cmp	r0, #0
  408cc2:	f43f ae24 	beq.w	40890e <_vfiprintf_r+0x896>
  408cc6:	e624      	b.n	408912 <_vfiprintf_r+0x89a>
  408cc8:	9907      	ldr	r1, [sp, #28]
  408cca:	f898 2001 	ldrb.w	r2, [r8, #1]
  408cce:	680c      	ldr	r4, [r1, #0]
  408cd0:	3104      	adds	r1, #4
  408cd2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  408cd6:	46b8      	mov	r8, r7
  408cd8:	9107      	str	r1, [sp, #28]
  408cda:	f7ff ba3f 	b.w	40815c <_vfiprintf_r+0xe4>
  408cde:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408ce2:	e43c      	b.n	40855e <_vfiprintf_r+0x4e6>
  408ce4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408ce8:	e521      	b.n	40872e <_vfiprintf_r+0x6b6>
  408cea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408cee:	f7ff bbf4 	b.w	4084da <_vfiprintf_r+0x462>
  408cf2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408cf6:	e491      	b.n	40861c <_vfiprintf_r+0x5a4>
  408cf8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408cfc:	e469      	b.n	4085d2 <_vfiprintf_r+0x55a>
  408cfe:	bf00      	nop
  408d00:	0040da94 	.word	0x0040da94
  408d04:	0040da68 	.word	0x0040da68

00408d08 <__sbprintf>:
  408d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408d0c:	460c      	mov	r4, r1
  408d0e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  408d12:	8989      	ldrh	r1, [r1, #12]
  408d14:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408d16:	89e5      	ldrh	r5, [r4, #14]
  408d18:	9619      	str	r6, [sp, #100]	; 0x64
  408d1a:	f021 0102 	bic.w	r1, r1, #2
  408d1e:	4606      	mov	r6, r0
  408d20:	69e0      	ldr	r0, [r4, #28]
  408d22:	f8ad 100c 	strh.w	r1, [sp, #12]
  408d26:	4617      	mov	r7, r2
  408d28:	f44f 6180 	mov.w	r1, #1024	; 0x400
  408d2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  408d2e:	f8ad 500e 	strh.w	r5, [sp, #14]
  408d32:	4698      	mov	r8, r3
  408d34:	ad1a      	add	r5, sp, #104	; 0x68
  408d36:	2300      	movs	r3, #0
  408d38:	9007      	str	r0, [sp, #28]
  408d3a:	a816      	add	r0, sp, #88	; 0x58
  408d3c:	9209      	str	r2, [sp, #36]	; 0x24
  408d3e:	9306      	str	r3, [sp, #24]
  408d40:	9500      	str	r5, [sp, #0]
  408d42:	9504      	str	r5, [sp, #16]
  408d44:	9102      	str	r1, [sp, #8]
  408d46:	9105      	str	r1, [sp, #20]
  408d48:	f001 fd16 	bl	40a778 <__retarget_lock_init_recursive>
  408d4c:	4643      	mov	r3, r8
  408d4e:	463a      	mov	r2, r7
  408d50:	4669      	mov	r1, sp
  408d52:	4630      	mov	r0, r6
  408d54:	f7ff f990 	bl	408078 <_vfiprintf_r>
  408d58:	1e05      	subs	r5, r0, #0
  408d5a:	db07      	blt.n	408d6c <__sbprintf+0x64>
  408d5c:	4630      	mov	r0, r6
  408d5e:	4669      	mov	r1, sp
  408d60:	f001 f8e8 	bl	409f34 <_fflush_r>
  408d64:	2800      	cmp	r0, #0
  408d66:	bf18      	it	ne
  408d68:	f04f 35ff 	movne.w	r5, #4294967295
  408d6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  408d70:	065b      	lsls	r3, r3, #25
  408d72:	d503      	bpl.n	408d7c <__sbprintf+0x74>
  408d74:	89a3      	ldrh	r3, [r4, #12]
  408d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408d7a:	81a3      	strh	r3, [r4, #12]
  408d7c:	9816      	ldr	r0, [sp, #88]	; 0x58
  408d7e:	f001 fcfd 	bl	40a77c <__retarget_lock_close_recursive>
  408d82:	4628      	mov	r0, r5
  408d84:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  408d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00408d8c <__swsetup_r>:
  408d8c:	b538      	push	{r3, r4, r5, lr}
  408d8e:	4b30      	ldr	r3, [pc, #192]	; (408e50 <__swsetup_r+0xc4>)
  408d90:	681b      	ldr	r3, [r3, #0]
  408d92:	4605      	mov	r5, r0
  408d94:	460c      	mov	r4, r1
  408d96:	b113      	cbz	r3, 408d9e <__swsetup_r+0x12>
  408d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  408d9a:	2a00      	cmp	r2, #0
  408d9c:	d038      	beq.n	408e10 <__swsetup_r+0x84>
  408d9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408da2:	b293      	uxth	r3, r2
  408da4:	0718      	lsls	r0, r3, #28
  408da6:	d50c      	bpl.n	408dc2 <__swsetup_r+0x36>
  408da8:	6920      	ldr	r0, [r4, #16]
  408daa:	b1a8      	cbz	r0, 408dd8 <__swsetup_r+0x4c>
  408dac:	f013 0201 	ands.w	r2, r3, #1
  408db0:	d01e      	beq.n	408df0 <__swsetup_r+0x64>
  408db2:	6963      	ldr	r3, [r4, #20]
  408db4:	2200      	movs	r2, #0
  408db6:	425b      	negs	r3, r3
  408db8:	61a3      	str	r3, [r4, #24]
  408dba:	60a2      	str	r2, [r4, #8]
  408dbc:	b1f0      	cbz	r0, 408dfc <__swsetup_r+0x70>
  408dbe:	2000      	movs	r0, #0
  408dc0:	bd38      	pop	{r3, r4, r5, pc}
  408dc2:	06d9      	lsls	r1, r3, #27
  408dc4:	d53c      	bpl.n	408e40 <__swsetup_r+0xb4>
  408dc6:	0758      	lsls	r0, r3, #29
  408dc8:	d426      	bmi.n	408e18 <__swsetup_r+0x8c>
  408dca:	6920      	ldr	r0, [r4, #16]
  408dcc:	f042 0308 	orr.w	r3, r2, #8
  408dd0:	81a3      	strh	r3, [r4, #12]
  408dd2:	b29b      	uxth	r3, r3
  408dd4:	2800      	cmp	r0, #0
  408dd6:	d1e9      	bne.n	408dac <__swsetup_r+0x20>
  408dd8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408ddc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408de0:	d0e4      	beq.n	408dac <__swsetup_r+0x20>
  408de2:	4628      	mov	r0, r5
  408de4:	4621      	mov	r1, r4
  408de6:	f001 fcfd 	bl	40a7e4 <__smakebuf_r>
  408dea:	89a3      	ldrh	r3, [r4, #12]
  408dec:	6920      	ldr	r0, [r4, #16]
  408dee:	e7dd      	b.n	408dac <__swsetup_r+0x20>
  408df0:	0799      	lsls	r1, r3, #30
  408df2:	bf58      	it	pl
  408df4:	6962      	ldrpl	r2, [r4, #20]
  408df6:	60a2      	str	r2, [r4, #8]
  408df8:	2800      	cmp	r0, #0
  408dfa:	d1e0      	bne.n	408dbe <__swsetup_r+0x32>
  408dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408e00:	061a      	lsls	r2, r3, #24
  408e02:	d5dd      	bpl.n	408dc0 <__swsetup_r+0x34>
  408e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408e08:	81a3      	strh	r3, [r4, #12]
  408e0a:	f04f 30ff 	mov.w	r0, #4294967295
  408e0e:	bd38      	pop	{r3, r4, r5, pc}
  408e10:	4618      	mov	r0, r3
  408e12:	f001 f8e7 	bl	409fe4 <__sinit>
  408e16:	e7c2      	b.n	408d9e <__swsetup_r+0x12>
  408e18:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408e1a:	b151      	cbz	r1, 408e32 <__swsetup_r+0xa6>
  408e1c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408e20:	4299      	cmp	r1, r3
  408e22:	d004      	beq.n	408e2e <__swsetup_r+0xa2>
  408e24:	4628      	mov	r0, r5
  408e26:	f001 fa03 	bl	40a230 <_free_r>
  408e2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408e2e:	2300      	movs	r3, #0
  408e30:	6323      	str	r3, [r4, #48]	; 0x30
  408e32:	2300      	movs	r3, #0
  408e34:	6920      	ldr	r0, [r4, #16]
  408e36:	6063      	str	r3, [r4, #4]
  408e38:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  408e3c:	6020      	str	r0, [r4, #0]
  408e3e:	e7c5      	b.n	408dcc <__swsetup_r+0x40>
  408e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  408e44:	2309      	movs	r3, #9
  408e46:	602b      	str	r3, [r5, #0]
  408e48:	f04f 30ff 	mov.w	r0, #4294967295
  408e4c:	81a2      	strh	r2, [r4, #12]
  408e4e:	bd38      	pop	{r3, r4, r5, pc}
  408e50:	20400028 	.word	0x20400028

00408e54 <register_fini>:
  408e54:	4b02      	ldr	r3, [pc, #8]	; (408e60 <register_fini+0xc>)
  408e56:	b113      	cbz	r3, 408e5e <register_fini+0xa>
  408e58:	4802      	ldr	r0, [pc, #8]	; (408e64 <register_fini+0x10>)
  408e5a:	f000 b805 	b.w	408e68 <atexit>
  408e5e:	4770      	bx	lr
  408e60:	00000000 	.word	0x00000000
  408e64:	0040a055 	.word	0x0040a055

00408e68 <atexit>:
  408e68:	2300      	movs	r3, #0
  408e6a:	4601      	mov	r1, r0
  408e6c:	461a      	mov	r2, r3
  408e6e:	4618      	mov	r0, r3
  408e70:	f002 beb0 	b.w	40bbd4 <__register_exitproc>

00408e74 <quorem>:
  408e74:	6902      	ldr	r2, [r0, #16]
  408e76:	690b      	ldr	r3, [r1, #16]
  408e78:	4293      	cmp	r3, r2
  408e7a:	f300 808d 	bgt.w	408f98 <quorem+0x124>
  408e7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408e82:	f103 38ff 	add.w	r8, r3, #4294967295
  408e86:	f101 0714 	add.w	r7, r1, #20
  408e8a:	f100 0b14 	add.w	fp, r0, #20
  408e8e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  408e92:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  408e96:	ea4f 0488 	mov.w	r4, r8, lsl #2
  408e9a:	b083      	sub	sp, #12
  408e9c:	3201      	adds	r2, #1
  408e9e:	fbb3 f9f2 	udiv	r9, r3, r2
  408ea2:	eb0b 0304 	add.w	r3, fp, r4
  408ea6:	9400      	str	r4, [sp, #0]
  408ea8:	eb07 0a04 	add.w	sl, r7, r4
  408eac:	9301      	str	r3, [sp, #4]
  408eae:	f1b9 0f00 	cmp.w	r9, #0
  408eb2:	d039      	beq.n	408f28 <quorem+0xb4>
  408eb4:	2500      	movs	r5, #0
  408eb6:	462e      	mov	r6, r5
  408eb8:	46bc      	mov	ip, r7
  408eba:	46de      	mov	lr, fp
  408ebc:	f85c 4b04 	ldr.w	r4, [ip], #4
  408ec0:	f8de 3000 	ldr.w	r3, [lr]
  408ec4:	b2a2      	uxth	r2, r4
  408ec6:	fb09 5502 	mla	r5, r9, r2, r5
  408eca:	0c22      	lsrs	r2, r4, #16
  408ecc:	0c2c      	lsrs	r4, r5, #16
  408ece:	fb09 4202 	mla	r2, r9, r2, r4
  408ed2:	b2ad      	uxth	r5, r5
  408ed4:	1b75      	subs	r5, r6, r5
  408ed6:	b296      	uxth	r6, r2
  408ed8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  408edc:	fa15 f383 	uxtah	r3, r5, r3
  408ee0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  408ee4:	b29b      	uxth	r3, r3
  408ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  408eea:	45e2      	cmp	sl, ip
  408eec:	ea4f 4512 	mov.w	r5, r2, lsr #16
  408ef0:	f84e 3b04 	str.w	r3, [lr], #4
  408ef4:	ea4f 4626 	mov.w	r6, r6, asr #16
  408ef8:	d2e0      	bcs.n	408ebc <quorem+0x48>
  408efa:	9b00      	ldr	r3, [sp, #0]
  408efc:	f85b 3003 	ldr.w	r3, [fp, r3]
  408f00:	b993      	cbnz	r3, 408f28 <quorem+0xb4>
  408f02:	9c01      	ldr	r4, [sp, #4]
  408f04:	1f23      	subs	r3, r4, #4
  408f06:	459b      	cmp	fp, r3
  408f08:	d20c      	bcs.n	408f24 <quorem+0xb0>
  408f0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  408f0e:	b94b      	cbnz	r3, 408f24 <quorem+0xb0>
  408f10:	f1a4 0308 	sub.w	r3, r4, #8
  408f14:	e002      	b.n	408f1c <quorem+0xa8>
  408f16:	681a      	ldr	r2, [r3, #0]
  408f18:	3b04      	subs	r3, #4
  408f1a:	b91a      	cbnz	r2, 408f24 <quorem+0xb0>
  408f1c:	459b      	cmp	fp, r3
  408f1e:	f108 38ff 	add.w	r8, r8, #4294967295
  408f22:	d3f8      	bcc.n	408f16 <quorem+0xa2>
  408f24:	f8c0 8010 	str.w	r8, [r0, #16]
  408f28:	4604      	mov	r4, r0
  408f2a:	f002 fa37 	bl	40b39c <__mcmp>
  408f2e:	2800      	cmp	r0, #0
  408f30:	db2e      	blt.n	408f90 <quorem+0x11c>
  408f32:	f109 0901 	add.w	r9, r9, #1
  408f36:	465d      	mov	r5, fp
  408f38:	2300      	movs	r3, #0
  408f3a:	f857 1b04 	ldr.w	r1, [r7], #4
  408f3e:	6828      	ldr	r0, [r5, #0]
  408f40:	b28a      	uxth	r2, r1
  408f42:	1a9a      	subs	r2, r3, r2
  408f44:	0c0b      	lsrs	r3, r1, #16
  408f46:	fa12 f280 	uxtah	r2, r2, r0
  408f4a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  408f4e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408f52:	b292      	uxth	r2, r2
  408f54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408f58:	45ba      	cmp	sl, r7
  408f5a:	f845 2b04 	str.w	r2, [r5], #4
  408f5e:	ea4f 4323 	mov.w	r3, r3, asr #16
  408f62:	d2ea      	bcs.n	408f3a <quorem+0xc6>
  408f64:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  408f68:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  408f6c:	b982      	cbnz	r2, 408f90 <quorem+0x11c>
  408f6e:	1f1a      	subs	r2, r3, #4
  408f70:	4593      	cmp	fp, r2
  408f72:	d20b      	bcs.n	408f8c <quorem+0x118>
  408f74:	f853 2c04 	ldr.w	r2, [r3, #-4]
  408f78:	b942      	cbnz	r2, 408f8c <quorem+0x118>
  408f7a:	3b08      	subs	r3, #8
  408f7c:	e002      	b.n	408f84 <quorem+0x110>
  408f7e:	681a      	ldr	r2, [r3, #0]
  408f80:	3b04      	subs	r3, #4
  408f82:	b91a      	cbnz	r2, 408f8c <quorem+0x118>
  408f84:	459b      	cmp	fp, r3
  408f86:	f108 38ff 	add.w	r8, r8, #4294967295
  408f8a:	d3f8      	bcc.n	408f7e <quorem+0x10a>
  408f8c:	f8c4 8010 	str.w	r8, [r4, #16]
  408f90:	4648      	mov	r0, r9
  408f92:	b003      	add	sp, #12
  408f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f98:	2000      	movs	r0, #0
  408f9a:	4770      	bx	lr
  408f9c:	0000      	movs	r0, r0
	...

00408fa0 <_dtoa_r>:
  408fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408fa4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  408fa6:	b09b      	sub	sp, #108	; 0x6c
  408fa8:	4604      	mov	r4, r0
  408faa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  408fac:	4692      	mov	sl, r2
  408fae:	469b      	mov	fp, r3
  408fb0:	b141      	cbz	r1, 408fc4 <_dtoa_r+0x24>
  408fb2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  408fb4:	604a      	str	r2, [r1, #4]
  408fb6:	2301      	movs	r3, #1
  408fb8:	4093      	lsls	r3, r2
  408fba:	608b      	str	r3, [r1, #8]
  408fbc:	f002 f816 	bl	40afec <_Bfree>
  408fc0:	2300      	movs	r3, #0
  408fc2:	6423      	str	r3, [r4, #64]	; 0x40
  408fc4:	f1bb 0f00 	cmp.w	fp, #0
  408fc8:	465d      	mov	r5, fp
  408fca:	db35      	blt.n	409038 <_dtoa_r+0x98>
  408fcc:	2300      	movs	r3, #0
  408fce:	6033      	str	r3, [r6, #0]
  408fd0:	4b9d      	ldr	r3, [pc, #628]	; (409248 <_dtoa_r+0x2a8>)
  408fd2:	43ab      	bics	r3, r5
  408fd4:	d015      	beq.n	409002 <_dtoa_r+0x62>
  408fd6:	4650      	mov	r0, sl
  408fd8:	4659      	mov	r1, fp
  408fda:	2200      	movs	r2, #0
  408fdc:	2300      	movs	r3, #0
  408fde:	f003 fb71 	bl	40c6c4 <__aeabi_dcmpeq>
  408fe2:	4680      	mov	r8, r0
  408fe4:	2800      	cmp	r0, #0
  408fe6:	d02d      	beq.n	409044 <_dtoa_r+0xa4>
  408fe8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408fea:	2301      	movs	r3, #1
  408fec:	6013      	str	r3, [r2, #0]
  408fee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408ff0:	2b00      	cmp	r3, #0
  408ff2:	f000 80bd 	beq.w	409170 <_dtoa_r+0x1d0>
  408ff6:	4895      	ldr	r0, [pc, #596]	; (40924c <_dtoa_r+0x2ac>)
  408ff8:	6018      	str	r0, [r3, #0]
  408ffa:	3801      	subs	r0, #1
  408ffc:	b01b      	add	sp, #108	; 0x6c
  408ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409002:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409004:	f242 730f 	movw	r3, #9999	; 0x270f
  409008:	6013      	str	r3, [r2, #0]
  40900a:	f1ba 0f00 	cmp.w	sl, #0
  40900e:	d10d      	bne.n	40902c <_dtoa_r+0x8c>
  409010:	f3c5 0513 	ubfx	r5, r5, #0, #20
  409014:	b955      	cbnz	r5, 40902c <_dtoa_r+0x8c>
  409016:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409018:	488d      	ldr	r0, [pc, #564]	; (409250 <_dtoa_r+0x2b0>)
  40901a:	2b00      	cmp	r3, #0
  40901c:	d0ee      	beq.n	408ffc <_dtoa_r+0x5c>
  40901e:	f100 0308 	add.w	r3, r0, #8
  409022:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  409024:	6013      	str	r3, [r2, #0]
  409026:	b01b      	add	sp, #108	; 0x6c
  409028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40902c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40902e:	4889      	ldr	r0, [pc, #548]	; (409254 <_dtoa_r+0x2b4>)
  409030:	2b00      	cmp	r3, #0
  409032:	d0e3      	beq.n	408ffc <_dtoa_r+0x5c>
  409034:	1cc3      	adds	r3, r0, #3
  409036:	e7f4      	b.n	409022 <_dtoa_r+0x82>
  409038:	2301      	movs	r3, #1
  40903a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40903e:	6033      	str	r3, [r6, #0]
  409040:	46ab      	mov	fp, r5
  409042:	e7c5      	b.n	408fd0 <_dtoa_r+0x30>
  409044:	aa18      	add	r2, sp, #96	; 0x60
  409046:	ab19      	add	r3, sp, #100	; 0x64
  409048:	9201      	str	r2, [sp, #4]
  40904a:	9300      	str	r3, [sp, #0]
  40904c:	4652      	mov	r2, sl
  40904e:	465b      	mov	r3, fp
  409050:	4620      	mov	r0, r4
  409052:	f002 fa43 	bl	40b4dc <__d2b>
  409056:	0d2b      	lsrs	r3, r5, #20
  409058:	4681      	mov	r9, r0
  40905a:	d071      	beq.n	409140 <_dtoa_r+0x1a0>
  40905c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  409060:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  409064:	9f18      	ldr	r7, [sp, #96]	; 0x60
  409066:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40906a:	4650      	mov	r0, sl
  40906c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  409070:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  409074:	2200      	movs	r2, #0
  409076:	4b78      	ldr	r3, [pc, #480]	; (409258 <_dtoa_r+0x2b8>)
  409078:	f002 ff08 	bl	40be8c <__aeabi_dsub>
  40907c:	a36c      	add	r3, pc, #432	; (adr r3, 409230 <_dtoa_r+0x290>)
  40907e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409082:	f003 f8b7 	bl	40c1f4 <__aeabi_dmul>
  409086:	a36c      	add	r3, pc, #432	; (adr r3, 409238 <_dtoa_r+0x298>)
  409088:	e9d3 2300 	ldrd	r2, r3, [r3]
  40908c:	f002 ff00 	bl	40be90 <__adddf3>
  409090:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409094:	4630      	mov	r0, r6
  409096:	f003 f847 	bl	40c128 <__aeabi_i2d>
  40909a:	a369      	add	r3, pc, #420	; (adr r3, 409240 <_dtoa_r+0x2a0>)
  40909c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4090a0:	f003 f8a8 	bl	40c1f4 <__aeabi_dmul>
  4090a4:	4602      	mov	r2, r0
  4090a6:	460b      	mov	r3, r1
  4090a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4090ac:	f002 fef0 	bl	40be90 <__adddf3>
  4090b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4090b4:	f003 fb4e 	bl	40c754 <__aeabi_d2iz>
  4090b8:	2200      	movs	r2, #0
  4090ba:	9002      	str	r0, [sp, #8]
  4090bc:	2300      	movs	r3, #0
  4090be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4090c2:	f003 fb09 	bl	40c6d8 <__aeabi_dcmplt>
  4090c6:	2800      	cmp	r0, #0
  4090c8:	f040 8173 	bne.w	4093b2 <_dtoa_r+0x412>
  4090cc:	9d02      	ldr	r5, [sp, #8]
  4090ce:	2d16      	cmp	r5, #22
  4090d0:	f200 815d 	bhi.w	40938e <_dtoa_r+0x3ee>
  4090d4:	4b61      	ldr	r3, [pc, #388]	; (40925c <_dtoa_r+0x2bc>)
  4090d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4090da:	e9d3 0100 	ldrd	r0, r1, [r3]
  4090de:	4652      	mov	r2, sl
  4090e0:	465b      	mov	r3, fp
  4090e2:	f003 fb17 	bl	40c714 <__aeabi_dcmpgt>
  4090e6:	2800      	cmp	r0, #0
  4090e8:	f000 81c5 	beq.w	409476 <_dtoa_r+0x4d6>
  4090ec:	1e6b      	subs	r3, r5, #1
  4090ee:	9302      	str	r3, [sp, #8]
  4090f0:	2300      	movs	r3, #0
  4090f2:	930e      	str	r3, [sp, #56]	; 0x38
  4090f4:	1bbf      	subs	r7, r7, r6
  4090f6:	1e7b      	subs	r3, r7, #1
  4090f8:	9306      	str	r3, [sp, #24]
  4090fa:	f100 8154 	bmi.w	4093a6 <_dtoa_r+0x406>
  4090fe:	2300      	movs	r3, #0
  409100:	9308      	str	r3, [sp, #32]
  409102:	9b02      	ldr	r3, [sp, #8]
  409104:	2b00      	cmp	r3, #0
  409106:	f2c0 8145 	blt.w	409394 <_dtoa_r+0x3f4>
  40910a:	9a06      	ldr	r2, [sp, #24]
  40910c:	930d      	str	r3, [sp, #52]	; 0x34
  40910e:	4611      	mov	r1, r2
  409110:	4419      	add	r1, r3
  409112:	2300      	movs	r3, #0
  409114:	9106      	str	r1, [sp, #24]
  409116:	930c      	str	r3, [sp, #48]	; 0x30
  409118:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40911a:	2b09      	cmp	r3, #9
  40911c:	d82a      	bhi.n	409174 <_dtoa_r+0x1d4>
  40911e:	2b05      	cmp	r3, #5
  409120:	f340 865b 	ble.w	409dda <_dtoa_r+0xe3a>
  409124:	3b04      	subs	r3, #4
  409126:	9324      	str	r3, [sp, #144]	; 0x90
  409128:	2500      	movs	r5, #0
  40912a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40912c:	3b02      	subs	r3, #2
  40912e:	2b03      	cmp	r3, #3
  409130:	f200 8642 	bhi.w	409db8 <_dtoa_r+0xe18>
  409134:	e8df f013 	tbh	[pc, r3, lsl #1]
  409138:	02c903d4 	.word	0x02c903d4
  40913c:	046103df 	.word	0x046103df
  409140:	9f18      	ldr	r7, [sp, #96]	; 0x60
  409142:	9e19      	ldr	r6, [sp, #100]	; 0x64
  409144:	443e      	add	r6, r7
  409146:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40914a:	2b20      	cmp	r3, #32
  40914c:	f340 818e 	ble.w	40946c <_dtoa_r+0x4cc>
  409150:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  409154:	f206 4012 	addw	r0, r6, #1042	; 0x412
  409158:	409d      	lsls	r5, r3
  40915a:	fa2a f000 	lsr.w	r0, sl, r0
  40915e:	4328      	orrs	r0, r5
  409160:	f002 ffd2 	bl	40c108 <__aeabi_ui2d>
  409164:	2301      	movs	r3, #1
  409166:	3e01      	subs	r6, #1
  409168:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40916c:	9314      	str	r3, [sp, #80]	; 0x50
  40916e:	e781      	b.n	409074 <_dtoa_r+0xd4>
  409170:	483b      	ldr	r0, [pc, #236]	; (409260 <_dtoa_r+0x2c0>)
  409172:	e743      	b.n	408ffc <_dtoa_r+0x5c>
  409174:	2100      	movs	r1, #0
  409176:	6461      	str	r1, [r4, #68]	; 0x44
  409178:	4620      	mov	r0, r4
  40917a:	9125      	str	r1, [sp, #148]	; 0x94
  40917c:	f001 ff10 	bl	40afa0 <_Balloc>
  409180:	f04f 33ff 	mov.w	r3, #4294967295
  409184:	930a      	str	r3, [sp, #40]	; 0x28
  409186:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409188:	930f      	str	r3, [sp, #60]	; 0x3c
  40918a:	2301      	movs	r3, #1
  40918c:	9004      	str	r0, [sp, #16]
  40918e:	6420      	str	r0, [r4, #64]	; 0x40
  409190:	9224      	str	r2, [sp, #144]	; 0x90
  409192:	930b      	str	r3, [sp, #44]	; 0x2c
  409194:	9b19      	ldr	r3, [sp, #100]	; 0x64
  409196:	2b00      	cmp	r3, #0
  409198:	f2c0 80d9 	blt.w	40934e <_dtoa_r+0x3ae>
  40919c:	9a02      	ldr	r2, [sp, #8]
  40919e:	2a0e      	cmp	r2, #14
  4091a0:	f300 80d5 	bgt.w	40934e <_dtoa_r+0x3ae>
  4091a4:	4b2d      	ldr	r3, [pc, #180]	; (40925c <_dtoa_r+0x2bc>)
  4091a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4091ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4091b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4091b4:	2b00      	cmp	r3, #0
  4091b6:	f2c0 83ba 	blt.w	40992e <_dtoa_r+0x98e>
  4091ba:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4091be:	4650      	mov	r0, sl
  4091c0:	462a      	mov	r2, r5
  4091c2:	4633      	mov	r3, r6
  4091c4:	4659      	mov	r1, fp
  4091c6:	f003 f93f 	bl	40c448 <__aeabi_ddiv>
  4091ca:	f003 fac3 	bl	40c754 <__aeabi_d2iz>
  4091ce:	4680      	mov	r8, r0
  4091d0:	f002 ffaa 	bl	40c128 <__aeabi_i2d>
  4091d4:	462a      	mov	r2, r5
  4091d6:	4633      	mov	r3, r6
  4091d8:	f003 f80c 	bl	40c1f4 <__aeabi_dmul>
  4091dc:	460b      	mov	r3, r1
  4091de:	4602      	mov	r2, r0
  4091e0:	4659      	mov	r1, fp
  4091e2:	4650      	mov	r0, sl
  4091e4:	f002 fe52 	bl	40be8c <__aeabi_dsub>
  4091e8:	9d04      	ldr	r5, [sp, #16]
  4091ea:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4091ee:	702b      	strb	r3, [r5, #0]
  4091f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4091f2:	2b01      	cmp	r3, #1
  4091f4:	4606      	mov	r6, r0
  4091f6:	460f      	mov	r7, r1
  4091f8:	f105 0501 	add.w	r5, r5, #1
  4091fc:	d068      	beq.n	4092d0 <_dtoa_r+0x330>
  4091fe:	2200      	movs	r2, #0
  409200:	4b18      	ldr	r3, [pc, #96]	; (409264 <_dtoa_r+0x2c4>)
  409202:	f002 fff7 	bl	40c1f4 <__aeabi_dmul>
  409206:	2200      	movs	r2, #0
  409208:	2300      	movs	r3, #0
  40920a:	4606      	mov	r6, r0
  40920c:	460f      	mov	r7, r1
  40920e:	f003 fa59 	bl	40c6c4 <__aeabi_dcmpeq>
  409212:	2800      	cmp	r0, #0
  409214:	f040 8088 	bne.w	409328 <_dtoa_r+0x388>
  409218:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40921c:	f04f 0a00 	mov.w	sl, #0
  409220:	f8df b040 	ldr.w	fp, [pc, #64]	; 409264 <_dtoa_r+0x2c4>
  409224:	940c      	str	r4, [sp, #48]	; 0x30
  409226:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40922a:	e028      	b.n	40927e <_dtoa_r+0x2de>
  40922c:	f3af 8000 	nop.w
  409230:	636f4361 	.word	0x636f4361
  409234:	3fd287a7 	.word	0x3fd287a7
  409238:	8b60c8b3 	.word	0x8b60c8b3
  40923c:	3fc68a28 	.word	0x3fc68a28
  409240:	509f79fb 	.word	0x509f79fb
  409244:	3fd34413 	.word	0x3fd34413
  409248:	7ff00000 	.word	0x7ff00000
  40924c:	0040da71 	.word	0x0040da71
  409250:	0040dab4 	.word	0x0040dab4
  409254:	0040dac0 	.word	0x0040dac0
  409258:	3ff80000 	.word	0x3ff80000
  40925c:	0040db00 	.word	0x0040db00
  409260:	0040da70 	.word	0x0040da70
  409264:	40240000 	.word	0x40240000
  409268:	f002 ffc4 	bl	40c1f4 <__aeabi_dmul>
  40926c:	2200      	movs	r2, #0
  40926e:	2300      	movs	r3, #0
  409270:	4606      	mov	r6, r0
  409272:	460f      	mov	r7, r1
  409274:	f003 fa26 	bl	40c6c4 <__aeabi_dcmpeq>
  409278:	2800      	cmp	r0, #0
  40927a:	f040 83c1 	bne.w	409a00 <_dtoa_r+0xa60>
  40927e:	4642      	mov	r2, r8
  409280:	464b      	mov	r3, r9
  409282:	4630      	mov	r0, r6
  409284:	4639      	mov	r1, r7
  409286:	f003 f8df 	bl	40c448 <__aeabi_ddiv>
  40928a:	f003 fa63 	bl	40c754 <__aeabi_d2iz>
  40928e:	4604      	mov	r4, r0
  409290:	f002 ff4a 	bl	40c128 <__aeabi_i2d>
  409294:	4642      	mov	r2, r8
  409296:	464b      	mov	r3, r9
  409298:	f002 ffac 	bl	40c1f4 <__aeabi_dmul>
  40929c:	4602      	mov	r2, r0
  40929e:	460b      	mov	r3, r1
  4092a0:	4630      	mov	r0, r6
  4092a2:	4639      	mov	r1, r7
  4092a4:	f002 fdf2 	bl	40be8c <__aeabi_dsub>
  4092a8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4092ac:	9e04      	ldr	r6, [sp, #16]
  4092ae:	f805 eb01 	strb.w	lr, [r5], #1
  4092b2:	eba5 0e06 	sub.w	lr, r5, r6
  4092b6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4092b8:	45b6      	cmp	lr, r6
  4092ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4092be:	4652      	mov	r2, sl
  4092c0:	465b      	mov	r3, fp
  4092c2:	d1d1      	bne.n	409268 <_dtoa_r+0x2c8>
  4092c4:	46a0      	mov	r8, r4
  4092c6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4092ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4092cc:	4606      	mov	r6, r0
  4092ce:	460f      	mov	r7, r1
  4092d0:	4632      	mov	r2, r6
  4092d2:	463b      	mov	r3, r7
  4092d4:	4630      	mov	r0, r6
  4092d6:	4639      	mov	r1, r7
  4092d8:	f002 fdda 	bl	40be90 <__adddf3>
  4092dc:	4606      	mov	r6, r0
  4092de:	460f      	mov	r7, r1
  4092e0:	4602      	mov	r2, r0
  4092e2:	460b      	mov	r3, r1
  4092e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4092e8:	f003 f9f6 	bl	40c6d8 <__aeabi_dcmplt>
  4092ec:	b948      	cbnz	r0, 409302 <_dtoa_r+0x362>
  4092ee:	4632      	mov	r2, r6
  4092f0:	463b      	mov	r3, r7
  4092f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4092f6:	f003 f9e5 	bl	40c6c4 <__aeabi_dcmpeq>
  4092fa:	b1a8      	cbz	r0, 409328 <_dtoa_r+0x388>
  4092fc:	f018 0f01 	tst.w	r8, #1
  409300:	d012      	beq.n	409328 <_dtoa_r+0x388>
  409302:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409306:	9a04      	ldr	r2, [sp, #16]
  409308:	1e6b      	subs	r3, r5, #1
  40930a:	e004      	b.n	409316 <_dtoa_r+0x376>
  40930c:	429a      	cmp	r2, r3
  40930e:	f000 8401 	beq.w	409b14 <_dtoa_r+0xb74>
  409312:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  409316:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40931a:	f103 0501 	add.w	r5, r3, #1
  40931e:	d0f5      	beq.n	40930c <_dtoa_r+0x36c>
  409320:	f108 0801 	add.w	r8, r8, #1
  409324:	f883 8000 	strb.w	r8, [r3]
  409328:	4649      	mov	r1, r9
  40932a:	4620      	mov	r0, r4
  40932c:	f001 fe5e 	bl	40afec <_Bfree>
  409330:	2200      	movs	r2, #0
  409332:	9b02      	ldr	r3, [sp, #8]
  409334:	702a      	strb	r2, [r5, #0]
  409336:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409338:	3301      	adds	r3, #1
  40933a:	6013      	str	r3, [r2, #0]
  40933c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40933e:	2b00      	cmp	r3, #0
  409340:	f000 839e 	beq.w	409a80 <_dtoa_r+0xae0>
  409344:	9804      	ldr	r0, [sp, #16]
  409346:	601d      	str	r5, [r3, #0]
  409348:	b01b      	add	sp, #108	; 0x6c
  40934a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40934e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409350:	2a00      	cmp	r2, #0
  409352:	d03e      	beq.n	4093d2 <_dtoa_r+0x432>
  409354:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409356:	2a01      	cmp	r2, #1
  409358:	f340 8311 	ble.w	40997e <_dtoa_r+0x9de>
  40935c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40935e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409360:	1e5f      	subs	r7, r3, #1
  409362:	42ba      	cmp	r2, r7
  409364:	f2c0 838f 	blt.w	409a86 <_dtoa_r+0xae6>
  409368:	1bd7      	subs	r7, r2, r7
  40936a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40936c:	2b00      	cmp	r3, #0
  40936e:	f2c0 848b 	blt.w	409c88 <_dtoa_r+0xce8>
  409372:	9d08      	ldr	r5, [sp, #32]
  409374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409376:	9a08      	ldr	r2, [sp, #32]
  409378:	441a      	add	r2, r3
  40937a:	9208      	str	r2, [sp, #32]
  40937c:	9a06      	ldr	r2, [sp, #24]
  40937e:	2101      	movs	r1, #1
  409380:	441a      	add	r2, r3
  409382:	4620      	mov	r0, r4
  409384:	9206      	str	r2, [sp, #24]
  409386:	f001 fecb 	bl	40b120 <__i2b>
  40938a:	4606      	mov	r6, r0
  40938c:	e024      	b.n	4093d8 <_dtoa_r+0x438>
  40938e:	2301      	movs	r3, #1
  409390:	930e      	str	r3, [sp, #56]	; 0x38
  409392:	e6af      	b.n	4090f4 <_dtoa_r+0x154>
  409394:	9a08      	ldr	r2, [sp, #32]
  409396:	9b02      	ldr	r3, [sp, #8]
  409398:	1ad2      	subs	r2, r2, r3
  40939a:	425b      	negs	r3, r3
  40939c:	930c      	str	r3, [sp, #48]	; 0x30
  40939e:	2300      	movs	r3, #0
  4093a0:	9208      	str	r2, [sp, #32]
  4093a2:	930d      	str	r3, [sp, #52]	; 0x34
  4093a4:	e6b8      	b.n	409118 <_dtoa_r+0x178>
  4093a6:	f1c7 0301 	rsb	r3, r7, #1
  4093aa:	9308      	str	r3, [sp, #32]
  4093ac:	2300      	movs	r3, #0
  4093ae:	9306      	str	r3, [sp, #24]
  4093b0:	e6a7      	b.n	409102 <_dtoa_r+0x162>
  4093b2:	9d02      	ldr	r5, [sp, #8]
  4093b4:	4628      	mov	r0, r5
  4093b6:	f002 feb7 	bl	40c128 <__aeabi_i2d>
  4093ba:	4602      	mov	r2, r0
  4093bc:	460b      	mov	r3, r1
  4093be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4093c2:	f003 f97f 	bl	40c6c4 <__aeabi_dcmpeq>
  4093c6:	2800      	cmp	r0, #0
  4093c8:	f47f ae80 	bne.w	4090cc <_dtoa_r+0x12c>
  4093cc:	1e6b      	subs	r3, r5, #1
  4093ce:	9302      	str	r3, [sp, #8]
  4093d0:	e67c      	b.n	4090cc <_dtoa_r+0x12c>
  4093d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4093d4:	9d08      	ldr	r5, [sp, #32]
  4093d6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4093d8:	2d00      	cmp	r5, #0
  4093da:	dd0c      	ble.n	4093f6 <_dtoa_r+0x456>
  4093dc:	9906      	ldr	r1, [sp, #24]
  4093de:	2900      	cmp	r1, #0
  4093e0:	460b      	mov	r3, r1
  4093e2:	dd08      	ble.n	4093f6 <_dtoa_r+0x456>
  4093e4:	42a9      	cmp	r1, r5
  4093e6:	9a08      	ldr	r2, [sp, #32]
  4093e8:	bfa8      	it	ge
  4093ea:	462b      	movge	r3, r5
  4093ec:	1ad2      	subs	r2, r2, r3
  4093ee:	1aed      	subs	r5, r5, r3
  4093f0:	1acb      	subs	r3, r1, r3
  4093f2:	9208      	str	r2, [sp, #32]
  4093f4:	9306      	str	r3, [sp, #24]
  4093f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4093f8:	b1d3      	cbz	r3, 409430 <_dtoa_r+0x490>
  4093fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4093fc:	2b00      	cmp	r3, #0
  4093fe:	f000 82b7 	beq.w	409970 <_dtoa_r+0x9d0>
  409402:	2f00      	cmp	r7, #0
  409404:	dd10      	ble.n	409428 <_dtoa_r+0x488>
  409406:	4631      	mov	r1, r6
  409408:	463a      	mov	r2, r7
  40940a:	4620      	mov	r0, r4
  40940c:	f001 ff24 	bl	40b258 <__pow5mult>
  409410:	464a      	mov	r2, r9
  409412:	4601      	mov	r1, r0
  409414:	4606      	mov	r6, r0
  409416:	4620      	mov	r0, r4
  409418:	f001 fe8c 	bl	40b134 <__multiply>
  40941c:	4649      	mov	r1, r9
  40941e:	4680      	mov	r8, r0
  409420:	4620      	mov	r0, r4
  409422:	f001 fde3 	bl	40afec <_Bfree>
  409426:	46c1      	mov	r9, r8
  409428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40942a:	1bda      	subs	r2, r3, r7
  40942c:	f040 82a1 	bne.w	409972 <_dtoa_r+0x9d2>
  409430:	2101      	movs	r1, #1
  409432:	4620      	mov	r0, r4
  409434:	f001 fe74 	bl	40b120 <__i2b>
  409438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40943a:	2b00      	cmp	r3, #0
  40943c:	4680      	mov	r8, r0
  40943e:	dd1c      	ble.n	40947a <_dtoa_r+0x4da>
  409440:	4601      	mov	r1, r0
  409442:	461a      	mov	r2, r3
  409444:	4620      	mov	r0, r4
  409446:	f001 ff07 	bl	40b258 <__pow5mult>
  40944a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40944c:	2b01      	cmp	r3, #1
  40944e:	4680      	mov	r8, r0
  409450:	f340 8254 	ble.w	4098fc <_dtoa_r+0x95c>
  409454:	2300      	movs	r3, #0
  409456:	930c      	str	r3, [sp, #48]	; 0x30
  409458:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40945c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  409460:	6918      	ldr	r0, [r3, #16]
  409462:	f001 fe0d 	bl	40b080 <__hi0bits>
  409466:	f1c0 0020 	rsb	r0, r0, #32
  40946a:	e010      	b.n	40948e <_dtoa_r+0x4ee>
  40946c:	f1c3 0520 	rsb	r5, r3, #32
  409470:	fa0a f005 	lsl.w	r0, sl, r5
  409474:	e674      	b.n	409160 <_dtoa_r+0x1c0>
  409476:	900e      	str	r0, [sp, #56]	; 0x38
  409478:	e63c      	b.n	4090f4 <_dtoa_r+0x154>
  40947a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40947c:	2b01      	cmp	r3, #1
  40947e:	f340 8287 	ble.w	409990 <_dtoa_r+0x9f0>
  409482:	2300      	movs	r3, #0
  409484:	930c      	str	r3, [sp, #48]	; 0x30
  409486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409488:	2001      	movs	r0, #1
  40948a:	2b00      	cmp	r3, #0
  40948c:	d1e4      	bne.n	409458 <_dtoa_r+0x4b8>
  40948e:	9a06      	ldr	r2, [sp, #24]
  409490:	4410      	add	r0, r2
  409492:	f010 001f 	ands.w	r0, r0, #31
  409496:	f000 80a1 	beq.w	4095dc <_dtoa_r+0x63c>
  40949a:	f1c0 0320 	rsb	r3, r0, #32
  40949e:	2b04      	cmp	r3, #4
  4094a0:	f340 849e 	ble.w	409de0 <_dtoa_r+0xe40>
  4094a4:	9b08      	ldr	r3, [sp, #32]
  4094a6:	f1c0 001c 	rsb	r0, r0, #28
  4094aa:	4403      	add	r3, r0
  4094ac:	9308      	str	r3, [sp, #32]
  4094ae:	4613      	mov	r3, r2
  4094b0:	4403      	add	r3, r0
  4094b2:	4405      	add	r5, r0
  4094b4:	9306      	str	r3, [sp, #24]
  4094b6:	9b08      	ldr	r3, [sp, #32]
  4094b8:	2b00      	cmp	r3, #0
  4094ba:	dd05      	ble.n	4094c8 <_dtoa_r+0x528>
  4094bc:	4649      	mov	r1, r9
  4094be:	461a      	mov	r2, r3
  4094c0:	4620      	mov	r0, r4
  4094c2:	f001 ff19 	bl	40b2f8 <__lshift>
  4094c6:	4681      	mov	r9, r0
  4094c8:	9b06      	ldr	r3, [sp, #24]
  4094ca:	2b00      	cmp	r3, #0
  4094cc:	dd05      	ble.n	4094da <_dtoa_r+0x53a>
  4094ce:	4641      	mov	r1, r8
  4094d0:	461a      	mov	r2, r3
  4094d2:	4620      	mov	r0, r4
  4094d4:	f001 ff10 	bl	40b2f8 <__lshift>
  4094d8:	4680      	mov	r8, r0
  4094da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4094dc:	2b00      	cmp	r3, #0
  4094de:	f040 8086 	bne.w	4095ee <_dtoa_r+0x64e>
  4094e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4094e4:	2b00      	cmp	r3, #0
  4094e6:	f340 8266 	ble.w	4099b6 <_dtoa_r+0xa16>
  4094ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4094ec:	2b00      	cmp	r3, #0
  4094ee:	f000 8098 	beq.w	409622 <_dtoa_r+0x682>
  4094f2:	2d00      	cmp	r5, #0
  4094f4:	dd05      	ble.n	409502 <_dtoa_r+0x562>
  4094f6:	4631      	mov	r1, r6
  4094f8:	462a      	mov	r2, r5
  4094fa:	4620      	mov	r0, r4
  4094fc:	f001 fefc 	bl	40b2f8 <__lshift>
  409500:	4606      	mov	r6, r0
  409502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409504:	2b00      	cmp	r3, #0
  409506:	f040 8337 	bne.w	409b78 <_dtoa_r+0xbd8>
  40950a:	9606      	str	r6, [sp, #24]
  40950c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40950e:	9a04      	ldr	r2, [sp, #16]
  409510:	f8dd b018 	ldr.w	fp, [sp, #24]
  409514:	3b01      	subs	r3, #1
  409516:	18d3      	adds	r3, r2, r3
  409518:	930b      	str	r3, [sp, #44]	; 0x2c
  40951a:	f00a 0301 	and.w	r3, sl, #1
  40951e:	930c      	str	r3, [sp, #48]	; 0x30
  409520:	4617      	mov	r7, r2
  409522:	46c2      	mov	sl, r8
  409524:	4651      	mov	r1, sl
  409526:	4648      	mov	r0, r9
  409528:	f7ff fca4 	bl	408e74 <quorem>
  40952c:	4631      	mov	r1, r6
  40952e:	4605      	mov	r5, r0
  409530:	4648      	mov	r0, r9
  409532:	f001 ff33 	bl	40b39c <__mcmp>
  409536:	465a      	mov	r2, fp
  409538:	900a      	str	r0, [sp, #40]	; 0x28
  40953a:	4651      	mov	r1, sl
  40953c:	4620      	mov	r0, r4
  40953e:	f001 ff49 	bl	40b3d4 <__mdiff>
  409542:	68c2      	ldr	r2, [r0, #12]
  409544:	4680      	mov	r8, r0
  409546:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40954a:	2a00      	cmp	r2, #0
  40954c:	f040 822b 	bne.w	4099a6 <_dtoa_r+0xa06>
  409550:	4601      	mov	r1, r0
  409552:	4648      	mov	r0, r9
  409554:	9308      	str	r3, [sp, #32]
  409556:	f001 ff21 	bl	40b39c <__mcmp>
  40955a:	4641      	mov	r1, r8
  40955c:	9006      	str	r0, [sp, #24]
  40955e:	4620      	mov	r0, r4
  409560:	f001 fd44 	bl	40afec <_Bfree>
  409564:	9a06      	ldr	r2, [sp, #24]
  409566:	9b08      	ldr	r3, [sp, #32]
  409568:	b932      	cbnz	r2, 409578 <_dtoa_r+0x5d8>
  40956a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40956c:	b921      	cbnz	r1, 409578 <_dtoa_r+0x5d8>
  40956e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409570:	2a00      	cmp	r2, #0
  409572:	f000 83ef 	beq.w	409d54 <_dtoa_r+0xdb4>
  409576:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409578:	990a      	ldr	r1, [sp, #40]	; 0x28
  40957a:	2900      	cmp	r1, #0
  40957c:	f2c0 829f 	blt.w	409abe <_dtoa_r+0xb1e>
  409580:	d105      	bne.n	40958e <_dtoa_r+0x5ee>
  409582:	9924      	ldr	r1, [sp, #144]	; 0x90
  409584:	b919      	cbnz	r1, 40958e <_dtoa_r+0x5ee>
  409586:	990c      	ldr	r1, [sp, #48]	; 0x30
  409588:	2900      	cmp	r1, #0
  40958a:	f000 8298 	beq.w	409abe <_dtoa_r+0xb1e>
  40958e:	2a00      	cmp	r2, #0
  409590:	f300 8306 	bgt.w	409ba0 <_dtoa_r+0xc00>
  409594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409596:	703b      	strb	r3, [r7, #0]
  409598:	f107 0801 	add.w	r8, r7, #1
  40959c:	4297      	cmp	r7, r2
  40959e:	4645      	mov	r5, r8
  4095a0:	f000 830c 	beq.w	409bbc <_dtoa_r+0xc1c>
  4095a4:	4649      	mov	r1, r9
  4095a6:	2300      	movs	r3, #0
  4095a8:	220a      	movs	r2, #10
  4095aa:	4620      	mov	r0, r4
  4095ac:	f001 fd28 	bl	40b000 <__multadd>
  4095b0:	455e      	cmp	r6, fp
  4095b2:	4681      	mov	r9, r0
  4095b4:	4631      	mov	r1, r6
  4095b6:	f04f 0300 	mov.w	r3, #0
  4095ba:	f04f 020a 	mov.w	r2, #10
  4095be:	4620      	mov	r0, r4
  4095c0:	f000 81eb 	beq.w	40999a <_dtoa_r+0x9fa>
  4095c4:	f001 fd1c 	bl	40b000 <__multadd>
  4095c8:	4659      	mov	r1, fp
  4095ca:	4606      	mov	r6, r0
  4095cc:	2300      	movs	r3, #0
  4095ce:	220a      	movs	r2, #10
  4095d0:	4620      	mov	r0, r4
  4095d2:	f001 fd15 	bl	40b000 <__multadd>
  4095d6:	4647      	mov	r7, r8
  4095d8:	4683      	mov	fp, r0
  4095da:	e7a3      	b.n	409524 <_dtoa_r+0x584>
  4095dc:	201c      	movs	r0, #28
  4095de:	9b08      	ldr	r3, [sp, #32]
  4095e0:	4403      	add	r3, r0
  4095e2:	9308      	str	r3, [sp, #32]
  4095e4:	9b06      	ldr	r3, [sp, #24]
  4095e6:	4403      	add	r3, r0
  4095e8:	4405      	add	r5, r0
  4095ea:	9306      	str	r3, [sp, #24]
  4095ec:	e763      	b.n	4094b6 <_dtoa_r+0x516>
  4095ee:	4641      	mov	r1, r8
  4095f0:	4648      	mov	r0, r9
  4095f2:	f001 fed3 	bl	40b39c <__mcmp>
  4095f6:	2800      	cmp	r0, #0
  4095f8:	f6bf af73 	bge.w	4094e2 <_dtoa_r+0x542>
  4095fc:	9f02      	ldr	r7, [sp, #8]
  4095fe:	4649      	mov	r1, r9
  409600:	2300      	movs	r3, #0
  409602:	220a      	movs	r2, #10
  409604:	4620      	mov	r0, r4
  409606:	3f01      	subs	r7, #1
  409608:	9702      	str	r7, [sp, #8]
  40960a:	f001 fcf9 	bl	40b000 <__multadd>
  40960e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409610:	4681      	mov	r9, r0
  409612:	2b00      	cmp	r3, #0
  409614:	f040 83b6 	bne.w	409d84 <_dtoa_r+0xde4>
  409618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40961a:	2b00      	cmp	r3, #0
  40961c:	f340 83bf 	ble.w	409d9e <_dtoa_r+0xdfe>
  409620:	930a      	str	r3, [sp, #40]	; 0x28
  409622:	f8dd b010 	ldr.w	fp, [sp, #16]
  409626:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409628:	465d      	mov	r5, fp
  40962a:	e002      	b.n	409632 <_dtoa_r+0x692>
  40962c:	f001 fce8 	bl	40b000 <__multadd>
  409630:	4681      	mov	r9, r0
  409632:	4641      	mov	r1, r8
  409634:	4648      	mov	r0, r9
  409636:	f7ff fc1d 	bl	408e74 <quorem>
  40963a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40963e:	f805 ab01 	strb.w	sl, [r5], #1
  409642:	eba5 030b 	sub.w	r3, r5, fp
  409646:	42bb      	cmp	r3, r7
  409648:	f04f 020a 	mov.w	r2, #10
  40964c:	f04f 0300 	mov.w	r3, #0
  409650:	4649      	mov	r1, r9
  409652:	4620      	mov	r0, r4
  409654:	dbea      	blt.n	40962c <_dtoa_r+0x68c>
  409656:	9b04      	ldr	r3, [sp, #16]
  409658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40965a:	2a01      	cmp	r2, #1
  40965c:	bfac      	ite	ge
  40965e:	189b      	addge	r3, r3, r2
  409660:	3301      	addlt	r3, #1
  409662:	461d      	mov	r5, r3
  409664:	f04f 0b00 	mov.w	fp, #0
  409668:	4649      	mov	r1, r9
  40966a:	2201      	movs	r2, #1
  40966c:	4620      	mov	r0, r4
  40966e:	f001 fe43 	bl	40b2f8 <__lshift>
  409672:	4641      	mov	r1, r8
  409674:	4681      	mov	r9, r0
  409676:	f001 fe91 	bl	40b39c <__mcmp>
  40967a:	2800      	cmp	r0, #0
  40967c:	f340 823d 	ble.w	409afa <_dtoa_r+0xb5a>
  409680:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  409684:	9904      	ldr	r1, [sp, #16]
  409686:	1e6b      	subs	r3, r5, #1
  409688:	e004      	b.n	409694 <_dtoa_r+0x6f4>
  40968a:	428b      	cmp	r3, r1
  40968c:	f000 81ae 	beq.w	4099ec <_dtoa_r+0xa4c>
  409690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  409694:	2a39      	cmp	r2, #57	; 0x39
  409696:	f103 0501 	add.w	r5, r3, #1
  40969a:	d0f6      	beq.n	40968a <_dtoa_r+0x6ea>
  40969c:	3201      	adds	r2, #1
  40969e:	701a      	strb	r2, [r3, #0]
  4096a0:	4641      	mov	r1, r8
  4096a2:	4620      	mov	r0, r4
  4096a4:	f001 fca2 	bl	40afec <_Bfree>
  4096a8:	2e00      	cmp	r6, #0
  4096aa:	f43f ae3d 	beq.w	409328 <_dtoa_r+0x388>
  4096ae:	f1bb 0f00 	cmp.w	fp, #0
  4096b2:	d005      	beq.n	4096c0 <_dtoa_r+0x720>
  4096b4:	45b3      	cmp	fp, r6
  4096b6:	d003      	beq.n	4096c0 <_dtoa_r+0x720>
  4096b8:	4659      	mov	r1, fp
  4096ba:	4620      	mov	r0, r4
  4096bc:	f001 fc96 	bl	40afec <_Bfree>
  4096c0:	4631      	mov	r1, r6
  4096c2:	4620      	mov	r0, r4
  4096c4:	f001 fc92 	bl	40afec <_Bfree>
  4096c8:	e62e      	b.n	409328 <_dtoa_r+0x388>
  4096ca:	2300      	movs	r3, #0
  4096cc:	930b      	str	r3, [sp, #44]	; 0x2c
  4096ce:	9b02      	ldr	r3, [sp, #8]
  4096d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4096d2:	4413      	add	r3, r2
  4096d4:	930f      	str	r3, [sp, #60]	; 0x3c
  4096d6:	3301      	adds	r3, #1
  4096d8:	2b01      	cmp	r3, #1
  4096da:	461f      	mov	r7, r3
  4096dc:	461e      	mov	r6, r3
  4096de:	930a      	str	r3, [sp, #40]	; 0x28
  4096e0:	bfb8      	it	lt
  4096e2:	2701      	movlt	r7, #1
  4096e4:	2100      	movs	r1, #0
  4096e6:	2f17      	cmp	r7, #23
  4096e8:	6461      	str	r1, [r4, #68]	; 0x44
  4096ea:	d90a      	bls.n	409702 <_dtoa_r+0x762>
  4096ec:	2201      	movs	r2, #1
  4096ee:	2304      	movs	r3, #4
  4096f0:	005b      	lsls	r3, r3, #1
  4096f2:	f103 0014 	add.w	r0, r3, #20
  4096f6:	4287      	cmp	r7, r0
  4096f8:	4611      	mov	r1, r2
  4096fa:	f102 0201 	add.w	r2, r2, #1
  4096fe:	d2f7      	bcs.n	4096f0 <_dtoa_r+0x750>
  409700:	6461      	str	r1, [r4, #68]	; 0x44
  409702:	4620      	mov	r0, r4
  409704:	f001 fc4c 	bl	40afa0 <_Balloc>
  409708:	2e0e      	cmp	r6, #14
  40970a:	9004      	str	r0, [sp, #16]
  40970c:	6420      	str	r0, [r4, #64]	; 0x40
  40970e:	f63f ad41 	bhi.w	409194 <_dtoa_r+0x1f4>
  409712:	2d00      	cmp	r5, #0
  409714:	f43f ad3e 	beq.w	409194 <_dtoa_r+0x1f4>
  409718:	9902      	ldr	r1, [sp, #8]
  40971a:	2900      	cmp	r1, #0
  40971c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  409720:	f340 8202 	ble.w	409b28 <_dtoa_r+0xb88>
  409724:	4bb8      	ldr	r3, [pc, #736]	; (409a08 <_dtoa_r+0xa68>)
  409726:	f001 020f 	and.w	r2, r1, #15
  40972a:	110d      	asrs	r5, r1, #4
  40972c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409730:	06e9      	lsls	r1, r5, #27
  409732:	e9d3 6700 	ldrd	r6, r7, [r3]
  409736:	f140 81ae 	bpl.w	409a96 <_dtoa_r+0xaf6>
  40973a:	4bb4      	ldr	r3, [pc, #720]	; (409a0c <_dtoa_r+0xa6c>)
  40973c:	4650      	mov	r0, sl
  40973e:	4659      	mov	r1, fp
  409740:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  409744:	f002 fe80 	bl	40c448 <__aeabi_ddiv>
  409748:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40974c:	f005 050f 	and.w	r5, r5, #15
  409750:	f04f 0a03 	mov.w	sl, #3
  409754:	b18d      	cbz	r5, 40977a <_dtoa_r+0x7da>
  409756:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 409a0c <_dtoa_r+0xa6c>
  40975a:	07ea      	lsls	r2, r5, #31
  40975c:	d509      	bpl.n	409772 <_dtoa_r+0x7d2>
  40975e:	4630      	mov	r0, r6
  409760:	4639      	mov	r1, r7
  409762:	e9d8 2300 	ldrd	r2, r3, [r8]
  409766:	f002 fd45 	bl	40c1f4 <__aeabi_dmul>
  40976a:	f10a 0a01 	add.w	sl, sl, #1
  40976e:	4606      	mov	r6, r0
  409770:	460f      	mov	r7, r1
  409772:	106d      	asrs	r5, r5, #1
  409774:	f108 0808 	add.w	r8, r8, #8
  409778:	d1ef      	bne.n	40975a <_dtoa_r+0x7ba>
  40977a:	463b      	mov	r3, r7
  40977c:	4632      	mov	r2, r6
  40977e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  409782:	f002 fe61 	bl	40c448 <__aeabi_ddiv>
  409786:	4607      	mov	r7, r0
  409788:	4688      	mov	r8, r1
  40978a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40978c:	b143      	cbz	r3, 4097a0 <_dtoa_r+0x800>
  40978e:	2200      	movs	r2, #0
  409790:	4b9f      	ldr	r3, [pc, #636]	; (409a10 <_dtoa_r+0xa70>)
  409792:	4638      	mov	r0, r7
  409794:	4641      	mov	r1, r8
  409796:	f002 ff9f 	bl	40c6d8 <__aeabi_dcmplt>
  40979a:	2800      	cmp	r0, #0
  40979c:	f040 8286 	bne.w	409cac <_dtoa_r+0xd0c>
  4097a0:	4650      	mov	r0, sl
  4097a2:	f002 fcc1 	bl	40c128 <__aeabi_i2d>
  4097a6:	463a      	mov	r2, r7
  4097a8:	4643      	mov	r3, r8
  4097aa:	f002 fd23 	bl	40c1f4 <__aeabi_dmul>
  4097ae:	4b99      	ldr	r3, [pc, #612]	; (409a14 <_dtoa_r+0xa74>)
  4097b0:	2200      	movs	r2, #0
  4097b2:	f002 fb6d 	bl	40be90 <__adddf3>
  4097b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4097b8:	4605      	mov	r5, r0
  4097ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4097be:	2b00      	cmp	r3, #0
  4097c0:	f000 813e 	beq.w	409a40 <_dtoa_r+0xaa0>
  4097c4:	9b02      	ldr	r3, [sp, #8]
  4097c6:	9315      	str	r3, [sp, #84]	; 0x54
  4097c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4097ca:	9312      	str	r3, [sp, #72]	; 0x48
  4097cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4097ce:	2b00      	cmp	r3, #0
  4097d0:	f000 81fa 	beq.w	409bc8 <_dtoa_r+0xc28>
  4097d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4097d6:	4b8c      	ldr	r3, [pc, #560]	; (409a08 <_dtoa_r+0xa68>)
  4097d8:	498f      	ldr	r1, [pc, #572]	; (409a18 <_dtoa_r+0xa78>)
  4097da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4097de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4097e2:	2000      	movs	r0, #0
  4097e4:	f002 fe30 	bl	40c448 <__aeabi_ddiv>
  4097e8:	462a      	mov	r2, r5
  4097ea:	4633      	mov	r3, r6
  4097ec:	f002 fb4e 	bl	40be8c <__aeabi_dsub>
  4097f0:	4682      	mov	sl, r0
  4097f2:	468b      	mov	fp, r1
  4097f4:	4638      	mov	r0, r7
  4097f6:	4641      	mov	r1, r8
  4097f8:	f002 ffac 	bl	40c754 <__aeabi_d2iz>
  4097fc:	4605      	mov	r5, r0
  4097fe:	f002 fc93 	bl	40c128 <__aeabi_i2d>
  409802:	4602      	mov	r2, r0
  409804:	460b      	mov	r3, r1
  409806:	4638      	mov	r0, r7
  409808:	4641      	mov	r1, r8
  40980a:	f002 fb3f 	bl	40be8c <__aeabi_dsub>
  40980e:	3530      	adds	r5, #48	; 0x30
  409810:	fa5f f885 	uxtb.w	r8, r5
  409814:	9d04      	ldr	r5, [sp, #16]
  409816:	4606      	mov	r6, r0
  409818:	460f      	mov	r7, r1
  40981a:	f885 8000 	strb.w	r8, [r5]
  40981e:	4602      	mov	r2, r0
  409820:	460b      	mov	r3, r1
  409822:	4650      	mov	r0, sl
  409824:	4659      	mov	r1, fp
  409826:	3501      	adds	r5, #1
  409828:	f002 ff74 	bl	40c714 <__aeabi_dcmpgt>
  40982c:	2800      	cmp	r0, #0
  40982e:	d154      	bne.n	4098da <_dtoa_r+0x93a>
  409830:	4632      	mov	r2, r6
  409832:	463b      	mov	r3, r7
  409834:	2000      	movs	r0, #0
  409836:	4976      	ldr	r1, [pc, #472]	; (409a10 <_dtoa_r+0xa70>)
  409838:	f002 fb28 	bl	40be8c <__aeabi_dsub>
  40983c:	4602      	mov	r2, r0
  40983e:	460b      	mov	r3, r1
  409840:	4650      	mov	r0, sl
  409842:	4659      	mov	r1, fp
  409844:	f002 ff66 	bl	40c714 <__aeabi_dcmpgt>
  409848:	2800      	cmp	r0, #0
  40984a:	f040 8270 	bne.w	409d2e <_dtoa_r+0xd8e>
  40984e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409850:	2a01      	cmp	r2, #1
  409852:	f000 8111 	beq.w	409a78 <_dtoa_r+0xad8>
  409856:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409858:	9a04      	ldr	r2, [sp, #16]
  40985a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40985e:	4413      	add	r3, r2
  409860:	4699      	mov	r9, r3
  409862:	e00d      	b.n	409880 <_dtoa_r+0x8e0>
  409864:	2000      	movs	r0, #0
  409866:	496a      	ldr	r1, [pc, #424]	; (409a10 <_dtoa_r+0xa70>)
  409868:	f002 fb10 	bl	40be8c <__aeabi_dsub>
  40986c:	4652      	mov	r2, sl
  40986e:	465b      	mov	r3, fp
  409870:	f002 ff32 	bl	40c6d8 <__aeabi_dcmplt>
  409874:	2800      	cmp	r0, #0
  409876:	f040 8258 	bne.w	409d2a <_dtoa_r+0xd8a>
  40987a:	454d      	cmp	r5, r9
  40987c:	f000 80fa 	beq.w	409a74 <_dtoa_r+0xad4>
  409880:	4650      	mov	r0, sl
  409882:	4659      	mov	r1, fp
  409884:	2200      	movs	r2, #0
  409886:	4b65      	ldr	r3, [pc, #404]	; (409a1c <_dtoa_r+0xa7c>)
  409888:	f002 fcb4 	bl	40c1f4 <__aeabi_dmul>
  40988c:	2200      	movs	r2, #0
  40988e:	4b63      	ldr	r3, [pc, #396]	; (409a1c <_dtoa_r+0xa7c>)
  409890:	4682      	mov	sl, r0
  409892:	468b      	mov	fp, r1
  409894:	4630      	mov	r0, r6
  409896:	4639      	mov	r1, r7
  409898:	f002 fcac 	bl	40c1f4 <__aeabi_dmul>
  40989c:	460f      	mov	r7, r1
  40989e:	4606      	mov	r6, r0
  4098a0:	f002 ff58 	bl	40c754 <__aeabi_d2iz>
  4098a4:	4680      	mov	r8, r0
  4098a6:	f002 fc3f 	bl	40c128 <__aeabi_i2d>
  4098aa:	4602      	mov	r2, r0
  4098ac:	460b      	mov	r3, r1
  4098ae:	4630      	mov	r0, r6
  4098b0:	4639      	mov	r1, r7
  4098b2:	f002 faeb 	bl	40be8c <__aeabi_dsub>
  4098b6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4098ba:	fa5f f888 	uxtb.w	r8, r8
  4098be:	4652      	mov	r2, sl
  4098c0:	465b      	mov	r3, fp
  4098c2:	f805 8b01 	strb.w	r8, [r5], #1
  4098c6:	4606      	mov	r6, r0
  4098c8:	460f      	mov	r7, r1
  4098ca:	f002 ff05 	bl	40c6d8 <__aeabi_dcmplt>
  4098ce:	4632      	mov	r2, r6
  4098d0:	463b      	mov	r3, r7
  4098d2:	2800      	cmp	r0, #0
  4098d4:	d0c6      	beq.n	409864 <_dtoa_r+0x8c4>
  4098d6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4098da:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4098dc:	9302      	str	r3, [sp, #8]
  4098de:	e523      	b.n	409328 <_dtoa_r+0x388>
  4098e0:	2300      	movs	r3, #0
  4098e2:	930b      	str	r3, [sp, #44]	; 0x2c
  4098e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4098e6:	2b00      	cmp	r3, #0
  4098e8:	f340 80dc 	ble.w	409aa4 <_dtoa_r+0xb04>
  4098ec:	461f      	mov	r7, r3
  4098ee:	461e      	mov	r6, r3
  4098f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4098f2:	930a      	str	r3, [sp, #40]	; 0x28
  4098f4:	e6f6      	b.n	4096e4 <_dtoa_r+0x744>
  4098f6:	2301      	movs	r3, #1
  4098f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4098fa:	e7f3      	b.n	4098e4 <_dtoa_r+0x944>
  4098fc:	f1ba 0f00 	cmp.w	sl, #0
  409900:	f47f ada8 	bne.w	409454 <_dtoa_r+0x4b4>
  409904:	f3cb 0313 	ubfx	r3, fp, #0, #20
  409908:	2b00      	cmp	r3, #0
  40990a:	f47f adba 	bne.w	409482 <_dtoa_r+0x4e2>
  40990e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  409912:	0d3f      	lsrs	r7, r7, #20
  409914:	053f      	lsls	r7, r7, #20
  409916:	2f00      	cmp	r7, #0
  409918:	f000 820d 	beq.w	409d36 <_dtoa_r+0xd96>
  40991c:	9b08      	ldr	r3, [sp, #32]
  40991e:	3301      	adds	r3, #1
  409920:	9308      	str	r3, [sp, #32]
  409922:	9b06      	ldr	r3, [sp, #24]
  409924:	3301      	adds	r3, #1
  409926:	9306      	str	r3, [sp, #24]
  409928:	2301      	movs	r3, #1
  40992a:	930c      	str	r3, [sp, #48]	; 0x30
  40992c:	e5ab      	b.n	409486 <_dtoa_r+0x4e6>
  40992e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409930:	2b00      	cmp	r3, #0
  409932:	f73f ac42 	bgt.w	4091ba <_dtoa_r+0x21a>
  409936:	f040 8221 	bne.w	409d7c <_dtoa_r+0xddc>
  40993a:	2200      	movs	r2, #0
  40993c:	4b38      	ldr	r3, [pc, #224]	; (409a20 <_dtoa_r+0xa80>)
  40993e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409942:	f002 fc57 	bl	40c1f4 <__aeabi_dmul>
  409946:	4652      	mov	r2, sl
  409948:	465b      	mov	r3, fp
  40994a:	f002 fed9 	bl	40c700 <__aeabi_dcmpge>
  40994e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  409952:	4646      	mov	r6, r8
  409954:	2800      	cmp	r0, #0
  409956:	d041      	beq.n	4099dc <_dtoa_r+0xa3c>
  409958:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40995a:	9d04      	ldr	r5, [sp, #16]
  40995c:	43db      	mvns	r3, r3
  40995e:	9302      	str	r3, [sp, #8]
  409960:	4641      	mov	r1, r8
  409962:	4620      	mov	r0, r4
  409964:	f001 fb42 	bl	40afec <_Bfree>
  409968:	2e00      	cmp	r6, #0
  40996a:	f43f acdd 	beq.w	409328 <_dtoa_r+0x388>
  40996e:	e6a7      	b.n	4096c0 <_dtoa_r+0x720>
  409970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409972:	4649      	mov	r1, r9
  409974:	4620      	mov	r0, r4
  409976:	f001 fc6f 	bl	40b258 <__pow5mult>
  40997a:	4681      	mov	r9, r0
  40997c:	e558      	b.n	409430 <_dtoa_r+0x490>
  40997e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  409980:	2a00      	cmp	r2, #0
  409982:	f000 8187 	beq.w	409c94 <_dtoa_r+0xcf4>
  409986:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40998a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40998c:	9d08      	ldr	r5, [sp, #32]
  40998e:	e4f2      	b.n	409376 <_dtoa_r+0x3d6>
  409990:	f1ba 0f00 	cmp.w	sl, #0
  409994:	f47f ad75 	bne.w	409482 <_dtoa_r+0x4e2>
  409998:	e7b4      	b.n	409904 <_dtoa_r+0x964>
  40999a:	f001 fb31 	bl	40b000 <__multadd>
  40999e:	4647      	mov	r7, r8
  4099a0:	4606      	mov	r6, r0
  4099a2:	4683      	mov	fp, r0
  4099a4:	e5be      	b.n	409524 <_dtoa_r+0x584>
  4099a6:	4601      	mov	r1, r0
  4099a8:	4620      	mov	r0, r4
  4099aa:	9306      	str	r3, [sp, #24]
  4099ac:	f001 fb1e 	bl	40afec <_Bfree>
  4099b0:	2201      	movs	r2, #1
  4099b2:	9b06      	ldr	r3, [sp, #24]
  4099b4:	e5e0      	b.n	409578 <_dtoa_r+0x5d8>
  4099b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4099b8:	2b02      	cmp	r3, #2
  4099ba:	f77f ad96 	ble.w	4094ea <_dtoa_r+0x54a>
  4099be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4099c0:	2b00      	cmp	r3, #0
  4099c2:	d1c9      	bne.n	409958 <_dtoa_r+0x9b8>
  4099c4:	4641      	mov	r1, r8
  4099c6:	2205      	movs	r2, #5
  4099c8:	4620      	mov	r0, r4
  4099ca:	f001 fb19 	bl	40b000 <__multadd>
  4099ce:	4601      	mov	r1, r0
  4099d0:	4680      	mov	r8, r0
  4099d2:	4648      	mov	r0, r9
  4099d4:	f001 fce2 	bl	40b39c <__mcmp>
  4099d8:	2800      	cmp	r0, #0
  4099da:	ddbd      	ble.n	409958 <_dtoa_r+0x9b8>
  4099dc:	9a02      	ldr	r2, [sp, #8]
  4099de:	9904      	ldr	r1, [sp, #16]
  4099e0:	2331      	movs	r3, #49	; 0x31
  4099e2:	3201      	adds	r2, #1
  4099e4:	9202      	str	r2, [sp, #8]
  4099e6:	700b      	strb	r3, [r1, #0]
  4099e8:	1c4d      	adds	r5, r1, #1
  4099ea:	e7b9      	b.n	409960 <_dtoa_r+0x9c0>
  4099ec:	9a02      	ldr	r2, [sp, #8]
  4099ee:	3201      	adds	r2, #1
  4099f0:	9202      	str	r2, [sp, #8]
  4099f2:	9a04      	ldr	r2, [sp, #16]
  4099f4:	2331      	movs	r3, #49	; 0x31
  4099f6:	7013      	strb	r3, [r2, #0]
  4099f8:	e652      	b.n	4096a0 <_dtoa_r+0x700>
  4099fa:	2301      	movs	r3, #1
  4099fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4099fe:	e666      	b.n	4096ce <_dtoa_r+0x72e>
  409a00:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  409a04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  409a06:	e48f      	b.n	409328 <_dtoa_r+0x388>
  409a08:	0040db00 	.word	0x0040db00
  409a0c:	0040dad8 	.word	0x0040dad8
  409a10:	3ff00000 	.word	0x3ff00000
  409a14:	401c0000 	.word	0x401c0000
  409a18:	3fe00000 	.word	0x3fe00000
  409a1c:	40240000 	.word	0x40240000
  409a20:	40140000 	.word	0x40140000
  409a24:	4650      	mov	r0, sl
  409a26:	f002 fb7f 	bl	40c128 <__aeabi_i2d>
  409a2a:	463a      	mov	r2, r7
  409a2c:	4643      	mov	r3, r8
  409a2e:	f002 fbe1 	bl	40c1f4 <__aeabi_dmul>
  409a32:	2200      	movs	r2, #0
  409a34:	4bc1      	ldr	r3, [pc, #772]	; (409d3c <_dtoa_r+0xd9c>)
  409a36:	f002 fa2b 	bl	40be90 <__adddf3>
  409a3a:	4605      	mov	r5, r0
  409a3c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409a40:	4641      	mov	r1, r8
  409a42:	2200      	movs	r2, #0
  409a44:	4bbe      	ldr	r3, [pc, #760]	; (409d40 <_dtoa_r+0xda0>)
  409a46:	4638      	mov	r0, r7
  409a48:	f002 fa20 	bl	40be8c <__aeabi_dsub>
  409a4c:	462a      	mov	r2, r5
  409a4e:	4633      	mov	r3, r6
  409a50:	4682      	mov	sl, r0
  409a52:	468b      	mov	fp, r1
  409a54:	f002 fe5e 	bl	40c714 <__aeabi_dcmpgt>
  409a58:	4680      	mov	r8, r0
  409a5a:	2800      	cmp	r0, #0
  409a5c:	f040 8110 	bne.w	409c80 <_dtoa_r+0xce0>
  409a60:	462a      	mov	r2, r5
  409a62:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  409a66:	4650      	mov	r0, sl
  409a68:	4659      	mov	r1, fp
  409a6a:	f002 fe35 	bl	40c6d8 <__aeabi_dcmplt>
  409a6e:	b118      	cbz	r0, 409a78 <_dtoa_r+0xad8>
  409a70:	4646      	mov	r6, r8
  409a72:	e771      	b.n	409958 <_dtoa_r+0x9b8>
  409a74:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409a78:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  409a7c:	f7ff bb8a 	b.w	409194 <_dtoa_r+0x1f4>
  409a80:	9804      	ldr	r0, [sp, #16]
  409a82:	f7ff babb 	b.w	408ffc <_dtoa_r+0x5c>
  409a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409a88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409a8a:	970c      	str	r7, [sp, #48]	; 0x30
  409a8c:	1afb      	subs	r3, r7, r3
  409a8e:	441a      	add	r2, r3
  409a90:	920d      	str	r2, [sp, #52]	; 0x34
  409a92:	2700      	movs	r7, #0
  409a94:	e469      	b.n	40936a <_dtoa_r+0x3ca>
  409a96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  409a9a:	f04f 0a02 	mov.w	sl, #2
  409a9e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  409aa2:	e657      	b.n	409754 <_dtoa_r+0x7b4>
  409aa4:	2100      	movs	r1, #0
  409aa6:	2301      	movs	r3, #1
  409aa8:	6461      	str	r1, [r4, #68]	; 0x44
  409aaa:	4620      	mov	r0, r4
  409aac:	9325      	str	r3, [sp, #148]	; 0x94
  409aae:	f001 fa77 	bl	40afa0 <_Balloc>
  409ab2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409ab4:	9004      	str	r0, [sp, #16]
  409ab6:	6420      	str	r0, [r4, #64]	; 0x40
  409ab8:	930a      	str	r3, [sp, #40]	; 0x28
  409aba:	930f      	str	r3, [sp, #60]	; 0x3c
  409abc:	e629      	b.n	409712 <_dtoa_r+0x772>
  409abe:	2a00      	cmp	r2, #0
  409ac0:	46d0      	mov	r8, sl
  409ac2:	f8cd b018 	str.w	fp, [sp, #24]
  409ac6:	469a      	mov	sl, r3
  409ac8:	dd11      	ble.n	409aee <_dtoa_r+0xb4e>
  409aca:	4649      	mov	r1, r9
  409acc:	2201      	movs	r2, #1
  409ace:	4620      	mov	r0, r4
  409ad0:	f001 fc12 	bl	40b2f8 <__lshift>
  409ad4:	4641      	mov	r1, r8
  409ad6:	4681      	mov	r9, r0
  409ad8:	f001 fc60 	bl	40b39c <__mcmp>
  409adc:	2800      	cmp	r0, #0
  409ade:	f340 8146 	ble.w	409d6e <_dtoa_r+0xdce>
  409ae2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  409ae6:	f000 8106 	beq.w	409cf6 <_dtoa_r+0xd56>
  409aea:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  409aee:	46b3      	mov	fp, r6
  409af0:	f887 a000 	strb.w	sl, [r7]
  409af4:	1c7d      	adds	r5, r7, #1
  409af6:	9e06      	ldr	r6, [sp, #24]
  409af8:	e5d2      	b.n	4096a0 <_dtoa_r+0x700>
  409afa:	d104      	bne.n	409b06 <_dtoa_r+0xb66>
  409afc:	f01a 0f01 	tst.w	sl, #1
  409b00:	d001      	beq.n	409b06 <_dtoa_r+0xb66>
  409b02:	e5bd      	b.n	409680 <_dtoa_r+0x6e0>
  409b04:	4615      	mov	r5, r2
  409b06:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409b0a:	2b30      	cmp	r3, #48	; 0x30
  409b0c:	f105 32ff 	add.w	r2, r5, #4294967295
  409b10:	d0f8      	beq.n	409b04 <_dtoa_r+0xb64>
  409b12:	e5c5      	b.n	4096a0 <_dtoa_r+0x700>
  409b14:	9904      	ldr	r1, [sp, #16]
  409b16:	2230      	movs	r2, #48	; 0x30
  409b18:	700a      	strb	r2, [r1, #0]
  409b1a:	9a02      	ldr	r2, [sp, #8]
  409b1c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409b20:	3201      	adds	r2, #1
  409b22:	9202      	str	r2, [sp, #8]
  409b24:	f7ff bbfc 	b.w	409320 <_dtoa_r+0x380>
  409b28:	f000 80bb 	beq.w	409ca2 <_dtoa_r+0xd02>
  409b2c:	9b02      	ldr	r3, [sp, #8]
  409b2e:	425d      	negs	r5, r3
  409b30:	4b84      	ldr	r3, [pc, #528]	; (409d44 <_dtoa_r+0xda4>)
  409b32:	f005 020f 	and.w	r2, r5, #15
  409b36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  409b3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  409b42:	f002 fb57 	bl	40c1f4 <__aeabi_dmul>
  409b46:	112d      	asrs	r5, r5, #4
  409b48:	4607      	mov	r7, r0
  409b4a:	4688      	mov	r8, r1
  409b4c:	f000 812c 	beq.w	409da8 <_dtoa_r+0xe08>
  409b50:	4e7d      	ldr	r6, [pc, #500]	; (409d48 <_dtoa_r+0xda8>)
  409b52:	f04f 0a02 	mov.w	sl, #2
  409b56:	07eb      	lsls	r3, r5, #31
  409b58:	d509      	bpl.n	409b6e <_dtoa_r+0xbce>
  409b5a:	4638      	mov	r0, r7
  409b5c:	4641      	mov	r1, r8
  409b5e:	e9d6 2300 	ldrd	r2, r3, [r6]
  409b62:	f002 fb47 	bl	40c1f4 <__aeabi_dmul>
  409b66:	f10a 0a01 	add.w	sl, sl, #1
  409b6a:	4607      	mov	r7, r0
  409b6c:	4688      	mov	r8, r1
  409b6e:	106d      	asrs	r5, r5, #1
  409b70:	f106 0608 	add.w	r6, r6, #8
  409b74:	d1ef      	bne.n	409b56 <_dtoa_r+0xbb6>
  409b76:	e608      	b.n	40978a <_dtoa_r+0x7ea>
  409b78:	6871      	ldr	r1, [r6, #4]
  409b7a:	4620      	mov	r0, r4
  409b7c:	f001 fa10 	bl	40afa0 <_Balloc>
  409b80:	6933      	ldr	r3, [r6, #16]
  409b82:	3302      	adds	r3, #2
  409b84:	009a      	lsls	r2, r3, #2
  409b86:	4605      	mov	r5, r0
  409b88:	f106 010c 	add.w	r1, r6, #12
  409b8c:	300c      	adds	r0, #12
  409b8e:	f7fc fd53 	bl	406638 <memcpy>
  409b92:	4629      	mov	r1, r5
  409b94:	2201      	movs	r2, #1
  409b96:	4620      	mov	r0, r4
  409b98:	f001 fbae 	bl	40b2f8 <__lshift>
  409b9c:	9006      	str	r0, [sp, #24]
  409b9e:	e4b5      	b.n	40950c <_dtoa_r+0x56c>
  409ba0:	2b39      	cmp	r3, #57	; 0x39
  409ba2:	f8cd b018 	str.w	fp, [sp, #24]
  409ba6:	46d0      	mov	r8, sl
  409ba8:	f000 80a5 	beq.w	409cf6 <_dtoa_r+0xd56>
  409bac:	f103 0a01 	add.w	sl, r3, #1
  409bb0:	46b3      	mov	fp, r6
  409bb2:	f887 a000 	strb.w	sl, [r7]
  409bb6:	1c7d      	adds	r5, r7, #1
  409bb8:	9e06      	ldr	r6, [sp, #24]
  409bba:	e571      	b.n	4096a0 <_dtoa_r+0x700>
  409bbc:	465a      	mov	r2, fp
  409bbe:	46d0      	mov	r8, sl
  409bc0:	46b3      	mov	fp, r6
  409bc2:	469a      	mov	sl, r3
  409bc4:	4616      	mov	r6, r2
  409bc6:	e54f      	b.n	409668 <_dtoa_r+0x6c8>
  409bc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409bca:	495e      	ldr	r1, [pc, #376]	; (409d44 <_dtoa_r+0xda4>)
  409bcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  409bd0:	462a      	mov	r2, r5
  409bd2:	4633      	mov	r3, r6
  409bd4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  409bd8:	f002 fb0c 	bl	40c1f4 <__aeabi_dmul>
  409bdc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  409be0:	4638      	mov	r0, r7
  409be2:	4641      	mov	r1, r8
  409be4:	f002 fdb6 	bl	40c754 <__aeabi_d2iz>
  409be8:	4605      	mov	r5, r0
  409bea:	f002 fa9d 	bl	40c128 <__aeabi_i2d>
  409bee:	460b      	mov	r3, r1
  409bf0:	4602      	mov	r2, r0
  409bf2:	4641      	mov	r1, r8
  409bf4:	4638      	mov	r0, r7
  409bf6:	f002 f949 	bl	40be8c <__aeabi_dsub>
  409bfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409bfc:	460f      	mov	r7, r1
  409bfe:	9904      	ldr	r1, [sp, #16]
  409c00:	3530      	adds	r5, #48	; 0x30
  409c02:	2b01      	cmp	r3, #1
  409c04:	700d      	strb	r5, [r1, #0]
  409c06:	4606      	mov	r6, r0
  409c08:	f101 0501 	add.w	r5, r1, #1
  409c0c:	d026      	beq.n	409c5c <_dtoa_r+0xcbc>
  409c0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409c10:	9a04      	ldr	r2, [sp, #16]
  409c12:	f8df b13c 	ldr.w	fp, [pc, #316]	; 409d50 <_dtoa_r+0xdb0>
  409c16:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  409c1a:	4413      	add	r3, r2
  409c1c:	f04f 0a00 	mov.w	sl, #0
  409c20:	4699      	mov	r9, r3
  409c22:	4652      	mov	r2, sl
  409c24:	465b      	mov	r3, fp
  409c26:	4630      	mov	r0, r6
  409c28:	4639      	mov	r1, r7
  409c2a:	f002 fae3 	bl	40c1f4 <__aeabi_dmul>
  409c2e:	460f      	mov	r7, r1
  409c30:	4606      	mov	r6, r0
  409c32:	f002 fd8f 	bl	40c754 <__aeabi_d2iz>
  409c36:	4680      	mov	r8, r0
  409c38:	f002 fa76 	bl	40c128 <__aeabi_i2d>
  409c3c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  409c40:	4602      	mov	r2, r0
  409c42:	460b      	mov	r3, r1
  409c44:	4630      	mov	r0, r6
  409c46:	4639      	mov	r1, r7
  409c48:	f002 f920 	bl	40be8c <__aeabi_dsub>
  409c4c:	f805 8b01 	strb.w	r8, [r5], #1
  409c50:	454d      	cmp	r5, r9
  409c52:	4606      	mov	r6, r0
  409c54:	460f      	mov	r7, r1
  409c56:	d1e4      	bne.n	409c22 <_dtoa_r+0xc82>
  409c58:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409c5c:	4b3b      	ldr	r3, [pc, #236]	; (409d4c <_dtoa_r+0xdac>)
  409c5e:	2200      	movs	r2, #0
  409c60:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  409c64:	f002 f914 	bl	40be90 <__adddf3>
  409c68:	4632      	mov	r2, r6
  409c6a:	463b      	mov	r3, r7
  409c6c:	f002 fd34 	bl	40c6d8 <__aeabi_dcmplt>
  409c70:	2800      	cmp	r0, #0
  409c72:	d046      	beq.n	409d02 <_dtoa_r+0xd62>
  409c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409c76:	9302      	str	r3, [sp, #8]
  409c78:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409c7c:	f7ff bb43 	b.w	409306 <_dtoa_r+0x366>
  409c80:	f04f 0800 	mov.w	r8, #0
  409c84:	4646      	mov	r6, r8
  409c86:	e6a9      	b.n	4099dc <_dtoa_r+0xa3c>
  409c88:	9b08      	ldr	r3, [sp, #32]
  409c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409c8c:	1a9d      	subs	r5, r3, r2
  409c8e:	2300      	movs	r3, #0
  409c90:	f7ff bb71 	b.w	409376 <_dtoa_r+0x3d6>
  409c94:	9b18      	ldr	r3, [sp, #96]	; 0x60
  409c96:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409c98:	9d08      	ldr	r5, [sp, #32]
  409c9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  409c9e:	f7ff bb6a 	b.w	409376 <_dtoa_r+0x3d6>
  409ca2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  409ca6:	f04f 0a02 	mov.w	sl, #2
  409caa:	e56e      	b.n	40978a <_dtoa_r+0x7ea>
  409cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409cae:	2b00      	cmp	r3, #0
  409cb0:	f43f aeb8 	beq.w	409a24 <_dtoa_r+0xa84>
  409cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409cb6:	2b00      	cmp	r3, #0
  409cb8:	f77f aede 	ble.w	409a78 <_dtoa_r+0xad8>
  409cbc:	2200      	movs	r2, #0
  409cbe:	4b24      	ldr	r3, [pc, #144]	; (409d50 <_dtoa_r+0xdb0>)
  409cc0:	4638      	mov	r0, r7
  409cc2:	4641      	mov	r1, r8
  409cc4:	f002 fa96 	bl	40c1f4 <__aeabi_dmul>
  409cc8:	4607      	mov	r7, r0
  409cca:	4688      	mov	r8, r1
  409ccc:	f10a 0001 	add.w	r0, sl, #1
  409cd0:	f002 fa2a 	bl	40c128 <__aeabi_i2d>
  409cd4:	463a      	mov	r2, r7
  409cd6:	4643      	mov	r3, r8
  409cd8:	f002 fa8c 	bl	40c1f4 <__aeabi_dmul>
  409cdc:	2200      	movs	r2, #0
  409cde:	4b17      	ldr	r3, [pc, #92]	; (409d3c <_dtoa_r+0xd9c>)
  409ce0:	f002 f8d6 	bl	40be90 <__adddf3>
  409ce4:	9a02      	ldr	r2, [sp, #8]
  409ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409ce8:	9312      	str	r3, [sp, #72]	; 0x48
  409cea:	3a01      	subs	r2, #1
  409cec:	4605      	mov	r5, r0
  409cee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409cf2:	9215      	str	r2, [sp, #84]	; 0x54
  409cf4:	e56a      	b.n	4097cc <_dtoa_r+0x82c>
  409cf6:	2239      	movs	r2, #57	; 0x39
  409cf8:	46b3      	mov	fp, r6
  409cfa:	703a      	strb	r2, [r7, #0]
  409cfc:	9e06      	ldr	r6, [sp, #24]
  409cfe:	1c7d      	adds	r5, r7, #1
  409d00:	e4c0      	b.n	409684 <_dtoa_r+0x6e4>
  409d02:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  409d06:	2000      	movs	r0, #0
  409d08:	4910      	ldr	r1, [pc, #64]	; (409d4c <_dtoa_r+0xdac>)
  409d0a:	f002 f8bf 	bl	40be8c <__aeabi_dsub>
  409d0e:	4632      	mov	r2, r6
  409d10:	463b      	mov	r3, r7
  409d12:	f002 fcff 	bl	40c714 <__aeabi_dcmpgt>
  409d16:	b908      	cbnz	r0, 409d1c <_dtoa_r+0xd7c>
  409d18:	e6ae      	b.n	409a78 <_dtoa_r+0xad8>
  409d1a:	4615      	mov	r5, r2
  409d1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409d20:	2b30      	cmp	r3, #48	; 0x30
  409d22:	f105 32ff 	add.w	r2, r5, #4294967295
  409d26:	d0f8      	beq.n	409d1a <_dtoa_r+0xd7a>
  409d28:	e5d7      	b.n	4098da <_dtoa_r+0x93a>
  409d2a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409d2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409d30:	9302      	str	r3, [sp, #8]
  409d32:	f7ff bae8 	b.w	409306 <_dtoa_r+0x366>
  409d36:	970c      	str	r7, [sp, #48]	; 0x30
  409d38:	f7ff bba5 	b.w	409486 <_dtoa_r+0x4e6>
  409d3c:	401c0000 	.word	0x401c0000
  409d40:	40140000 	.word	0x40140000
  409d44:	0040db00 	.word	0x0040db00
  409d48:	0040dad8 	.word	0x0040dad8
  409d4c:	3fe00000 	.word	0x3fe00000
  409d50:	40240000 	.word	0x40240000
  409d54:	2b39      	cmp	r3, #57	; 0x39
  409d56:	f8cd b018 	str.w	fp, [sp, #24]
  409d5a:	46d0      	mov	r8, sl
  409d5c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  409d60:	469a      	mov	sl, r3
  409d62:	d0c8      	beq.n	409cf6 <_dtoa_r+0xd56>
  409d64:	f1bb 0f00 	cmp.w	fp, #0
  409d68:	f73f aebf 	bgt.w	409aea <_dtoa_r+0xb4a>
  409d6c:	e6bf      	b.n	409aee <_dtoa_r+0xb4e>
  409d6e:	f47f aebe 	bne.w	409aee <_dtoa_r+0xb4e>
  409d72:	f01a 0f01 	tst.w	sl, #1
  409d76:	f43f aeba 	beq.w	409aee <_dtoa_r+0xb4e>
  409d7a:	e6b2      	b.n	409ae2 <_dtoa_r+0xb42>
  409d7c:	f04f 0800 	mov.w	r8, #0
  409d80:	4646      	mov	r6, r8
  409d82:	e5e9      	b.n	409958 <_dtoa_r+0x9b8>
  409d84:	4631      	mov	r1, r6
  409d86:	2300      	movs	r3, #0
  409d88:	220a      	movs	r2, #10
  409d8a:	4620      	mov	r0, r4
  409d8c:	f001 f938 	bl	40b000 <__multadd>
  409d90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409d92:	2b00      	cmp	r3, #0
  409d94:	4606      	mov	r6, r0
  409d96:	dd0a      	ble.n	409dae <_dtoa_r+0xe0e>
  409d98:	930a      	str	r3, [sp, #40]	; 0x28
  409d9a:	f7ff bbaa 	b.w	4094f2 <_dtoa_r+0x552>
  409d9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409da0:	2b02      	cmp	r3, #2
  409da2:	dc23      	bgt.n	409dec <_dtoa_r+0xe4c>
  409da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409da6:	e43b      	b.n	409620 <_dtoa_r+0x680>
  409da8:	f04f 0a02 	mov.w	sl, #2
  409dac:	e4ed      	b.n	40978a <_dtoa_r+0x7ea>
  409dae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409db0:	2b02      	cmp	r3, #2
  409db2:	dc1b      	bgt.n	409dec <_dtoa_r+0xe4c>
  409db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409db6:	e7ef      	b.n	409d98 <_dtoa_r+0xdf8>
  409db8:	2500      	movs	r5, #0
  409dba:	6465      	str	r5, [r4, #68]	; 0x44
  409dbc:	4629      	mov	r1, r5
  409dbe:	4620      	mov	r0, r4
  409dc0:	f001 f8ee 	bl	40afa0 <_Balloc>
  409dc4:	f04f 33ff 	mov.w	r3, #4294967295
  409dc8:	930a      	str	r3, [sp, #40]	; 0x28
  409dca:	930f      	str	r3, [sp, #60]	; 0x3c
  409dcc:	2301      	movs	r3, #1
  409dce:	9004      	str	r0, [sp, #16]
  409dd0:	9525      	str	r5, [sp, #148]	; 0x94
  409dd2:	6420      	str	r0, [r4, #64]	; 0x40
  409dd4:	930b      	str	r3, [sp, #44]	; 0x2c
  409dd6:	f7ff b9dd 	b.w	409194 <_dtoa_r+0x1f4>
  409dda:	2501      	movs	r5, #1
  409ddc:	f7ff b9a5 	b.w	40912a <_dtoa_r+0x18a>
  409de0:	f43f ab69 	beq.w	4094b6 <_dtoa_r+0x516>
  409de4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  409de8:	f7ff bbf9 	b.w	4095de <_dtoa_r+0x63e>
  409dec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409dee:	930a      	str	r3, [sp, #40]	; 0x28
  409df0:	e5e5      	b.n	4099be <_dtoa_r+0xa1e>
  409df2:	bf00      	nop

00409df4 <__sflush_r>:
  409df4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  409df8:	b29a      	uxth	r2, r3
  409dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409dfe:	460d      	mov	r5, r1
  409e00:	0711      	lsls	r1, r2, #28
  409e02:	4680      	mov	r8, r0
  409e04:	d43a      	bmi.n	409e7c <__sflush_r+0x88>
  409e06:	686a      	ldr	r2, [r5, #4]
  409e08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  409e0c:	2a00      	cmp	r2, #0
  409e0e:	81ab      	strh	r3, [r5, #12]
  409e10:	dd6f      	ble.n	409ef2 <__sflush_r+0xfe>
  409e12:	6aac      	ldr	r4, [r5, #40]	; 0x28
  409e14:	2c00      	cmp	r4, #0
  409e16:	d049      	beq.n	409eac <__sflush_r+0xb8>
  409e18:	2200      	movs	r2, #0
  409e1a:	b29b      	uxth	r3, r3
  409e1c:	f8d8 6000 	ldr.w	r6, [r8]
  409e20:	f8c8 2000 	str.w	r2, [r8]
  409e24:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  409e28:	d067      	beq.n	409efa <__sflush_r+0x106>
  409e2a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  409e2c:	075f      	lsls	r7, r3, #29
  409e2e:	d505      	bpl.n	409e3c <__sflush_r+0x48>
  409e30:	6869      	ldr	r1, [r5, #4]
  409e32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  409e34:	1a52      	subs	r2, r2, r1
  409e36:	b10b      	cbz	r3, 409e3c <__sflush_r+0x48>
  409e38:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  409e3a:	1ad2      	subs	r2, r2, r3
  409e3c:	2300      	movs	r3, #0
  409e3e:	69e9      	ldr	r1, [r5, #28]
  409e40:	4640      	mov	r0, r8
  409e42:	47a0      	blx	r4
  409e44:	1c44      	adds	r4, r0, #1
  409e46:	d03c      	beq.n	409ec2 <__sflush_r+0xce>
  409e48:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  409e4c:	692a      	ldr	r2, [r5, #16]
  409e4e:	602a      	str	r2, [r5, #0]
  409e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  409e54:	2200      	movs	r2, #0
  409e56:	81ab      	strh	r3, [r5, #12]
  409e58:	04db      	lsls	r3, r3, #19
  409e5a:	606a      	str	r2, [r5, #4]
  409e5c:	d447      	bmi.n	409eee <__sflush_r+0xfa>
  409e5e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  409e60:	f8c8 6000 	str.w	r6, [r8]
  409e64:	b311      	cbz	r1, 409eac <__sflush_r+0xb8>
  409e66:	f105 0340 	add.w	r3, r5, #64	; 0x40
  409e6a:	4299      	cmp	r1, r3
  409e6c:	d002      	beq.n	409e74 <__sflush_r+0x80>
  409e6e:	4640      	mov	r0, r8
  409e70:	f000 f9de 	bl	40a230 <_free_r>
  409e74:	2000      	movs	r0, #0
  409e76:	6328      	str	r0, [r5, #48]	; 0x30
  409e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409e7c:	692e      	ldr	r6, [r5, #16]
  409e7e:	b1ae      	cbz	r6, 409eac <__sflush_r+0xb8>
  409e80:	682c      	ldr	r4, [r5, #0]
  409e82:	602e      	str	r6, [r5, #0]
  409e84:	0791      	lsls	r1, r2, #30
  409e86:	bf0c      	ite	eq
  409e88:	696b      	ldreq	r3, [r5, #20]
  409e8a:	2300      	movne	r3, #0
  409e8c:	1ba4      	subs	r4, r4, r6
  409e8e:	60ab      	str	r3, [r5, #8]
  409e90:	e00a      	b.n	409ea8 <__sflush_r+0xb4>
  409e92:	4623      	mov	r3, r4
  409e94:	4632      	mov	r2, r6
  409e96:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  409e98:	69e9      	ldr	r1, [r5, #28]
  409e9a:	4640      	mov	r0, r8
  409e9c:	47b8      	blx	r7
  409e9e:	2800      	cmp	r0, #0
  409ea0:	eba4 0400 	sub.w	r4, r4, r0
  409ea4:	4406      	add	r6, r0
  409ea6:	dd04      	ble.n	409eb2 <__sflush_r+0xbe>
  409ea8:	2c00      	cmp	r4, #0
  409eaa:	dcf2      	bgt.n	409e92 <__sflush_r+0x9e>
  409eac:	2000      	movs	r0, #0
  409eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409eb2:	89ab      	ldrh	r3, [r5, #12]
  409eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409eb8:	81ab      	strh	r3, [r5, #12]
  409eba:	f04f 30ff 	mov.w	r0, #4294967295
  409ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409ec2:	f8d8 4000 	ldr.w	r4, [r8]
  409ec6:	2c1d      	cmp	r4, #29
  409ec8:	d8f3      	bhi.n	409eb2 <__sflush_r+0xbe>
  409eca:	4b19      	ldr	r3, [pc, #100]	; (409f30 <__sflush_r+0x13c>)
  409ecc:	40e3      	lsrs	r3, r4
  409ece:	43db      	mvns	r3, r3
  409ed0:	f013 0301 	ands.w	r3, r3, #1
  409ed4:	d1ed      	bne.n	409eb2 <__sflush_r+0xbe>
  409ed6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  409eda:	606b      	str	r3, [r5, #4]
  409edc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  409ee0:	6929      	ldr	r1, [r5, #16]
  409ee2:	81ab      	strh	r3, [r5, #12]
  409ee4:	04da      	lsls	r2, r3, #19
  409ee6:	6029      	str	r1, [r5, #0]
  409ee8:	d5b9      	bpl.n	409e5e <__sflush_r+0x6a>
  409eea:	2c00      	cmp	r4, #0
  409eec:	d1b7      	bne.n	409e5e <__sflush_r+0x6a>
  409eee:	6528      	str	r0, [r5, #80]	; 0x50
  409ef0:	e7b5      	b.n	409e5e <__sflush_r+0x6a>
  409ef2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  409ef4:	2a00      	cmp	r2, #0
  409ef6:	dc8c      	bgt.n	409e12 <__sflush_r+0x1e>
  409ef8:	e7d8      	b.n	409eac <__sflush_r+0xb8>
  409efa:	2301      	movs	r3, #1
  409efc:	69e9      	ldr	r1, [r5, #28]
  409efe:	4640      	mov	r0, r8
  409f00:	47a0      	blx	r4
  409f02:	1c43      	adds	r3, r0, #1
  409f04:	4602      	mov	r2, r0
  409f06:	d002      	beq.n	409f0e <__sflush_r+0x11a>
  409f08:	89ab      	ldrh	r3, [r5, #12]
  409f0a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  409f0c:	e78e      	b.n	409e2c <__sflush_r+0x38>
  409f0e:	f8d8 3000 	ldr.w	r3, [r8]
  409f12:	2b00      	cmp	r3, #0
  409f14:	d0f8      	beq.n	409f08 <__sflush_r+0x114>
  409f16:	2b1d      	cmp	r3, #29
  409f18:	d001      	beq.n	409f1e <__sflush_r+0x12a>
  409f1a:	2b16      	cmp	r3, #22
  409f1c:	d102      	bne.n	409f24 <__sflush_r+0x130>
  409f1e:	f8c8 6000 	str.w	r6, [r8]
  409f22:	e7c3      	b.n	409eac <__sflush_r+0xb8>
  409f24:	89ab      	ldrh	r3, [r5, #12]
  409f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409f2a:	81ab      	strh	r3, [r5, #12]
  409f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409f30:	20400001 	.word	0x20400001

00409f34 <_fflush_r>:
  409f34:	b538      	push	{r3, r4, r5, lr}
  409f36:	460d      	mov	r5, r1
  409f38:	4604      	mov	r4, r0
  409f3a:	b108      	cbz	r0, 409f40 <_fflush_r+0xc>
  409f3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409f3e:	b1bb      	cbz	r3, 409f70 <_fflush_r+0x3c>
  409f40:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  409f44:	b188      	cbz	r0, 409f6a <_fflush_r+0x36>
  409f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  409f48:	07db      	lsls	r3, r3, #31
  409f4a:	d401      	bmi.n	409f50 <_fflush_r+0x1c>
  409f4c:	0581      	lsls	r1, r0, #22
  409f4e:	d517      	bpl.n	409f80 <_fflush_r+0x4c>
  409f50:	4620      	mov	r0, r4
  409f52:	4629      	mov	r1, r5
  409f54:	f7ff ff4e 	bl	409df4 <__sflush_r>
  409f58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  409f5a:	07da      	lsls	r2, r3, #31
  409f5c:	4604      	mov	r4, r0
  409f5e:	d402      	bmi.n	409f66 <_fflush_r+0x32>
  409f60:	89ab      	ldrh	r3, [r5, #12]
  409f62:	059b      	lsls	r3, r3, #22
  409f64:	d507      	bpl.n	409f76 <_fflush_r+0x42>
  409f66:	4620      	mov	r0, r4
  409f68:	bd38      	pop	{r3, r4, r5, pc}
  409f6a:	4604      	mov	r4, r0
  409f6c:	4620      	mov	r0, r4
  409f6e:	bd38      	pop	{r3, r4, r5, pc}
  409f70:	f000 f838 	bl	409fe4 <__sinit>
  409f74:	e7e4      	b.n	409f40 <_fflush_r+0xc>
  409f76:	6da8      	ldr	r0, [r5, #88]	; 0x58
  409f78:	f000 fc04 	bl	40a784 <__retarget_lock_release_recursive>
  409f7c:	4620      	mov	r0, r4
  409f7e:	bd38      	pop	{r3, r4, r5, pc}
  409f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
  409f82:	f000 fbfd 	bl	40a780 <__retarget_lock_acquire_recursive>
  409f86:	e7e3      	b.n	409f50 <_fflush_r+0x1c>

00409f88 <_cleanup_r>:
  409f88:	4901      	ldr	r1, [pc, #4]	; (409f90 <_cleanup_r+0x8>)
  409f8a:	f000 bbaf 	b.w	40a6ec <_fwalk_reent>
  409f8e:	bf00      	nop
  409f90:	0040bd1d 	.word	0x0040bd1d

00409f94 <std.isra.0>:
  409f94:	b510      	push	{r4, lr}
  409f96:	2300      	movs	r3, #0
  409f98:	4604      	mov	r4, r0
  409f9a:	8181      	strh	r1, [r0, #12]
  409f9c:	81c2      	strh	r2, [r0, #14]
  409f9e:	6003      	str	r3, [r0, #0]
  409fa0:	6043      	str	r3, [r0, #4]
  409fa2:	6083      	str	r3, [r0, #8]
  409fa4:	6643      	str	r3, [r0, #100]	; 0x64
  409fa6:	6103      	str	r3, [r0, #16]
  409fa8:	6143      	str	r3, [r0, #20]
  409faa:	6183      	str	r3, [r0, #24]
  409fac:	4619      	mov	r1, r3
  409fae:	2208      	movs	r2, #8
  409fb0:	305c      	adds	r0, #92	; 0x5c
  409fb2:	f7fc fbdb 	bl	40676c <memset>
  409fb6:	4807      	ldr	r0, [pc, #28]	; (409fd4 <std.isra.0+0x40>)
  409fb8:	4907      	ldr	r1, [pc, #28]	; (409fd8 <std.isra.0+0x44>)
  409fba:	4a08      	ldr	r2, [pc, #32]	; (409fdc <std.isra.0+0x48>)
  409fbc:	4b08      	ldr	r3, [pc, #32]	; (409fe0 <std.isra.0+0x4c>)
  409fbe:	6220      	str	r0, [r4, #32]
  409fc0:	61e4      	str	r4, [r4, #28]
  409fc2:	6261      	str	r1, [r4, #36]	; 0x24
  409fc4:	62a2      	str	r2, [r4, #40]	; 0x28
  409fc6:	62e3      	str	r3, [r4, #44]	; 0x2c
  409fc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  409fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409fd0:	f000 bbd2 	b.w	40a778 <__retarget_lock_init_recursive>
  409fd4:	0040b905 	.word	0x0040b905
  409fd8:	0040b929 	.word	0x0040b929
  409fdc:	0040b965 	.word	0x0040b965
  409fe0:	0040b985 	.word	0x0040b985

00409fe4 <__sinit>:
  409fe4:	b510      	push	{r4, lr}
  409fe6:	4604      	mov	r4, r0
  409fe8:	4812      	ldr	r0, [pc, #72]	; (40a034 <__sinit+0x50>)
  409fea:	f000 fbc9 	bl	40a780 <__retarget_lock_acquire_recursive>
  409fee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  409ff0:	b9d2      	cbnz	r2, 40a028 <__sinit+0x44>
  409ff2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  409ff6:	4810      	ldr	r0, [pc, #64]	; (40a038 <__sinit+0x54>)
  409ff8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  409ffc:	2103      	movs	r1, #3
  409ffe:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40a002:	63e0      	str	r0, [r4, #60]	; 0x3c
  40a004:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40a008:	6860      	ldr	r0, [r4, #4]
  40a00a:	2104      	movs	r1, #4
  40a00c:	f7ff ffc2 	bl	409f94 <std.isra.0>
  40a010:	2201      	movs	r2, #1
  40a012:	2109      	movs	r1, #9
  40a014:	68a0      	ldr	r0, [r4, #8]
  40a016:	f7ff ffbd 	bl	409f94 <std.isra.0>
  40a01a:	2202      	movs	r2, #2
  40a01c:	2112      	movs	r1, #18
  40a01e:	68e0      	ldr	r0, [r4, #12]
  40a020:	f7ff ffb8 	bl	409f94 <std.isra.0>
  40a024:	2301      	movs	r3, #1
  40a026:	63a3      	str	r3, [r4, #56]	; 0x38
  40a028:	4802      	ldr	r0, [pc, #8]	; (40a034 <__sinit+0x50>)
  40a02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40a02e:	f000 bba9 	b.w	40a784 <__retarget_lock_release_recursive>
  40a032:	bf00      	nop
  40a034:	2040cbcc 	.word	0x2040cbcc
  40a038:	00409f89 	.word	0x00409f89

0040a03c <__sfp_lock_acquire>:
  40a03c:	4801      	ldr	r0, [pc, #4]	; (40a044 <__sfp_lock_acquire+0x8>)
  40a03e:	f000 bb9f 	b.w	40a780 <__retarget_lock_acquire_recursive>
  40a042:	bf00      	nop
  40a044:	2040cbe0 	.word	0x2040cbe0

0040a048 <__sfp_lock_release>:
  40a048:	4801      	ldr	r0, [pc, #4]	; (40a050 <__sfp_lock_release+0x8>)
  40a04a:	f000 bb9b 	b.w	40a784 <__retarget_lock_release_recursive>
  40a04e:	bf00      	nop
  40a050:	2040cbe0 	.word	0x2040cbe0

0040a054 <__libc_fini_array>:
  40a054:	b538      	push	{r3, r4, r5, lr}
  40a056:	4c0a      	ldr	r4, [pc, #40]	; (40a080 <__libc_fini_array+0x2c>)
  40a058:	4d0a      	ldr	r5, [pc, #40]	; (40a084 <__libc_fini_array+0x30>)
  40a05a:	1b64      	subs	r4, r4, r5
  40a05c:	10a4      	asrs	r4, r4, #2
  40a05e:	d00a      	beq.n	40a076 <__libc_fini_array+0x22>
  40a060:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40a064:	3b01      	subs	r3, #1
  40a066:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40a06a:	3c01      	subs	r4, #1
  40a06c:	f855 3904 	ldr.w	r3, [r5], #-4
  40a070:	4798      	blx	r3
  40a072:	2c00      	cmp	r4, #0
  40a074:	d1f9      	bne.n	40a06a <__libc_fini_array+0x16>
  40a076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40a07a:	f003 be37 	b.w	40dcec <_fini>
  40a07e:	bf00      	nop
  40a080:	0040dcfc 	.word	0x0040dcfc
  40a084:	0040dcf8 	.word	0x0040dcf8

0040a088 <__fputwc>:
  40a088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a08c:	b082      	sub	sp, #8
  40a08e:	4680      	mov	r8, r0
  40a090:	4689      	mov	r9, r1
  40a092:	4614      	mov	r4, r2
  40a094:	f000 fb54 	bl	40a740 <__locale_mb_cur_max>
  40a098:	2801      	cmp	r0, #1
  40a09a:	d036      	beq.n	40a10a <__fputwc+0x82>
  40a09c:	464a      	mov	r2, r9
  40a09e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40a0a2:	a901      	add	r1, sp, #4
  40a0a4:	4640      	mov	r0, r8
  40a0a6:	f001 fd47 	bl	40bb38 <_wcrtomb_r>
  40a0aa:	1c42      	adds	r2, r0, #1
  40a0ac:	4606      	mov	r6, r0
  40a0ae:	d025      	beq.n	40a0fc <__fputwc+0x74>
  40a0b0:	b3a8      	cbz	r0, 40a11e <__fputwc+0x96>
  40a0b2:	f89d e004 	ldrb.w	lr, [sp, #4]
  40a0b6:	2500      	movs	r5, #0
  40a0b8:	f10d 0a04 	add.w	sl, sp, #4
  40a0bc:	e009      	b.n	40a0d2 <__fputwc+0x4a>
  40a0be:	6823      	ldr	r3, [r4, #0]
  40a0c0:	1c5a      	adds	r2, r3, #1
  40a0c2:	6022      	str	r2, [r4, #0]
  40a0c4:	f883 e000 	strb.w	lr, [r3]
  40a0c8:	3501      	adds	r5, #1
  40a0ca:	42b5      	cmp	r5, r6
  40a0cc:	d227      	bcs.n	40a11e <__fputwc+0x96>
  40a0ce:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40a0d2:	68a3      	ldr	r3, [r4, #8]
  40a0d4:	3b01      	subs	r3, #1
  40a0d6:	2b00      	cmp	r3, #0
  40a0d8:	60a3      	str	r3, [r4, #8]
  40a0da:	daf0      	bge.n	40a0be <__fputwc+0x36>
  40a0dc:	69a7      	ldr	r7, [r4, #24]
  40a0de:	42bb      	cmp	r3, r7
  40a0e0:	4671      	mov	r1, lr
  40a0e2:	4622      	mov	r2, r4
  40a0e4:	4640      	mov	r0, r8
  40a0e6:	db02      	blt.n	40a0ee <__fputwc+0x66>
  40a0e8:	f1be 0f0a 	cmp.w	lr, #10
  40a0ec:	d1e7      	bne.n	40a0be <__fputwc+0x36>
  40a0ee:	f001 fccb 	bl	40ba88 <__swbuf_r>
  40a0f2:	1c43      	adds	r3, r0, #1
  40a0f4:	d1e8      	bne.n	40a0c8 <__fputwc+0x40>
  40a0f6:	b002      	add	sp, #8
  40a0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a0fc:	89a3      	ldrh	r3, [r4, #12]
  40a0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a102:	81a3      	strh	r3, [r4, #12]
  40a104:	b002      	add	sp, #8
  40a106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a10a:	f109 33ff 	add.w	r3, r9, #4294967295
  40a10e:	2bfe      	cmp	r3, #254	; 0xfe
  40a110:	d8c4      	bhi.n	40a09c <__fputwc+0x14>
  40a112:	fa5f fe89 	uxtb.w	lr, r9
  40a116:	4606      	mov	r6, r0
  40a118:	f88d e004 	strb.w	lr, [sp, #4]
  40a11c:	e7cb      	b.n	40a0b6 <__fputwc+0x2e>
  40a11e:	4648      	mov	r0, r9
  40a120:	b002      	add	sp, #8
  40a122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a126:	bf00      	nop

0040a128 <_fputwc_r>:
  40a128:	b530      	push	{r4, r5, lr}
  40a12a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40a12c:	f013 0f01 	tst.w	r3, #1
  40a130:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40a134:	4614      	mov	r4, r2
  40a136:	b083      	sub	sp, #12
  40a138:	4605      	mov	r5, r0
  40a13a:	b29a      	uxth	r2, r3
  40a13c:	d101      	bne.n	40a142 <_fputwc_r+0x1a>
  40a13e:	0590      	lsls	r0, r2, #22
  40a140:	d51c      	bpl.n	40a17c <_fputwc_r+0x54>
  40a142:	0490      	lsls	r0, r2, #18
  40a144:	d406      	bmi.n	40a154 <_fputwc_r+0x2c>
  40a146:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40a148:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40a14c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a150:	81a3      	strh	r3, [r4, #12]
  40a152:	6662      	str	r2, [r4, #100]	; 0x64
  40a154:	4628      	mov	r0, r5
  40a156:	4622      	mov	r2, r4
  40a158:	f7ff ff96 	bl	40a088 <__fputwc>
  40a15c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a15e:	07da      	lsls	r2, r3, #31
  40a160:	4605      	mov	r5, r0
  40a162:	d402      	bmi.n	40a16a <_fputwc_r+0x42>
  40a164:	89a3      	ldrh	r3, [r4, #12]
  40a166:	059b      	lsls	r3, r3, #22
  40a168:	d502      	bpl.n	40a170 <_fputwc_r+0x48>
  40a16a:	4628      	mov	r0, r5
  40a16c:	b003      	add	sp, #12
  40a16e:	bd30      	pop	{r4, r5, pc}
  40a170:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a172:	f000 fb07 	bl	40a784 <__retarget_lock_release_recursive>
  40a176:	4628      	mov	r0, r5
  40a178:	b003      	add	sp, #12
  40a17a:	bd30      	pop	{r4, r5, pc}
  40a17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a17e:	9101      	str	r1, [sp, #4]
  40a180:	f000 fafe 	bl	40a780 <__retarget_lock_acquire_recursive>
  40a184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a188:	9901      	ldr	r1, [sp, #4]
  40a18a:	b29a      	uxth	r2, r3
  40a18c:	e7d9      	b.n	40a142 <_fputwc_r+0x1a>
  40a18e:	bf00      	nop

0040a190 <_malloc_trim_r>:
  40a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a192:	4f24      	ldr	r7, [pc, #144]	; (40a224 <_malloc_trim_r+0x94>)
  40a194:	460c      	mov	r4, r1
  40a196:	4606      	mov	r6, r0
  40a198:	f000 fef6 	bl	40af88 <__malloc_lock>
  40a19c:	68bb      	ldr	r3, [r7, #8]
  40a19e:	685d      	ldr	r5, [r3, #4]
  40a1a0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40a1a4:	310f      	adds	r1, #15
  40a1a6:	f025 0503 	bic.w	r5, r5, #3
  40a1aa:	4429      	add	r1, r5
  40a1ac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40a1b0:	f021 010f 	bic.w	r1, r1, #15
  40a1b4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40a1b8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40a1bc:	db07      	blt.n	40a1ce <_malloc_trim_r+0x3e>
  40a1be:	2100      	movs	r1, #0
  40a1c0:	4630      	mov	r0, r6
  40a1c2:	f001 fb8d 	bl	40b8e0 <_sbrk_r>
  40a1c6:	68bb      	ldr	r3, [r7, #8]
  40a1c8:	442b      	add	r3, r5
  40a1ca:	4298      	cmp	r0, r3
  40a1cc:	d004      	beq.n	40a1d8 <_malloc_trim_r+0x48>
  40a1ce:	4630      	mov	r0, r6
  40a1d0:	f000 fee0 	bl	40af94 <__malloc_unlock>
  40a1d4:	2000      	movs	r0, #0
  40a1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a1d8:	4261      	negs	r1, r4
  40a1da:	4630      	mov	r0, r6
  40a1dc:	f001 fb80 	bl	40b8e0 <_sbrk_r>
  40a1e0:	3001      	adds	r0, #1
  40a1e2:	d00d      	beq.n	40a200 <_malloc_trim_r+0x70>
  40a1e4:	4b10      	ldr	r3, [pc, #64]	; (40a228 <_malloc_trim_r+0x98>)
  40a1e6:	68ba      	ldr	r2, [r7, #8]
  40a1e8:	6819      	ldr	r1, [r3, #0]
  40a1ea:	1b2d      	subs	r5, r5, r4
  40a1ec:	f045 0501 	orr.w	r5, r5, #1
  40a1f0:	4630      	mov	r0, r6
  40a1f2:	1b09      	subs	r1, r1, r4
  40a1f4:	6055      	str	r5, [r2, #4]
  40a1f6:	6019      	str	r1, [r3, #0]
  40a1f8:	f000 fecc 	bl	40af94 <__malloc_unlock>
  40a1fc:	2001      	movs	r0, #1
  40a1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a200:	2100      	movs	r1, #0
  40a202:	4630      	mov	r0, r6
  40a204:	f001 fb6c 	bl	40b8e0 <_sbrk_r>
  40a208:	68ba      	ldr	r2, [r7, #8]
  40a20a:	1a83      	subs	r3, r0, r2
  40a20c:	2b0f      	cmp	r3, #15
  40a20e:	ddde      	ble.n	40a1ce <_malloc_trim_r+0x3e>
  40a210:	4c06      	ldr	r4, [pc, #24]	; (40a22c <_malloc_trim_r+0x9c>)
  40a212:	4905      	ldr	r1, [pc, #20]	; (40a228 <_malloc_trim_r+0x98>)
  40a214:	6824      	ldr	r4, [r4, #0]
  40a216:	f043 0301 	orr.w	r3, r3, #1
  40a21a:	1b00      	subs	r0, r0, r4
  40a21c:	6053      	str	r3, [r2, #4]
  40a21e:	6008      	str	r0, [r1, #0]
  40a220:	e7d5      	b.n	40a1ce <_malloc_trim_r+0x3e>
  40a222:	bf00      	nop
  40a224:	204005c8 	.word	0x204005c8
  40a228:	2040c970 	.word	0x2040c970
  40a22c:	204009d0 	.word	0x204009d0

0040a230 <_free_r>:
  40a230:	2900      	cmp	r1, #0
  40a232:	d044      	beq.n	40a2be <_free_r+0x8e>
  40a234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a238:	460d      	mov	r5, r1
  40a23a:	4680      	mov	r8, r0
  40a23c:	f000 fea4 	bl	40af88 <__malloc_lock>
  40a240:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40a244:	4969      	ldr	r1, [pc, #420]	; (40a3ec <_free_r+0x1bc>)
  40a246:	f027 0301 	bic.w	r3, r7, #1
  40a24a:	f1a5 0408 	sub.w	r4, r5, #8
  40a24e:	18e2      	adds	r2, r4, r3
  40a250:	688e      	ldr	r6, [r1, #8]
  40a252:	6850      	ldr	r0, [r2, #4]
  40a254:	42b2      	cmp	r2, r6
  40a256:	f020 0003 	bic.w	r0, r0, #3
  40a25a:	d05e      	beq.n	40a31a <_free_r+0xea>
  40a25c:	07fe      	lsls	r6, r7, #31
  40a25e:	6050      	str	r0, [r2, #4]
  40a260:	d40b      	bmi.n	40a27a <_free_r+0x4a>
  40a262:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40a266:	1be4      	subs	r4, r4, r7
  40a268:	f101 0e08 	add.w	lr, r1, #8
  40a26c:	68a5      	ldr	r5, [r4, #8]
  40a26e:	4575      	cmp	r5, lr
  40a270:	443b      	add	r3, r7
  40a272:	d06d      	beq.n	40a350 <_free_r+0x120>
  40a274:	68e7      	ldr	r7, [r4, #12]
  40a276:	60ef      	str	r7, [r5, #12]
  40a278:	60bd      	str	r5, [r7, #8]
  40a27a:	1815      	adds	r5, r2, r0
  40a27c:	686d      	ldr	r5, [r5, #4]
  40a27e:	07ed      	lsls	r5, r5, #31
  40a280:	d53e      	bpl.n	40a300 <_free_r+0xd0>
  40a282:	f043 0201 	orr.w	r2, r3, #1
  40a286:	6062      	str	r2, [r4, #4]
  40a288:	50e3      	str	r3, [r4, r3]
  40a28a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a28e:	d217      	bcs.n	40a2c0 <_free_r+0x90>
  40a290:	08db      	lsrs	r3, r3, #3
  40a292:	1c58      	adds	r0, r3, #1
  40a294:	109a      	asrs	r2, r3, #2
  40a296:	684d      	ldr	r5, [r1, #4]
  40a298:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40a29c:	60a7      	str	r7, [r4, #8]
  40a29e:	2301      	movs	r3, #1
  40a2a0:	4093      	lsls	r3, r2
  40a2a2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40a2a6:	432b      	orrs	r3, r5
  40a2a8:	3a08      	subs	r2, #8
  40a2aa:	60e2      	str	r2, [r4, #12]
  40a2ac:	604b      	str	r3, [r1, #4]
  40a2ae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40a2b2:	60fc      	str	r4, [r7, #12]
  40a2b4:	4640      	mov	r0, r8
  40a2b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a2ba:	f000 be6b 	b.w	40af94 <__malloc_unlock>
  40a2be:	4770      	bx	lr
  40a2c0:	0a5a      	lsrs	r2, r3, #9
  40a2c2:	2a04      	cmp	r2, #4
  40a2c4:	d852      	bhi.n	40a36c <_free_r+0x13c>
  40a2c6:	099a      	lsrs	r2, r3, #6
  40a2c8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40a2cc:	00ff      	lsls	r7, r7, #3
  40a2ce:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40a2d2:	19c8      	adds	r0, r1, r7
  40a2d4:	59ca      	ldr	r2, [r1, r7]
  40a2d6:	3808      	subs	r0, #8
  40a2d8:	4290      	cmp	r0, r2
  40a2da:	d04f      	beq.n	40a37c <_free_r+0x14c>
  40a2dc:	6851      	ldr	r1, [r2, #4]
  40a2de:	f021 0103 	bic.w	r1, r1, #3
  40a2e2:	428b      	cmp	r3, r1
  40a2e4:	d232      	bcs.n	40a34c <_free_r+0x11c>
  40a2e6:	6892      	ldr	r2, [r2, #8]
  40a2e8:	4290      	cmp	r0, r2
  40a2ea:	d1f7      	bne.n	40a2dc <_free_r+0xac>
  40a2ec:	68c3      	ldr	r3, [r0, #12]
  40a2ee:	60a0      	str	r0, [r4, #8]
  40a2f0:	60e3      	str	r3, [r4, #12]
  40a2f2:	609c      	str	r4, [r3, #8]
  40a2f4:	60c4      	str	r4, [r0, #12]
  40a2f6:	4640      	mov	r0, r8
  40a2f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a2fc:	f000 be4a 	b.w	40af94 <__malloc_unlock>
  40a300:	6895      	ldr	r5, [r2, #8]
  40a302:	4f3b      	ldr	r7, [pc, #236]	; (40a3f0 <_free_r+0x1c0>)
  40a304:	42bd      	cmp	r5, r7
  40a306:	4403      	add	r3, r0
  40a308:	d040      	beq.n	40a38c <_free_r+0x15c>
  40a30a:	68d0      	ldr	r0, [r2, #12]
  40a30c:	60e8      	str	r0, [r5, #12]
  40a30e:	f043 0201 	orr.w	r2, r3, #1
  40a312:	6085      	str	r5, [r0, #8]
  40a314:	6062      	str	r2, [r4, #4]
  40a316:	50e3      	str	r3, [r4, r3]
  40a318:	e7b7      	b.n	40a28a <_free_r+0x5a>
  40a31a:	07ff      	lsls	r7, r7, #31
  40a31c:	4403      	add	r3, r0
  40a31e:	d407      	bmi.n	40a330 <_free_r+0x100>
  40a320:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40a324:	1aa4      	subs	r4, r4, r2
  40a326:	4413      	add	r3, r2
  40a328:	68a0      	ldr	r0, [r4, #8]
  40a32a:	68e2      	ldr	r2, [r4, #12]
  40a32c:	60c2      	str	r2, [r0, #12]
  40a32e:	6090      	str	r0, [r2, #8]
  40a330:	4a30      	ldr	r2, [pc, #192]	; (40a3f4 <_free_r+0x1c4>)
  40a332:	6812      	ldr	r2, [r2, #0]
  40a334:	f043 0001 	orr.w	r0, r3, #1
  40a338:	4293      	cmp	r3, r2
  40a33a:	6060      	str	r0, [r4, #4]
  40a33c:	608c      	str	r4, [r1, #8]
  40a33e:	d3b9      	bcc.n	40a2b4 <_free_r+0x84>
  40a340:	4b2d      	ldr	r3, [pc, #180]	; (40a3f8 <_free_r+0x1c8>)
  40a342:	4640      	mov	r0, r8
  40a344:	6819      	ldr	r1, [r3, #0]
  40a346:	f7ff ff23 	bl	40a190 <_malloc_trim_r>
  40a34a:	e7b3      	b.n	40a2b4 <_free_r+0x84>
  40a34c:	4610      	mov	r0, r2
  40a34e:	e7cd      	b.n	40a2ec <_free_r+0xbc>
  40a350:	1811      	adds	r1, r2, r0
  40a352:	6849      	ldr	r1, [r1, #4]
  40a354:	07c9      	lsls	r1, r1, #31
  40a356:	d444      	bmi.n	40a3e2 <_free_r+0x1b2>
  40a358:	6891      	ldr	r1, [r2, #8]
  40a35a:	68d2      	ldr	r2, [r2, #12]
  40a35c:	60ca      	str	r2, [r1, #12]
  40a35e:	4403      	add	r3, r0
  40a360:	f043 0001 	orr.w	r0, r3, #1
  40a364:	6091      	str	r1, [r2, #8]
  40a366:	6060      	str	r0, [r4, #4]
  40a368:	50e3      	str	r3, [r4, r3]
  40a36a:	e7a3      	b.n	40a2b4 <_free_r+0x84>
  40a36c:	2a14      	cmp	r2, #20
  40a36e:	d816      	bhi.n	40a39e <_free_r+0x16e>
  40a370:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40a374:	00ff      	lsls	r7, r7, #3
  40a376:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40a37a:	e7aa      	b.n	40a2d2 <_free_r+0xa2>
  40a37c:	10aa      	asrs	r2, r5, #2
  40a37e:	2301      	movs	r3, #1
  40a380:	684d      	ldr	r5, [r1, #4]
  40a382:	4093      	lsls	r3, r2
  40a384:	432b      	orrs	r3, r5
  40a386:	604b      	str	r3, [r1, #4]
  40a388:	4603      	mov	r3, r0
  40a38a:	e7b0      	b.n	40a2ee <_free_r+0xbe>
  40a38c:	f043 0201 	orr.w	r2, r3, #1
  40a390:	614c      	str	r4, [r1, #20]
  40a392:	610c      	str	r4, [r1, #16]
  40a394:	60e5      	str	r5, [r4, #12]
  40a396:	60a5      	str	r5, [r4, #8]
  40a398:	6062      	str	r2, [r4, #4]
  40a39a:	50e3      	str	r3, [r4, r3]
  40a39c:	e78a      	b.n	40a2b4 <_free_r+0x84>
  40a39e:	2a54      	cmp	r2, #84	; 0x54
  40a3a0:	d806      	bhi.n	40a3b0 <_free_r+0x180>
  40a3a2:	0b1a      	lsrs	r2, r3, #12
  40a3a4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40a3a8:	00ff      	lsls	r7, r7, #3
  40a3aa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40a3ae:	e790      	b.n	40a2d2 <_free_r+0xa2>
  40a3b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a3b4:	d806      	bhi.n	40a3c4 <_free_r+0x194>
  40a3b6:	0bda      	lsrs	r2, r3, #15
  40a3b8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40a3bc:	00ff      	lsls	r7, r7, #3
  40a3be:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40a3c2:	e786      	b.n	40a2d2 <_free_r+0xa2>
  40a3c4:	f240 5054 	movw	r0, #1364	; 0x554
  40a3c8:	4282      	cmp	r2, r0
  40a3ca:	d806      	bhi.n	40a3da <_free_r+0x1aa>
  40a3cc:	0c9a      	lsrs	r2, r3, #18
  40a3ce:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40a3d2:	00ff      	lsls	r7, r7, #3
  40a3d4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40a3d8:	e77b      	b.n	40a2d2 <_free_r+0xa2>
  40a3da:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40a3de:	257e      	movs	r5, #126	; 0x7e
  40a3e0:	e777      	b.n	40a2d2 <_free_r+0xa2>
  40a3e2:	f043 0101 	orr.w	r1, r3, #1
  40a3e6:	6061      	str	r1, [r4, #4]
  40a3e8:	6013      	str	r3, [r2, #0]
  40a3ea:	e763      	b.n	40a2b4 <_free_r+0x84>
  40a3ec:	204005c8 	.word	0x204005c8
  40a3f0:	204005d0 	.word	0x204005d0
  40a3f4:	204009d4 	.word	0x204009d4
  40a3f8:	2040c9a0 	.word	0x2040c9a0

0040a3fc <__sfvwrite_r>:
  40a3fc:	6893      	ldr	r3, [r2, #8]
  40a3fe:	2b00      	cmp	r3, #0
  40a400:	d073      	beq.n	40a4ea <__sfvwrite_r+0xee>
  40a402:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a406:	898b      	ldrh	r3, [r1, #12]
  40a408:	b083      	sub	sp, #12
  40a40a:	460c      	mov	r4, r1
  40a40c:	0719      	lsls	r1, r3, #28
  40a40e:	9000      	str	r0, [sp, #0]
  40a410:	4616      	mov	r6, r2
  40a412:	d526      	bpl.n	40a462 <__sfvwrite_r+0x66>
  40a414:	6922      	ldr	r2, [r4, #16]
  40a416:	b322      	cbz	r2, 40a462 <__sfvwrite_r+0x66>
  40a418:	f013 0002 	ands.w	r0, r3, #2
  40a41c:	6835      	ldr	r5, [r6, #0]
  40a41e:	d02c      	beq.n	40a47a <__sfvwrite_r+0x7e>
  40a420:	f04f 0900 	mov.w	r9, #0
  40a424:	4fb0      	ldr	r7, [pc, #704]	; (40a6e8 <__sfvwrite_r+0x2ec>)
  40a426:	46c8      	mov	r8, r9
  40a428:	46b2      	mov	sl, r6
  40a42a:	45b8      	cmp	r8, r7
  40a42c:	4643      	mov	r3, r8
  40a42e:	464a      	mov	r2, r9
  40a430:	bf28      	it	cs
  40a432:	463b      	movcs	r3, r7
  40a434:	9800      	ldr	r0, [sp, #0]
  40a436:	f1b8 0f00 	cmp.w	r8, #0
  40a43a:	d050      	beq.n	40a4de <__sfvwrite_r+0xe2>
  40a43c:	69e1      	ldr	r1, [r4, #28]
  40a43e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a440:	47b0      	blx	r6
  40a442:	2800      	cmp	r0, #0
  40a444:	dd58      	ble.n	40a4f8 <__sfvwrite_r+0xfc>
  40a446:	f8da 3008 	ldr.w	r3, [sl, #8]
  40a44a:	1a1b      	subs	r3, r3, r0
  40a44c:	4481      	add	r9, r0
  40a44e:	eba8 0800 	sub.w	r8, r8, r0
  40a452:	f8ca 3008 	str.w	r3, [sl, #8]
  40a456:	2b00      	cmp	r3, #0
  40a458:	d1e7      	bne.n	40a42a <__sfvwrite_r+0x2e>
  40a45a:	2000      	movs	r0, #0
  40a45c:	b003      	add	sp, #12
  40a45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a462:	4621      	mov	r1, r4
  40a464:	9800      	ldr	r0, [sp, #0]
  40a466:	f7fe fc91 	bl	408d8c <__swsetup_r>
  40a46a:	2800      	cmp	r0, #0
  40a46c:	f040 8133 	bne.w	40a6d6 <__sfvwrite_r+0x2da>
  40a470:	89a3      	ldrh	r3, [r4, #12]
  40a472:	6835      	ldr	r5, [r6, #0]
  40a474:	f013 0002 	ands.w	r0, r3, #2
  40a478:	d1d2      	bne.n	40a420 <__sfvwrite_r+0x24>
  40a47a:	f013 0901 	ands.w	r9, r3, #1
  40a47e:	d145      	bne.n	40a50c <__sfvwrite_r+0x110>
  40a480:	464f      	mov	r7, r9
  40a482:	9601      	str	r6, [sp, #4]
  40a484:	b337      	cbz	r7, 40a4d4 <__sfvwrite_r+0xd8>
  40a486:	059a      	lsls	r2, r3, #22
  40a488:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40a48c:	f140 8083 	bpl.w	40a596 <__sfvwrite_r+0x19a>
  40a490:	4547      	cmp	r7, r8
  40a492:	46c3      	mov	fp, r8
  40a494:	f0c0 80ab 	bcc.w	40a5ee <__sfvwrite_r+0x1f2>
  40a498:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40a49c:	f040 80ac 	bne.w	40a5f8 <__sfvwrite_r+0x1fc>
  40a4a0:	6820      	ldr	r0, [r4, #0]
  40a4a2:	46ba      	mov	sl, r7
  40a4a4:	465a      	mov	r2, fp
  40a4a6:	4649      	mov	r1, r9
  40a4a8:	f000 fd0a 	bl	40aec0 <memmove>
  40a4ac:	68a2      	ldr	r2, [r4, #8]
  40a4ae:	6823      	ldr	r3, [r4, #0]
  40a4b0:	eba2 0208 	sub.w	r2, r2, r8
  40a4b4:	445b      	add	r3, fp
  40a4b6:	60a2      	str	r2, [r4, #8]
  40a4b8:	6023      	str	r3, [r4, #0]
  40a4ba:	9a01      	ldr	r2, [sp, #4]
  40a4bc:	6893      	ldr	r3, [r2, #8]
  40a4be:	eba3 030a 	sub.w	r3, r3, sl
  40a4c2:	44d1      	add	r9, sl
  40a4c4:	eba7 070a 	sub.w	r7, r7, sl
  40a4c8:	6093      	str	r3, [r2, #8]
  40a4ca:	2b00      	cmp	r3, #0
  40a4cc:	d0c5      	beq.n	40a45a <__sfvwrite_r+0x5e>
  40a4ce:	89a3      	ldrh	r3, [r4, #12]
  40a4d0:	2f00      	cmp	r7, #0
  40a4d2:	d1d8      	bne.n	40a486 <__sfvwrite_r+0x8a>
  40a4d4:	f8d5 9000 	ldr.w	r9, [r5]
  40a4d8:	686f      	ldr	r7, [r5, #4]
  40a4da:	3508      	adds	r5, #8
  40a4dc:	e7d2      	b.n	40a484 <__sfvwrite_r+0x88>
  40a4de:	f8d5 9000 	ldr.w	r9, [r5]
  40a4e2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40a4e6:	3508      	adds	r5, #8
  40a4e8:	e79f      	b.n	40a42a <__sfvwrite_r+0x2e>
  40a4ea:	2000      	movs	r0, #0
  40a4ec:	4770      	bx	lr
  40a4ee:	4621      	mov	r1, r4
  40a4f0:	9800      	ldr	r0, [sp, #0]
  40a4f2:	f7ff fd1f 	bl	409f34 <_fflush_r>
  40a4f6:	b370      	cbz	r0, 40a556 <__sfvwrite_r+0x15a>
  40a4f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a4fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a500:	f04f 30ff 	mov.w	r0, #4294967295
  40a504:	81a3      	strh	r3, [r4, #12]
  40a506:	b003      	add	sp, #12
  40a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a50c:	4681      	mov	r9, r0
  40a50e:	4633      	mov	r3, r6
  40a510:	464e      	mov	r6, r9
  40a512:	46a8      	mov	r8, r5
  40a514:	469a      	mov	sl, r3
  40a516:	464d      	mov	r5, r9
  40a518:	b34e      	cbz	r6, 40a56e <__sfvwrite_r+0x172>
  40a51a:	b380      	cbz	r0, 40a57e <__sfvwrite_r+0x182>
  40a51c:	6820      	ldr	r0, [r4, #0]
  40a51e:	6923      	ldr	r3, [r4, #16]
  40a520:	6962      	ldr	r2, [r4, #20]
  40a522:	45b1      	cmp	r9, r6
  40a524:	46cb      	mov	fp, r9
  40a526:	bf28      	it	cs
  40a528:	46b3      	movcs	fp, r6
  40a52a:	4298      	cmp	r0, r3
  40a52c:	465f      	mov	r7, fp
  40a52e:	d904      	bls.n	40a53a <__sfvwrite_r+0x13e>
  40a530:	68a3      	ldr	r3, [r4, #8]
  40a532:	4413      	add	r3, r2
  40a534:	459b      	cmp	fp, r3
  40a536:	f300 80a6 	bgt.w	40a686 <__sfvwrite_r+0x28a>
  40a53a:	4593      	cmp	fp, r2
  40a53c:	db4b      	blt.n	40a5d6 <__sfvwrite_r+0x1da>
  40a53e:	4613      	mov	r3, r2
  40a540:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40a542:	69e1      	ldr	r1, [r4, #28]
  40a544:	9800      	ldr	r0, [sp, #0]
  40a546:	462a      	mov	r2, r5
  40a548:	47b8      	blx	r7
  40a54a:	1e07      	subs	r7, r0, #0
  40a54c:	ddd4      	ble.n	40a4f8 <__sfvwrite_r+0xfc>
  40a54e:	ebb9 0907 	subs.w	r9, r9, r7
  40a552:	d0cc      	beq.n	40a4ee <__sfvwrite_r+0xf2>
  40a554:	2001      	movs	r0, #1
  40a556:	f8da 3008 	ldr.w	r3, [sl, #8]
  40a55a:	1bdb      	subs	r3, r3, r7
  40a55c:	443d      	add	r5, r7
  40a55e:	1bf6      	subs	r6, r6, r7
  40a560:	f8ca 3008 	str.w	r3, [sl, #8]
  40a564:	2b00      	cmp	r3, #0
  40a566:	f43f af78 	beq.w	40a45a <__sfvwrite_r+0x5e>
  40a56a:	2e00      	cmp	r6, #0
  40a56c:	d1d5      	bne.n	40a51a <__sfvwrite_r+0x11e>
  40a56e:	f108 0308 	add.w	r3, r8, #8
  40a572:	e913 0060 	ldmdb	r3, {r5, r6}
  40a576:	4698      	mov	r8, r3
  40a578:	3308      	adds	r3, #8
  40a57a:	2e00      	cmp	r6, #0
  40a57c:	d0f9      	beq.n	40a572 <__sfvwrite_r+0x176>
  40a57e:	4632      	mov	r2, r6
  40a580:	210a      	movs	r1, #10
  40a582:	4628      	mov	r0, r5
  40a584:	f000 fc4c 	bl	40ae20 <memchr>
  40a588:	2800      	cmp	r0, #0
  40a58a:	f000 80a1 	beq.w	40a6d0 <__sfvwrite_r+0x2d4>
  40a58e:	3001      	adds	r0, #1
  40a590:	eba0 0905 	sub.w	r9, r0, r5
  40a594:	e7c2      	b.n	40a51c <__sfvwrite_r+0x120>
  40a596:	6820      	ldr	r0, [r4, #0]
  40a598:	6923      	ldr	r3, [r4, #16]
  40a59a:	4298      	cmp	r0, r3
  40a59c:	d802      	bhi.n	40a5a4 <__sfvwrite_r+0x1a8>
  40a59e:	6963      	ldr	r3, [r4, #20]
  40a5a0:	429f      	cmp	r7, r3
  40a5a2:	d25d      	bcs.n	40a660 <__sfvwrite_r+0x264>
  40a5a4:	45b8      	cmp	r8, r7
  40a5a6:	bf28      	it	cs
  40a5a8:	46b8      	movcs	r8, r7
  40a5aa:	4642      	mov	r2, r8
  40a5ac:	4649      	mov	r1, r9
  40a5ae:	f000 fc87 	bl	40aec0 <memmove>
  40a5b2:	68a3      	ldr	r3, [r4, #8]
  40a5b4:	6822      	ldr	r2, [r4, #0]
  40a5b6:	eba3 0308 	sub.w	r3, r3, r8
  40a5ba:	4442      	add	r2, r8
  40a5bc:	60a3      	str	r3, [r4, #8]
  40a5be:	6022      	str	r2, [r4, #0]
  40a5c0:	b10b      	cbz	r3, 40a5c6 <__sfvwrite_r+0x1ca>
  40a5c2:	46c2      	mov	sl, r8
  40a5c4:	e779      	b.n	40a4ba <__sfvwrite_r+0xbe>
  40a5c6:	4621      	mov	r1, r4
  40a5c8:	9800      	ldr	r0, [sp, #0]
  40a5ca:	f7ff fcb3 	bl	409f34 <_fflush_r>
  40a5ce:	2800      	cmp	r0, #0
  40a5d0:	d192      	bne.n	40a4f8 <__sfvwrite_r+0xfc>
  40a5d2:	46c2      	mov	sl, r8
  40a5d4:	e771      	b.n	40a4ba <__sfvwrite_r+0xbe>
  40a5d6:	465a      	mov	r2, fp
  40a5d8:	4629      	mov	r1, r5
  40a5da:	f000 fc71 	bl	40aec0 <memmove>
  40a5de:	68a2      	ldr	r2, [r4, #8]
  40a5e0:	6823      	ldr	r3, [r4, #0]
  40a5e2:	eba2 020b 	sub.w	r2, r2, fp
  40a5e6:	445b      	add	r3, fp
  40a5e8:	60a2      	str	r2, [r4, #8]
  40a5ea:	6023      	str	r3, [r4, #0]
  40a5ec:	e7af      	b.n	40a54e <__sfvwrite_r+0x152>
  40a5ee:	6820      	ldr	r0, [r4, #0]
  40a5f0:	46b8      	mov	r8, r7
  40a5f2:	46ba      	mov	sl, r7
  40a5f4:	46bb      	mov	fp, r7
  40a5f6:	e755      	b.n	40a4a4 <__sfvwrite_r+0xa8>
  40a5f8:	6962      	ldr	r2, [r4, #20]
  40a5fa:	6820      	ldr	r0, [r4, #0]
  40a5fc:	6921      	ldr	r1, [r4, #16]
  40a5fe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40a602:	eba0 0a01 	sub.w	sl, r0, r1
  40a606:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40a60a:	f10a 0001 	add.w	r0, sl, #1
  40a60e:	ea4f 0868 	mov.w	r8, r8, asr #1
  40a612:	4438      	add	r0, r7
  40a614:	4540      	cmp	r0, r8
  40a616:	4642      	mov	r2, r8
  40a618:	bf84      	itt	hi
  40a61a:	4680      	movhi	r8, r0
  40a61c:	4642      	movhi	r2, r8
  40a61e:	055b      	lsls	r3, r3, #21
  40a620:	d544      	bpl.n	40a6ac <__sfvwrite_r+0x2b0>
  40a622:	4611      	mov	r1, r2
  40a624:	9800      	ldr	r0, [sp, #0]
  40a626:	f000 f92f 	bl	40a888 <_malloc_r>
  40a62a:	4683      	mov	fp, r0
  40a62c:	2800      	cmp	r0, #0
  40a62e:	d055      	beq.n	40a6dc <__sfvwrite_r+0x2e0>
  40a630:	4652      	mov	r2, sl
  40a632:	6921      	ldr	r1, [r4, #16]
  40a634:	f7fc f800 	bl	406638 <memcpy>
  40a638:	89a3      	ldrh	r3, [r4, #12]
  40a63a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40a63e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a642:	81a3      	strh	r3, [r4, #12]
  40a644:	eb0b 000a 	add.w	r0, fp, sl
  40a648:	eba8 030a 	sub.w	r3, r8, sl
  40a64c:	f8c4 b010 	str.w	fp, [r4, #16]
  40a650:	f8c4 8014 	str.w	r8, [r4, #20]
  40a654:	6020      	str	r0, [r4, #0]
  40a656:	60a3      	str	r3, [r4, #8]
  40a658:	46b8      	mov	r8, r7
  40a65a:	46ba      	mov	sl, r7
  40a65c:	46bb      	mov	fp, r7
  40a65e:	e721      	b.n	40a4a4 <__sfvwrite_r+0xa8>
  40a660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40a664:	42b9      	cmp	r1, r7
  40a666:	bf28      	it	cs
  40a668:	4639      	movcs	r1, r7
  40a66a:	464a      	mov	r2, r9
  40a66c:	fb91 f1f3 	sdiv	r1, r1, r3
  40a670:	9800      	ldr	r0, [sp, #0]
  40a672:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a674:	fb03 f301 	mul.w	r3, r3, r1
  40a678:	69e1      	ldr	r1, [r4, #28]
  40a67a:	47b0      	blx	r6
  40a67c:	f1b0 0a00 	subs.w	sl, r0, #0
  40a680:	f73f af1b 	bgt.w	40a4ba <__sfvwrite_r+0xbe>
  40a684:	e738      	b.n	40a4f8 <__sfvwrite_r+0xfc>
  40a686:	461a      	mov	r2, r3
  40a688:	4629      	mov	r1, r5
  40a68a:	9301      	str	r3, [sp, #4]
  40a68c:	f000 fc18 	bl	40aec0 <memmove>
  40a690:	6822      	ldr	r2, [r4, #0]
  40a692:	9b01      	ldr	r3, [sp, #4]
  40a694:	9800      	ldr	r0, [sp, #0]
  40a696:	441a      	add	r2, r3
  40a698:	6022      	str	r2, [r4, #0]
  40a69a:	4621      	mov	r1, r4
  40a69c:	f7ff fc4a 	bl	409f34 <_fflush_r>
  40a6a0:	9b01      	ldr	r3, [sp, #4]
  40a6a2:	2800      	cmp	r0, #0
  40a6a4:	f47f af28 	bne.w	40a4f8 <__sfvwrite_r+0xfc>
  40a6a8:	461f      	mov	r7, r3
  40a6aa:	e750      	b.n	40a54e <__sfvwrite_r+0x152>
  40a6ac:	9800      	ldr	r0, [sp, #0]
  40a6ae:	f000 ff71 	bl	40b594 <_realloc_r>
  40a6b2:	4683      	mov	fp, r0
  40a6b4:	2800      	cmp	r0, #0
  40a6b6:	d1c5      	bne.n	40a644 <__sfvwrite_r+0x248>
  40a6b8:	9d00      	ldr	r5, [sp, #0]
  40a6ba:	6921      	ldr	r1, [r4, #16]
  40a6bc:	4628      	mov	r0, r5
  40a6be:	f7ff fdb7 	bl	40a230 <_free_r>
  40a6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a6c6:	220c      	movs	r2, #12
  40a6c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40a6cc:	602a      	str	r2, [r5, #0]
  40a6ce:	e715      	b.n	40a4fc <__sfvwrite_r+0x100>
  40a6d0:	f106 0901 	add.w	r9, r6, #1
  40a6d4:	e722      	b.n	40a51c <__sfvwrite_r+0x120>
  40a6d6:	f04f 30ff 	mov.w	r0, #4294967295
  40a6da:	e6bf      	b.n	40a45c <__sfvwrite_r+0x60>
  40a6dc:	9a00      	ldr	r2, [sp, #0]
  40a6de:	230c      	movs	r3, #12
  40a6e0:	6013      	str	r3, [r2, #0]
  40a6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a6e6:	e709      	b.n	40a4fc <__sfvwrite_r+0x100>
  40a6e8:	7ffffc00 	.word	0x7ffffc00

0040a6ec <_fwalk_reent>:
  40a6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a6f0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40a6f4:	d01f      	beq.n	40a736 <_fwalk_reent+0x4a>
  40a6f6:	4688      	mov	r8, r1
  40a6f8:	4606      	mov	r6, r0
  40a6fa:	f04f 0900 	mov.w	r9, #0
  40a6fe:	687d      	ldr	r5, [r7, #4]
  40a700:	68bc      	ldr	r4, [r7, #8]
  40a702:	3d01      	subs	r5, #1
  40a704:	d411      	bmi.n	40a72a <_fwalk_reent+0x3e>
  40a706:	89a3      	ldrh	r3, [r4, #12]
  40a708:	2b01      	cmp	r3, #1
  40a70a:	f105 35ff 	add.w	r5, r5, #4294967295
  40a70e:	d908      	bls.n	40a722 <_fwalk_reent+0x36>
  40a710:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40a714:	3301      	adds	r3, #1
  40a716:	4621      	mov	r1, r4
  40a718:	4630      	mov	r0, r6
  40a71a:	d002      	beq.n	40a722 <_fwalk_reent+0x36>
  40a71c:	47c0      	blx	r8
  40a71e:	ea49 0900 	orr.w	r9, r9, r0
  40a722:	1c6b      	adds	r3, r5, #1
  40a724:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40a728:	d1ed      	bne.n	40a706 <_fwalk_reent+0x1a>
  40a72a:	683f      	ldr	r7, [r7, #0]
  40a72c:	2f00      	cmp	r7, #0
  40a72e:	d1e6      	bne.n	40a6fe <_fwalk_reent+0x12>
  40a730:	4648      	mov	r0, r9
  40a732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a736:	46b9      	mov	r9, r7
  40a738:	4648      	mov	r0, r9
  40a73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a73e:	bf00      	nop

0040a740 <__locale_mb_cur_max>:
  40a740:	4b04      	ldr	r3, [pc, #16]	; (40a754 <__locale_mb_cur_max+0x14>)
  40a742:	4a05      	ldr	r2, [pc, #20]	; (40a758 <__locale_mb_cur_max+0x18>)
  40a744:	681b      	ldr	r3, [r3, #0]
  40a746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40a748:	2b00      	cmp	r3, #0
  40a74a:	bf08      	it	eq
  40a74c:	4613      	moveq	r3, r2
  40a74e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40a752:	4770      	bx	lr
  40a754:	20400028 	.word	0x20400028
  40a758:	2040045c 	.word	0x2040045c

0040a75c <_localeconv_r>:
  40a75c:	4a04      	ldr	r2, [pc, #16]	; (40a770 <_localeconv_r+0x14>)
  40a75e:	4b05      	ldr	r3, [pc, #20]	; (40a774 <_localeconv_r+0x18>)
  40a760:	6812      	ldr	r2, [r2, #0]
  40a762:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40a764:	2800      	cmp	r0, #0
  40a766:	bf08      	it	eq
  40a768:	4618      	moveq	r0, r3
  40a76a:	30f0      	adds	r0, #240	; 0xf0
  40a76c:	4770      	bx	lr
  40a76e:	bf00      	nop
  40a770:	20400028 	.word	0x20400028
  40a774:	2040045c 	.word	0x2040045c

0040a778 <__retarget_lock_init_recursive>:
  40a778:	4770      	bx	lr
  40a77a:	bf00      	nop

0040a77c <__retarget_lock_close_recursive>:
  40a77c:	4770      	bx	lr
  40a77e:	bf00      	nop

0040a780 <__retarget_lock_acquire_recursive>:
  40a780:	4770      	bx	lr
  40a782:	bf00      	nop

0040a784 <__retarget_lock_release_recursive>:
  40a784:	4770      	bx	lr
  40a786:	bf00      	nop

0040a788 <__swhatbuf_r>:
  40a788:	b570      	push	{r4, r5, r6, lr}
  40a78a:	460c      	mov	r4, r1
  40a78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a790:	2900      	cmp	r1, #0
  40a792:	b090      	sub	sp, #64	; 0x40
  40a794:	4615      	mov	r5, r2
  40a796:	461e      	mov	r6, r3
  40a798:	db14      	blt.n	40a7c4 <__swhatbuf_r+0x3c>
  40a79a:	aa01      	add	r2, sp, #4
  40a79c:	f001 fb20 	bl	40bde0 <_fstat_r>
  40a7a0:	2800      	cmp	r0, #0
  40a7a2:	db0f      	blt.n	40a7c4 <__swhatbuf_r+0x3c>
  40a7a4:	9a02      	ldr	r2, [sp, #8]
  40a7a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40a7aa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40a7ae:	fab2 f282 	clz	r2, r2
  40a7b2:	0952      	lsrs	r2, r2, #5
  40a7b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a7b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40a7bc:	6032      	str	r2, [r6, #0]
  40a7be:	602b      	str	r3, [r5, #0]
  40a7c0:	b010      	add	sp, #64	; 0x40
  40a7c2:	bd70      	pop	{r4, r5, r6, pc}
  40a7c4:	89a2      	ldrh	r2, [r4, #12]
  40a7c6:	2300      	movs	r3, #0
  40a7c8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40a7cc:	6033      	str	r3, [r6, #0]
  40a7ce:	d004      	beq.n	40a7da <__swhatbuf_r+0x52>
  40a7d0:	2240      	movs	r2, #64	; 0x40
  40a7d2:	4618      	mov	r0, r3
  40a7d4:	602a      	str	r2, [r5, #0]
  40a7d6:	b010      	add	sp, #64	; 0x40
  40a7d8:	bd70      	pop	{r4, r5, r6, pc}
  40a7da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a7de:	602b      	str	r3, [r5, #0]
  40a7e0:	b010      	add	sp, #64	; 0x40
  40a7e2:	bd70      	pop	{r4, r5, r6, pc}

0040a7e4 <__smakebuf_r>:
  40a7e4:	898a      	ldrh	r2, [r1, #12]
  40a7e6:	0792      	lsls	r2, r2, #30
  40a7e8:	460b      	mov	r3, r1
  40a7ea:	d506      	bpl.n	40a7fa <__smakebuf_r+0x16>
  40a7ec:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40a7f0:	2101      	movs	r1, #1
  40a7f2:	601a      	str	r2, [r3, #0]
  40a7f4:	611a      	str	r2, [r3, #16]
  40a7f6:	6159      	str	r1, [r3, #20]
  40a7f8:	4770      	bx	lr
  40a7fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a7fc:	b083      	sub	sp, #12
  40a7fe:	ab01      	add	r3, sp, #4
  40a800:	466a      	mov	r2, sp
  40a802:	460c      	mov	r4, r1
  40a804:	4606      	mov	r6, r0
  40a806:	f7ff ffbf 	bl	40a788 <__swhatbuf_r>
  40a80a:	9900      	ldr	r1, [sp, #0]
  40a80c:	4605      	mov	r5, r0
  40a80e:	4630      	mov	r0, r6
  40a810:	f000 f83a 	bl	40a888 <_malloc_r>
  40a814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a818:	b1d8      	cbz	r0, 40a852 <__smakebuf_r+0x6e>
  40a81a:	9a01      	ldr	r2, [sp, #4]
  40a81c:	4f15      	ldr	r7, [pc, #84]	; (40a874 <__smakebuf_r+0x90>)
  40a81e:	9900      	ldr	r1, [sp, #0]
  40a820:	63f7      	str	r7, [r6, #60]	; 0x3c
  40a822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a826:	81a3      	strh	r3, [r4, #12]
  40a828:	6020      	str	r0, [r4, #0]
  40a82a:	6120      	str	r0, [r4, #16]
  40a82c:	6161      	str	r1, [r4, #20]
  40a82e:	b91a      	cbnz	r2, 40a838 <__smakebuf_r+0x54>
  40a830:	432b      	orrs	r3, r5
  40a832:	81a3      	strh	r3, [r4, #12]
  40a834:	b003      	add	sp, #12
  40a836:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a838:	4630      	mov	r0, r6
  40a83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a83e:	f001 fae3 	bl	40be08 <_isatty_r>
  40a842:	b1a0      	cbz	r0, 40a86e <__smakebuf_r+0x8a>
  40a844:	89a3      	ldrh	r3, [r4, #12]
  40a846:	f023 0303 	bic.w	r3, r3, #3
  40a84a:	f043 0301 	orr.w	r3, r3, #1
  40a84e:	b21b      	sxth	r3, r3
  40a850:	e7ee      	b.n	40a830 <__smakebuf_r+0x4c>
  40a852:	059a      	lsls	r2, r3, #22
  40a854:	d4ee      	bmi.n	40a834 <__smakebuf_r+0x50>
  40a856:	f023 0303 	bic.w	r3, r3, #3
  40a85a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40a85e:	f043 0302 	orr.w	r3, r3, #2
  40a862:	2101      	movs	r1, #1
  40a864:	81a3      	strh	r3, [r4, #12]
  40a866:	6022      	str	r2, [r4, #0]
  40a868:	6122      	str	r2, [r4, #16]
  40a86a:	6161      	str	r1, [r4, #20]
  40a86c:	e7e2      	b.n	40a834 <__smakebuf_r+0x50>
  40a86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a872:	e7dd      	b.n	40a830 <__smakebuf_r+0x4c>
  40a874:	00409f89 	.word	0x00409f89

0040a878 <malloc>:
  40a878:	4b02      	ldr	r3, [pc, #8]	; (40a884 <malloc+0xc>)
  40a87a:	4601      	mov	r1, r0
  40a87c:	6818      	ldr	r0, [r3, #0]
  40a87e:	f000 b803 	b.w	40a888 <_malloc_r>
  40a882:	bf00      	nop
  40a884:	20400028 	.word	0x20400028

0040a888 <_malloc_r>:
  40a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a88c:	f101 060b 	add.w	r6, r1, #11
  40a890:	2e16      	cmp	r6, #22
  40a892:	b083      	sub	sp, #12
  40a894:	4605      	mov	r5, r0
  40a896:	f240 809e 	bls.w	40a9d6 <_malloc_r+0x14e>
  40a89a:	f036 0607 	bics.w	r6, r6, #7
  40a89e:	f100 80bd 	bmi.w	40aa1c <_malloc_r+0x194>
  40a8a2:	42b1      	cmp	r1, r6
  40a8a4:	f200 80ba 	bhi.w	40aa1c <_malloc_r+0x194>
  40a8a8:	f000 fb6e 	bl	40af88 <__malloc_lock>
  40a8ac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40a8b0:	f0c0 8293 	bcc.w	40adda <_malloc_r+0x552>
  40a8b4:	0a73      	lsrs	r3, r6, #9
  40a8b6:	f000 80b8 	beq.w	40aa2a <_malloc_r+0x1a2>
  40a8ba:	2b04      	cmp	r3, #4
  40a8bc:	f200 8179 	bhi.w	40abb2 <_malloc_r+0x32a>
  40a8c0:	09b3      	lsrs	r3, r6, #6
  40a8c2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40a8c6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40a8ca:	00c3      	lsls	r3, r0, #3
  40a8cc:	4fbf      	ldr	r7, [pc, #764]	; (40abcc <_malloc_r+0x344>)
  40a8ce:	443b      	add	r3, r7
  40a8d0:	f1a3 0108 	sub.w	r1, r3, #8
  40a8d4:	685c      	ldr	r4, [r3, #4]
  40a8d6:	42a1      	cmp	r1, r4
  40a8d8:	d106      	bne.n	40a8e8 <_malloc_r+0x60>
  40a8da:	e00c      	b.n	40a8f6 <_malloc_r+0x6e>
  40a8dc:	2a00      	cmp	r2, #0
  40a8de:	f280 80aa 	bge.w	40aa36 <_malloc_r+0x1ae>
  40a8e2:	68e4      	ldr	r4, [r4, #12]
  40a8e4:	42a1      	cmp	r1, r4
  40a8e6:	d006      	beq.n	40a8f6 <_malloc_r+0x6e>
  40a8e8:	6863      	ldr	r3, [r4, #4]
  40a8ea:	f023 0303 	bic.w	r3, r3, #3
  40a8ee:	1b9a      	subs	r2, r3, r6
  40a8f0:	2a0f      	cmp	r2, #15
  40a8f2:	ddf3      	ble.n	40a8dc <_malloc_r+0x54>
  40a8f4:	4670      	mov	r0, lr
  40a8f6:	693c      	ldr	r4, [r7, #16]
  40a8f8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40abe0 <_malloc_r+0x358>
  40a8fc:	4574      	cmp	r4, lr
  40a8fe:	f000 81ab 	beq.w	40ac58 <_malloc_r+0x3d0>
  40a902:	6863      	ldr	r3, [r4, #4]
  40a904:	f023 0303 	bic.w	r3, r3, #3
  40a908:	1b9a      	subs	r2, r3, r6
  40a90a:	2a0f      	cmp	r2, #15
  40a90c:	f300 8190 	bgt.w	40ac30 <_malloc_r+0x3a8>
  40a910:	2a00      	cmp	r2, #0
  40a912:	f8c7 e014 	str.w	lr, [r7, #20]
  40a916:	f8c7 e010 	str.w	lr, [r7, #16]
  40a91a:	f280 809d 	bge.w	40aa58 <_malloc_r+0x1d0>
  40a91e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a922:	f080 8161 	bcs.w	40abe8 <_malloc_r+0x360>
  40a926:	08db      	lsrs	r3, r3, #3
  40a928:	f103 0c01 	add.w	ip, r3, #1
  40a92c:	1099      	asrs	r1, r3, #2
  40a92e:	687a      	ldr	r2, [r7, #4]
  40a930:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40a934:	f8c4 8008 	str.w	r8, [r4, #8]
  40a938:	2301      	movs	r3, #1
  40a93a:	408b      	lsls	r3, r1
  40a93c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40a940:	4313      	orrs	r3, r2
  40a942:	3908      	subs	r1, #8
  40a944:	60e1      	str	r1, [r4, #12]
  40a946:	607b      	str	r3, [r7, #4]
  40a948:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40a94c:	f8c8 400c 	str.w	r4, [r8, #12]
  40a950:	1082      	asrs	r2, r0, #2
  40a952:	2401      	movs	r4, #1
  40a954:	4094      	lsls	r4, r2
  40a956:	429c      	cmp	r4, r3
  40a958:	f200 808b 	bhi.w	40aa72 <_malloc_r+0x1ea>
  40a95c:	421c      	tst	r4, r3
  40a95e:	d106      	bne.n	40a96e <_malloc_r+0xe6>
  40a960:	f020 0003 	bic.w	r0, r0, #3
  40a964:	0064      	lsls	r4, r4, #1
  40a966:	421c      	tst	r4, r3
  40a968:	f100 0004 	add.w	r0, r0, #4
  40a96c:	d0fa      	beq.n	40a964 <_malloc_r+0xdc>
  40a96e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40a972:	46cc      	mov	ip, r9
  40a974:	4680      	mov	r8, r0
  40a976:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40a97a:	459c      	cmp	ip, r3
  40a97c:	d107      	bne.n	40a98e <_malloc_r+0x106>
  40a97e:	e16d      	b.n	40ac5c <_malloc_r+0x3d4>
  40a980:	2a00      	cmp	r2, #0
  40a982:	f280 817b 	bge.w	40ac7c <_malloc_r+0x3f4>
  40a986:	68db      	ldr	r3, [r3, #12]
  40a988:	459c      	cmp	ip, r3
  40a98a:	f000 8167 	beq.w	40ac5c <_malloc_r+0x3d4>
  40a98e:	6859      	ldr	r1, [r3, #4]
  40a990:	f021 0103 	bic.w	r1, r1, #3
  40a994:	1b8a      	subs	r2, r1, r6
  40a996:	2a0f      	cmp	r2, #15
  40a998:	ddf2      	ble.n	40a980 <_malloc_r+0xf8>
  40a99a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40a99e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40a9a2:	9300      	str	r3, [sp, #0]
  40a9a4:	199c      	adds	r4, r3, r6
  40a9a6:	4628      	mov	r0, r5
  40a9a8:	f046 0601 	orr.w	r6, r6, #1
  40a9ac:	f042 0501 	orr.w	r5, r2, #1
  40a9b0:	605e      	str	r6, [r3, #4]
  40a9b2:	f8c8 c00c 	str.w	ip, [r8, #12]
  40a9b6:	f8cc 8008 	str.w	r8, [ip, #8]
  40a9ba:	617c      	str	r4, [r7, #20]
  40a9bc:	613c      	str	r4, [r7, #16]
  40a9be:	f8c4 e00c 	str.w	lr, [r4, #12]
  40a9c2:	f8c4 e008 	str.w	lr, [r4, #8]
  40a9c6:	6065      	str	r5, [r4, #4]
  40a9c8:	505a      	str	r2, [r3, r1]
  40a9ca:	f000 fae3 	bl	40af94 <__malloc_unlock>
  40a9ce:	9b00      	ldr	r3, [sp, #0]
  40a9d0:	f103 0408 	add.w	r4, r3, #8
  40a9d4:	e01e      	b.n	40aa14 <_malloc_r+0x18c>
  40a9d6:	2910      	cmp	r1, #16
  40a9d8:	d820      	bhi.n	40aa1c <_malloc_r+0x194>
  40a9da:	f000 fad5 	bl	40af88 <__malloc_lock>
  40a9de:	2610      	movs	r6, #16
  40a9e0:	2318      	movs	r3, #24
  40a9e2:	2002      	movs	r0, #2
  40a9e4:	4f79      	ldr	r7, [pc, #484]	; (40abcc <_malloc_r+0x344>)
  40a9e6:	443b      	add	r3, r7
  40a9e8:	f1a3 0208 	sub.w	r2, r3, #8
  40a9ec:	685c      	ldr	r4, [r3, #4]
  40a9ee:	4294      	cmp	r4, r2
  40a9f0:	f000 813d 	beq.w	40ac6e <_malloc_r+0x3e6>
  40a9f4:	6863      	ldr	r3, [r4, #4]
  40a9f6:	68e1      	ldr	r1, [r4, #12]
  40a9f8:	68a6      	ldr	r6, [r4, #8]
  40a9fa:	f023 0303 	bic.w	r3, r3, #3
  40a9fe:	4423      	add	r3, r4
  40aa00:	4628      	mov	r0, r5
  40aa02:	685a      	ldr	r2, [r3, #4]
  40aa04:	60f1      	str	r1, [r6, #12]
  40aa06:	f042 0201 	orr.w	r2, r2, #1
  40aa0a:	608e      	str	r6, [r1, #8]
  40aa0c:	605a      	str	r2, [r3, #4]
  40aa0e:	f000 fac1 	bl	40af94 <__malloc_unlock>
  40aa12:	3408      	adds	r4, #8
  40aa14:	4620      	mov	r0, r4
  40aa16:	b003      	add	sp, #12
  40aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa1c:	2400      	movs	r4, #0
  40aa1e:	230c      	movs	r3, #12
  40aa20:	4620      	mov	r0, r4
  40aa22:	602b      	str	r3, [r5, #0]
  40aa24:	b003      	add	sp, #12
  40aa26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa2a:	2040      	movs	r0, #64	; 0x40
  40aa2c:	f44f 7300 	mov.w	r3, #512	; 0x200
  40aa30:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40aa34:	e74a      	b.n	40a8cc <_malloc_r+0x44>
  40aa36:	4423      	add	r3, r4
  40aa38:	68e1      	ldr	r1, [r4, #12]
  40aa3a:	685a      	ldr	r2, [r3, #4]
  40aa3c:	68a6      	ldr	r6, [r4, #8]
  40aa3e:	f042 0201 	orr.w	r2, r2, #1
  40aa42:	60f1      	str	r1, [r6, #12]
  40aa44:	4628      	mov	r0, r5
  40aa46:	608e      	str	r6, [r1, #8]
  40aa48:	605a      	str	r2, [r3, #4]
  40aa4a:	f000 faa3 	bl	40af94 <__malloc_unlock>
  40aa4e:	3408      	adds	r4, #8
  40aa50:	4620      	mov	r0, r4
  40aa52:	b003      	add	sp, #12
  40aa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa58:	4423      	add	r3, r4
  40aa5a:	4628      	mov	r0, r5
  40aa5c:	685a      	ldr	r2, [r3, #4]
  40aa5e:	f042 0201 	orr.w	r2, r2, #1
  40aa62:	605a      	str	r2, [r3, #4]
  40aa64:	f000 fa96 	bl	40af94 <__malloc_unlock>
  40aa68:	3408      	adds	r4, #8
  40aa6a:	4620      	mov	r0, r4
  40aa6c:	b003      	add	sp, #12
  40aa6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa72:	68bc      	ldr	r4, [r7, #8]
  40aa74:	6863      	ldr	r3, [r4, #4]
  40aa76:	f023 0803 	bic.w	r8, r3, #3
  40aa7a:	45b0      	cmp	r8, r6
  40aa7c:	d304      	bcc.n	40aa88 <_malloc_r+0x200>
  40aa7e:	eba8 0306 	sub.w	r3, r8, r6
  40aa82:	2b0f      	cmp	r3, #15
  40aa84:	f300 8085 	bgt.w	40ab92 <_malloc_r+0x30a>
  40aa88:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40abe4 <_malloc_r+0x35c>
  40aa8c:	4b50      	ldr	r3, [pc, #320]	; (40abd0 <_malloc_r+0x348>)
  40aa8e:	f8d9 2000 	ldr.w	r2, [r9]
  40aa92:	681b      	ldr	r3, [r3, #0]
  40aa94:	3201      	adds	r2, #1
  40aa96:	4433      	add	r3, r6
  40aa98:	eb04 0a08 	add.w	sl, r4, r8
  40aa9c:	f000 8155 	beq.w	40ad4a <_malloc_r+0x4c2>
  40aaa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40aaa4:	330f      	adds	r3, #15
  40aaa6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40aaaa:	f02b 0b0f 	bic.w	fp, fp, #15
  40aaae:	4659      	mov	r1, fp
  40aab0:	4628      	mov	r0, r5
  40aab2:	f000 ff15 	bl	40b8e0 <_sbrk_r>
  40aab6:	1c41      	adds	r1, r0, #1
  40aab8:	4602      	mov	r2, r0
  40aaba:	f000 80fc 	beq.w	40acb6 <_malloc_r+0x42e>
  40aabe:	4582      	cmp	sl, r0
  40aac0:	f200 80f7 	bhi.w	40acb2 <_malloc_r+0x42a>
  40aac4:	4b43      	ldr	r3, [pc, #268]	; (40abd4 <_malloc_r+0x34c>)
  40aac6:	6819      	ldr	r1, [r3, #0]
  40aac8:	4459      	add	r1, fp
  40aaca:	6019      	str	r1, [r3, #0]
  40aacc:	f000 814d 	beq.w	40ad6a <_malloc_r+0x4e2>
  40aad0:	f8d9 0000 	ldr.w	r0, [r9]
  40aad4:	3001      	adds	r0, #1
  40aad6:	bf1b      	ittet	ne
  40aad8:	eba2 0a0a 	subne.w	sl, r2, sl
  40aadc:	4451      	addne	r1, sl
  40aade:	f8c9 2000 	streq.w	r2, [r9]
  40aae2:	6019      	strne	r1, [r3, #0]
  40aae4:	f012 0107 	ands.w	r1, r2, #7
  40aae8:	f000 8115 	beq.w	40ad16 <_malloc_r+0x48e>
  40aaec:	f1c1 0008 	rsb	r0, r1, #8
  40aaf0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40aaf4:	4402      	add	r2, r0
  40aaf6:	3108      	adds	r1, #8
  40aaf8:	eb02 090b 	add.w	r9, r2, fp
  40aafc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40ab00:	eba1 0909 	sub.w	r9, r1, r9
  40ab04:	4649      	mov	r1, r9
  40ab06:	4628      	mov	r0, r5
  40ab08:	9301      	str	r3, [sp, #4]
  40ab0a:	9200      	str	r2, [sp, #0]
  40ab0c:	f000 fee8 	bl	40b8e0 <_sbrk_r>
  40ab10:	1c43      	adds	r3, r0, #1
  40ab12:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ab16:	f000 8143 	beq.w	40ada0 <_malloc_r+0x518>
  40ab1a:	1a80      	subs	r0, r0, r2
  40ab1c:	4448      	add	r0, r9
  40ab1e:	f040 0001 	orr.w	r0, r0, #1
  40ab22:	6819      	ldr	r1, [r3, #0]
  40ab24:	60ba      	str	r2, [r7, #8]
  40ab26:	4449      	add	r1, r9
  40ab28:	42bc      	cmp	r4, r7
  40ab2a:	6050      	str	r0, [r2, #4]
  40ab2c:	6019      	str	r1, [r3, #0]
  40ab2e:	d017      	beq.n	40ab60 <_malloc_r+0x2d8>
  40ab30:	f1b8 0f0f 	cmp.w	r8, #15
  40ab34:	f240 80fb 	bls.w	40ad2e <_malloc_r+0x4a6>
  40ab38:	6860      	ldr	r0, [r4, #4]
  40ab3a:	f1a8 020c 	sub.w	r2, r8, #12
  40ab3e:	f022 0207 	bic.w	r2, r2, #7
  40ab42:	eb04 0e02 	add.w	lr, r4, r2
  40ab46:	f000 0001 	and.w	r0, r0, #1
  40ab4a:	f04f 0c05 	mov.w	ip, #5
  40ab4e:	4310      	orrs	r0, r2
  40ab50:	2a0f      	cmp	r2, #15
  40ab52:	6060      	str	r0, [r4, #4]
  40ab54:	f8ce c004 	str.w	ip, [lr, #4]
  40ab58:	f8ce c008 	str.w	ip, [lr, #8]
  40ab5c:	f200 8117 	bhi.w	40ad8e <_malloc_r+0x506>
  40ab60:	4b1d      	ldr	r3, [pc, #116]	; (40abd8 <_malloc_r+0x350>)
  40ab62:	68bc      	ldr	r4, [r7, #8]
  40ab64:	681a      	ldr	r2, [r3, #0]
  40ab66:	4291      	cmp	r1, r2
  40ab68:	bf88      	it	hi
  40ab6a:	6019      	strhi	r1, [r3, #0]
  40ab6c:	4b1b      	ldr	r3, [pc, #108]	; (40abdc <_malloc_r+0x354>)
  40ab6e:	681a      	ldr	r2, [r3, #0]
  40ab70:	4291      	cmp	r1, r2
  40ab72:	6862      	ldr	r2, [r4, #4]
  40ab74:	bf88      	it	hi
  40ab76:	6019      	strhi	r1, [r3, #0]
  40ab78:	f022 0203 	bic.w	r2, r2, #3
  40ab7c:	4296      	cmp	r6, r2
  40ab7e:	eba2 0306 	sub.w	r3, r2, r6
  40ab82:	d801      	bhi.n	40ab88 <_malloc_r+0x300>
  40ab84:	2b0f      	cmp	r3, #15
  40ab86:	dc04      	bgt.n	40ab92 <_malloc_r+0x30a>
  40ab88:	4628      	mov	r0, r5
  40ab8a:	f000 fa03 	bl	40af94 <__malloc_unlock>
  40ab8e:	2400      	movs	r4, #0
  40ab90:	e740      	b.n	40aa14 <_malloc_r+0x18c>
  40ab92:	19a2      	adds	r2, r4, r6
  40ab94:	f043 0301 	orr.w	r3, r3, #1
  40ab98:	f046 0601 	orr.w	r6, r6, #1
  40ab9c:	6066      	str	r6, [r4, #4]
  40ab9e:	4628      	mov	r0, r5
  40aba0:	60ba      	str	r2, [r7, #8]
  40aba2:	6053      	str	r3, [r2, #4]
  40aba4:	f000 f9f6 	bl	40af94 <__malloc_unlock>
  40aba8:	3408      	adds	r4, #8
  40abaa:	4620      	mov	r0, r4
  40abac:	b003      	add	sp, #12
  40abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40abb2:	2b14      	cmp	r3, #20
  40abb4:	d971      	bls.n	40ac9a <_malloc_r+0x412>
  40abb6:	2b54      	cmp	r3, #84	; 0x54
  40abb8:	f200 80a3 	bhi.w	40ad02 <_malloc_r+0x47a>
  40abbc:	0b33      	lsrs	r3, r6, #12
  40abbe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40abc2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40abc6:	00c3      	lsls	r3, r0, #3
  40abc8:	e680      	b.n	40a8cc <_malloc_r+0x44>
  40abca:	bf00      	nop
  40abcc:	204005c8 	.word	0x204005c8
  40abd0:	2040c9a0 	.word	0x2040c9a0
  40abd4:	2040c970 	.word	0x2040c970
  40abd8:	2040c998 	.word	0x2040c998
  40abdc:	2040c99c 	.word	0x2040c99c
  40abe0:	204005d0 	.word	0x204005d0
  40abe4:	204009d0 	.word	0x204009d0
  40abe8:	0a5a      	lsrs	r2, r3, #9
  40abea:	2a04      	cmp	r2, #4
  40abec:	d95b      	bls.n	40aca6 <_malloc_r+0x41e>
  40abee:	2a14      	cmp	r2, #20
  40abf0:	f200 80ae 	bhi.w	40ad50 <_malloc_r+0x4c8>
  40abf4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40abf8:	00c9      	lsls	r1, r1, #3
  40abfa:	325b      	adds	r2, #91	; 0x5b
  40abfc:	eb07 0c01 	add.w	ip, r7, r1
  40ac00:	5879      	ldr	r1, [r7, r1]
  40ac02:	f1ac 0c08 	sub.w	ip, ip, #8
  40ac06:	458c      	cmp	ip, r1
  40ac08:	f000 8088 	beq.w	40ad1c <_malloc_r+0x494>
  40ac0c:	684a      	ldr	r2, [r1, #4]
  40ac0e:	f022 0203 	bic.w	r2, r2, #3
  40ac12:	4293      	cmp	r3, r2
  40ac14:	d273      	bcs.n	40acfe <_malloc_r+0x476>
  40ac16:	6889      	ldr	r1, [r1, #8]
  40ac18:	458c      	cmp	ip, r1
  40ac1a:	d1f7      	bne.n	40ac0c <_malloc_r+0x384>
  40ac1c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40ac20:	687b      	ldr	r3, [r7, #4]
  40ac22:	60e2      	str	r2, [r4, #12]
  40ac24:	f8c4 c008 	str.w	ip, [r4, #8]
  40ac28:	6094      	str	r4, [r2, #8]
  40ac2a:	f8cc 400c 	str.w	r4, [ip, #12]
  40ac2e:	e68f      	b.n	40a950 <_malloc_r+0xc8>
  40ac30:	19a1      	adds	r1, r4, r6
  40ac32:	f046 0c01 	orr.w	ip, r6, #1
  40ac36:	f042 0601 	orr.w	r6, r2, #1
  40ac3a:	f8c4 c004 	str.w	ip, [r4, #4]
  40ac3e:	4628      	mov	r0, r5
  40ac40:	6179      	str	r1, [r7, #20]
  40ac42:	6139      	str	r1, [r7, #16]
  40ac44:	f8c1 e00c 	str.w	lr, [r1, #12]
  40ac48:	f8c1 e008 	str.w	lr, [r1, #8]
  40ac4c:	604e      	str	r6, [r1, #4]
  40ac4e:	50e2      	str	r2, [r4, r3]
  40ac50:	f000 f9a0 	bl	40af94 <__malloc_unlock>
  40ac54:	3408      	adds	r4, #8
  40ac56:	e6dd      	b.n	40aa14 <_malloc_r+0x18c>
  40ac58:	687b      	ldr	r3, [r7, #4]
  40ac5a:	e679      	b.n	40a950 <_malloc_r+0xc8>
  40ac5c:	f108 0801 	add.w	r8, r8, #1
  40ac60:	f018 0f03 	tst.w	r8, #3
  40ac64:	f10c 0c08 	add.w	ip, ip, #8
  40ac68:	f47f ae85 	bne.w	40a976 <_malloc_r+0xee>
  40ac6c:	e02d      	b.n	40acca <_malloc_r+0x442>
  40ac6e:	68dc      	ldr	r4, [r3, #12]
  40ac70:	42a3      	cmp	r3, r4
  40ac72:	bf08      	it	eq
  40ac74:	3002      	addeq	r0, #2
  40ac76:	f43f ae3e 	beq.w	40a8f6 <_malloc_r+0x6e>
  40ac7a:	e6bb      	b.n	40a9f4 <_malloc_r+0x16c>
  40ac7c:	4419      	add	r1, r3
  40ac7e:	461c      	mov	r4, r3
  40ac80:	684a      	ldr	r2, [r1, #4]
  40ac82:	68db      	ldr	r3, [r3, #12]
  40ac84:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40ac88:	f042 0201 	orr.w	r2, r2, #1
  40ac8c:	604a      	str	r2, [r1, #4]
  40ac8e:	4628      	mov	r0, r5
  40ac90:	60f3      	str	r3, [r6, #12]
  40ac92:	609e      	str	r6, [r3, #8]
  40ac94:	f000 f97e 	bl	40af94 <__malloc_unlock>
  40ac98:	e6bc      	b.n	40aa14 <_malloc_r+0x18c>
  40ac9a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40ac9e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40aca2:	00c3      	lsls	r3, r0, #3
  40aca4:	e612      	b.n	40a8cc <_malloc_r+0x44>
  40aca6:	099a      	lsrs	r2, r3, #6
  40aca8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40acac:	00c9      	lsls	r1, r1, #3
  40acae:	3238      	adds	r2, #56	; 0x38
  40acb0:	e7a4      	b.n	40abfc <_malloc_r+0x374>
  40acb2:	42bc      	cmp	r4, r7
  40acb4:	d054      	beq.n	40ad60 <_malloc_r+0x4d8>
  40acb6:	68bc      	ldr	r4, [r7, #8]
  40acb8:	6862      	ldr	r2, [r4, #4]
  40acba:	f022 0203 	bic.w	r2, r2, #3
  40acbe:	e75d      	b.n	40ab7c <_malloc_r+0x2f4>
  40acc0:	f859 3908 	ldr.w	r3, [r9], #-8
  40acc4:	4599      	cmp	r9, r3
  40acc6:	f040 8086 	bne.w	40add6 <_malloc_r+0x54e>
  40acca:	f010 0f03 	tst.w	r0, #3
  40acce:	f100 30ff 	add.w	r0, r0, #4294967295
  40acd2:	d1f5      	bne.n	40acc0 <_malloc_r+0x438>
  40acd4:	687b      	ldr	r3, [r7, #4]
  40acd6:	ea23 0304 	bic.w	r3, r3, r4
  40acda:	607b      	str	r3, [r7, #4]
  40acdc:	0064      	lsls	r4, r4, #1
  40acde:	429c      	cmp	r4, r3
  40ace0:	f63f aec7 	bhi.w	40aa72 <_malloc_r+0x1ea>
  40ace4:	2c00      	cmp	r4, #0
  40ace6:	f43f aec4 	beq.w	40aa72 <_malloc_r+0x1ea>
  40acea:	421c      	tst	r4, r3
  40acec:	4640      	mov	r0, r8
  40acee:	f47f ae3e 	bne.w	40a96e <_malloc_r+0xe6>
  40acf2:	0064      	lsls	r4, r4, #1
  40acf4:	421c      	tst	r4, r3
  40acf6:	f100 0004 	add.w	r0, r0, #4
  40acfa:	d0fa      	beq.n	40acf2 <_malloc_r+0x46a>
  40acfc:	e637      	b.n	40a96e <_malloc_r+0xe6>
  40acfe:	468c      	mov	ip, r1
  40ad00:	e78c      	b.n	40ac1c <_malloc_r+0x394>
  40ad02:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40ad06:	d815      	bhi.n	40ad34 <_malloc_r+0x4ac>
  40ad08:	0bf3      	lsrs	r3, r6, #15
  40ad0a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40ad0e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40ad12:	00c3      	lsls	r3, r0, #3
  40ad14:	e5da      	b.n	40a8cc <_malloc_r+0x44>
  40ad16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40ad1a:	e6ed      	b.n	40aaf8 <_malloc_r+0x270>
  40ad1c:	687b      	ldr	r3, [r7, #4]
  40ad1e:	1092      	asrs	r2, r2, #2
  40ad20:	2101      	movs	r1, #1
  40ad22:	fa01 f202 	lsl.w	r2, r1, r2
  40ad26:	4313      	orrs	r3, r2
  40ad28:	607b      	str	r3, [r7, #4]
  40ad2a:	4662      	mov	r2, ip
  40ad2c:	e779      	b.n	40ac22 <_malloc_r+0x39a>
  40ad2e:	2301      	movs	r3, #1
  40ad30:	6053      	str	r3, [r2, #4]
  40ad32:	e729      	b.n	40ab88 <_malloc_r+0x300>
  40ad34:	f240 5254 	movw	r2, #1364	; 0x554
  40ad38:	4293      	cmp	r3, r2
  40ad3a:	d822      	bhi.n	40ad82 <_malloc_r+0x4fa>
  40ad3c:	0cb3      	lsrs	r3, r6, #18
  40ad3e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40ad42:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40ad46:	00c3      	lsls	r3, r0, #3
  40ad48:	e5c0      	b.n	40a8cc <_malloc_r+0x44>
  40ad4a:	f103 0b10 	add.w	fp, r3, #16
  40ad4e:	e6ae      	b.n	40aaae <_malloc_r+0x226>
  40ad50:	2a54      	cmp	r2, #84	; 0x54
  40ad52:	d829      	bhi.n	40ada8 <_malloc_r+0x520>
  40ad54:	0b1a      	lsrs	r2, r3, #12
  40ad56:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40ad5a:	00c9      	lsls	r1, r1, #3
  40ad5c:	326e      	adds	r2, #110	; 0x6e
  40ad5e:	e74d      	b.n	40abfc <_malloc_r+0x374>
  40ad60:	4b20      	ldr	r3, [pc, #128]	; (40ade4 <_malloc_r+0x55c>)
  40ad62:	6819      	ldr	r1, [r3, #0]
  40ad64:	4459      	add	r1, fp
  40ad66:	6019      	str	r1, [r3, #0]
  40ad68:	e6b2      	b.n	40aad0 <_malloc_r+0x248>
  40ad6a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40ad6e:	2800      	cmp	r0, #0
  40ad70:	f47f aeae 	bne.w	40aad0 <_malloc_r+0x248>
  40ad74:	eb08 030b 	add.w	r3, r8, fp
  40ad78:	68ba      	ldr	r2, [r7, #8]
  40ad7a:	f043 0301 	orr.w	r3, r3, #1
  40ad7e:	6053      	str	r3, [r2, #4]
  40ad80:	e6ee      	b.n	40ab60 <_malloc_r+0x2d8>
  40ad82:	207f      	movs	r0, #127	; 0x7f
  40ad84:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40ad88:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40ad8c:	e59e      	b.n	40a8cc <_malloc_r+0x44>
  40ad8e:	f104 0108 	add.w	r1, r4, #8
  40ad92:	4628      	mov	r0, r5
  40ad94:	9300      	str	r3, [sp, #0]
  40ad96:	f7ff fa4b 	bl	40a230 <_free_r>
  40ad9a:	9b00      	ldr	r3, [sp, #0]
  40ad9c:	6819      	ldr	r1, [r3, #0]
  40ad9e:	e6df      	b.n	40ab60 <_malloc_r+0x2d8>
  40ada0:	2001      	movs	r0, #1
  40ada2:	f04f 0900 	mov.w	r9, #0
  40ada6:	e6bc      	b.n	40ab22 <_malloc_r+0x29a>
  40ada8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40adac:	d805      	bhi.n	40adba <_malloc_r+0x532>
  40adae:	0bda      	lsrs	r2, r3, #15
  40adb0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40adb4:	00c9      	lsls	r1, r1, #3
  40adb6:	3277      	adds	r2, #119	; 0x77
  40adb8:	e720      	b.n	40abfc <_malloc_r+0x374>
  40adba:	f240 5154 	movw	r1, #1364	; 0x554
  40adbe:	428a      	cmp	r2, r1
  40adc0:	d805      	bhi.n	40adce <_malloc_r+0x546>
  40adc2:	0c9a      	lsrs	r2, r3, #18
  40adc4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40adc8:	00c9      	lsls	r1, r1, #3
  40adca:	327c      	adds	r2, #124	; 0x7c
  40adcc:	e716      	b.n	40abfc <_malloc_r+0x374>
  40adce:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40add2:	227e      	movs	r2, #126	; 0x7e
  40add4:	e712      	b.n	40abfc <_malloc_r+0x374>
  40add6:	687b      	ldr	r3, [r7, #4]
  40add8:	e780      	b.n	40acdc <_malloc_r+0x454>
  40adda:	08f0      	lsrs	r0, r6, #3
  40addc:	f106 0308 	add.w	r3, r6, #8
  40ade0:	e600      	b.n	40a9e4 <_malloc_r+0x15c>
  40ade2:	bf00      	nop
  40ade4:	2040c970 	.word	0x2040c970

0040ade8 <__ascii_mbtowc>:
  40ade8:	b082      	sub	sp, #8
  40adea:	b149      	cbz	r1, 40ae00 <__ascii_mbtowc+0x18>
  40adec:	b15a      	cbz	r2, 40ae06 <__ascii_mbtowc+0x1e>
  40adee:	b16b      	cbz	r3, 40ae0c <__ascii_mbtowc+0x24>
  40adf0:	7813      	ldrb	r3, [r2, #0]
  40adf2:	600b      	str	r3, [r1, #0]
  40adf4:	7812      	ldrb	r2, [r2, #0]
  40adf6:	1c10      	adds	r0, r2, #0
  40adf8:	bf18      	it	ne
  40adfa:	2001      	movne	r0, #1
  40adfc:	b002      	add	sp, #8
  40adfe:	4770      	bx	lr
  40ae00:	a901      	add	r1, sp, #4
  40ae02:	2a00      	cmp	r2, #0
  40ae04:	d1f3      	bne.n	40adee <__ascii_mbtowc+0x6>
  40ae06:	4610      	mov	r0, r2
  40ae08:	b002      	add	sp, #8
  40ae0a:	4770      	bx	lr
  40ae0c:	f06f 0001 	mvn.w	r0, #1
  40ae10:	e7f4      	b.n	40adfc <__ascii_mbtowc+0x14>
  40ae12:	bf00      	nop
	...

0040ae20 <memchr>:
  40ae20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40ae24:	2a10      	cmp	r2, #16
  40ae26:	db2b      	blt.n	40ae80 <memchr+0x60>
  40ae28:	f010 0f07 	tst.w	r0, #7
  40ae2c:	d008      	beq.n	40ae40 <memchr+0x20>
  40ae2e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40ae32:	3a01      	subs	r2, #1
  40ae34:	428b      	cmp	r3, r1
  40ae36:	d02d      	beq.n	40ae94 <memchr+0x74>
  40ae38:	f010 0f07 	tst.w	r0, #7
  40ae3c:	b342      	cbz	r2, 40ae90 <memchr+0x70>
  40ae3e:	d1f6      	bne.n	40ae2e <memchr+0xe>
  40ae40:	b4f0      	push	{r4, r5, r6, r7}
  40ae42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40ae46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40ae4a:	f022 0407 	bic.w	r4, r2, #7
  40ae4e:	f07f 0700 	mvns.w	r7, #0
  40ae52:	2300      	movs	r3, #0
  40ae54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40ae58:	3c08      	subs	r4, #8
  40ae5a:	ea85 0501 	eor.w	r5, r5, r1
  40ae5e:	ea86 0601 	eor.w	r6, r6, r1
  40ae62:	fa85 f547 	uadd8	r5, r5, r7
  40ae66:	faa3 f587 	sel	r5, r3, r7
  40ae6a:	fa86 f647 	uadd8	r6, r6, r7
  40ae6e:	faa5 f687 	sel	r6, r5, r7
  40ae72:	b98e      	cbnz	r6, 40ae98 <memchr+0x78>
  40ae74:	d1ee      	bne.n	40ae54 <memchr+0x34>
  40ae76:	bcf0      	pop	{r4, r5, r6, r7}
  40ae78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40ae7c:	f002 0207 	and.w	r2, r2, #7
  40ae80:	b132      	cbz	r2, 40ae90 <memchr+0x70>
  40ae82:	f810 3b01 	ldrb.w	r3, [r0], #1
  40ae86:	3a01      	subs	r2, #1
  40ae88:	ea83 0301 	eor.w	r3, r3, r1
  40ae8c:	b113      	cbz	r3, 40ae94 <memchr+0x74>
  40ae8e:	d1f8      	bne.n	40ae82 <memchr+0x62>
  40ae90:	2000      	movs	r0, #0
  40ae92:	4770      	bx	lr
  40ae94:	3801      	subs	r0, #1
  40ae96:	4770      	bx	lr
  40ae98:	2d00      	cmp	r5, #0
  40ae9a:	bf06      	itte	eq
  40ae9c:	4635      	moveq	r5, r6
  40ae9e:	3803      	subeq	r0, #3
  40aea0:	3807      	subne	r0, #7
  40aea2:	f015 0f01 	tst.w	r5, #1
  40aea6:	d107      	bne.n	40aeb8 <memchr+0x98>
  40aea8:	3001      	adds	r0, #1
  40aeaa:	f415 7f80 	tst.w	r5, #256	; 0x100
  40aeae:	bf02      	ittt	eq
  40aeb0:	3001      	addeq	r0, #1
  40aeb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40aeb6:	3001      	addeq	r0, #1
  40aeb8:	bcf0      	pop	{r4, r5, r6, r7}
  40aeba:	3801      	subs	r0, #1
  40aebc:	4770      	bx	lr
  40aebe:	bf00      	nop

0040aec0 <memmove>:
  40aec0:	4288      	cmp	r0, r1
  40aec2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40aec4:	d90d      	bls.n	40aee2 <memmove+0x22>
  40aec6:	188b      	adds	r3, r1, r2
  40aec8:	4298      	cmp	r0, r3
  40aeca:	d20a      	bcs.n	40aee2 <memmove+0x22>
  40aecc:	1884      	adds	r4, r0, r2
  40aece:	2a00      	cmp	r2, #0
  40aed0:	d051      	beq.n	40af76 <memmove+0xb6>
  40aed2:	4622      	mov	r2, r4
  40aed4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40aed8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40aedc:	4299      	cmp	r1, r3
  40aede:	d1f9      	bne.n	40aed4 <memmove+0x14>
  40aee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40aee2:	2a0f      	cmp	r2, #15
  40aee4:	d948      	bls.n	40af78 <memmove+0xb8>
  40aee6:	ea41 0300 	orr.w	r3, r1, r0
  40aeea:	079b      	lsls	r3, r3, #30
  40aeec:	d146      	bne.n	40af7c <memmove+0xbc>
  40aeee:	f100 0410 	add.w	r4, r0, #16
  40aef2:	f101 0310 	add.w	r3, r1, #16
  40aef6:	4615      	mov	r5, r2
  40aef8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40aefc:	f844 6c10 	str.w	r6, [r4, #-16]
  40af00:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40af04:	f844 6c0c 	str.w	r6, [r4, #-12]
  40af08:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40af0c:	f844 6c08 	str.w	r6, [r4, #-8]
  40af10:	3d10      	subs	r5, #16
  40af12:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40af16:	f844 6c04 	str.w	r6, [r4, #-4]
  40af1a:	2d0f      	cmp	r5, #15
  40af1c:	f103 0310 	add.w	r3, r3, #16
  40af20:	f104 0410 	add.w	r4, r4, #16
  40af24:	d8e8      	bhi.n	40aef8 <memmove+0x38>
  40af26:	f1a2 0310 	sub.w	r3, r2, #16
  40af2a:	f023 030f 	bic.w	r3, r3, #15
  40af2e:	f002 0e0f 	and.w	lr, r2, #15
  40af32:	3310      	adds	r3, #16
  40af34:	f1be 0f03 	cmp.w	lr, #3
  40af38:	4419      	add	r1, r3
  40af3a:	4403      	add	r3, r0
  40af3c:	d921      	bls.n	40af82 <memmove+0xc2>
  40af3e:	1f1e      	subs	r6, r3, #4
  40af40:	460d      	mov	r5, r1
  40af42:	4674      	mov	r4, lr
  40af44:	3c04      	subs	r4, #4
  40af46:	f855 7b04 	ldr.w	r7, [r5], #4
  40af4a:	f846 7f04 	str.w	r7, [r6, #4]!
  40af4e:	2c03      	cmp	r4, #3
  40af50:	d8f8      	bhi.n	40af44 <memmove+0x84>
  40af52:	f1ae 0404 	sub.w	r4, lr, #4
  40af56:	f024 0403 	bic.w	r4, r4, #3
  40af5a:	3404      	adds	r4, #4
  40af5c:	4421      	add	r1, r4
  40af5e:	4423      	add	r3, r4
  40af60:	f002 0203 	and.w	r2, r2, #3
  40af64:	b162      	cbz	r2, 40af80 <memmove+0xc0>
  40af66:	3b01      	subs	r3, #1
  40af68:	440a      	add	r2, r1
  40af6a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40af6e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40af72:	428a      	cmp	r2, r1
  40af74:	d1f9      	bne.n	40af6a <memmove+0xaa>
  40af76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40af78:	4603      	mov	r3, r0
  40af7a:	e7f3      	b.n	40af64 <memmove+0xa4>
  40af7c:	4603      	mov	r3, r0
  40af7e:	e7f2      	b.n	40af66 <memmove+0xa6>
  40af80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40af82:	4672      	mov	r2, lr
  40af84:	e7ee      	b.n	40af64 <memmove+0xa4>
  40af86:	bf00      	nop

0040af88 <__malloc_lock>:
  40af88:	4801      	ldr	r0, [pc, #4]	; (40af90 <__malloc_lock+0x8>)
  40af8a:	f7ff bbf9 	b.w	40a780 <__retarget_lock_acquire_recursive>
  40af8e:	bf00      	nop
  40af90:	2040cbd0 	.word	0x2040cbd0

0040af94 <__malloc_unlock>:
  40af94:	4801      	ldr	r0, [pc, #4]	; (40af9c <__malloc_unlock+0x8>)
  40af96:	f7ff bbf5 	b.w	40a784 <__retarget_lock_release_recursive>
  40af9a:	bf00      	nop
  40af9c:	2040cbd0 	.word	0x2040cbd0

0040afa0 <_Balloc>:
  40afa0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40afa2:	b570      	push	{r4, r5, r6, lr}
  40afa4:	4605      	mov	r5, r0
  40afa6:	460c      	mov	r4, r1
  40afa8:	b14b      	cbz	r3, 40afbe <_Balloc+0x1e>
  40afaa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40afae:	b180      	cbz	r0, 40afd2 <_Balloc+0x32>
  40afb0:	6802      	ldr	r2, [r0, #0]
  40afb2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40afb6:	2300      	movs	r3, #0
  40afb8:	6103      	str	r3, [r0, #16]
  40afba:	60c3      	str	r3, [r0, #12]
  40afbc:	bd70      	pop	{r4, r5, r6, pc}
  40afbe:	2221      	movs	r2, #33	; 0x21
  40afc0:	2104      	movs	r1, #4
  40afc2:	f000 fe69 	bl	40bc98 <_calloc_r>
  40afc6:	64e8      	str	r0, [r5, #76]	; 0x4c
  40afc8:	4603      	mov	r3, r0
  40afca:	2800      	cmp	r0, #0
  40afcc:	d1ed      	bne.n	40afaa <_Balloc+0xa>
  40afce:	2000      	movs	r0, #0
  40afd0:	bd70      	pop	{r4, r5, r6, pc}
  40afd2:	2101      	movs	r1, #1
  40afd4:	fa01 f604 	lsl.w	r6, r1, r4
  40afd8:	1d72      	adds	r2, r6, #5
  40afda:	4628      	mov	r0, r5
  40afdc:	0092      	lsls	r2, r2, #2
  40afde:	f000 fe5b 	bl	40bc98 <_calloc_r>
  40afe2:	2800      	cmp	r0, #0
  40afe4:	d0f3      	beq.n	40afce <_Balloc+0x2e>
  40afe6:	6044      	str	r4, [r0, #4]
  40afe8:	6086      	str	r6, [r0, #8]
  40afea:	e7e4      	b.n	40afb6 <_Balloc+0x16>

0040afec <_Bfree>:
  40afec:	b131      	cbz	r1, 40affc <_Bfree+0x10>
  40afee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40aff0:	684a      	ldr	r2, [r1, #4]
  40aff2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40aff6:	6008      	str	r0, [r1, #0]
  40aff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40affc:	4770      	bx	lr
  40affe:	bf00      	nop

0040b000 <__multadd>:
  40b000:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b002:	690c      	ldr	r4, [r1, #16]
  40b004:	b083      	sub	sp, #12
  40b006:	460d      	mov	r5, r1
  40b008:	4606      	mov	r6, r0
  40b00a:	f101 0e14 	add.w	lr, r1, #20
  40b00e:	2700      	movs	r7, #0
  40b010:	f8de 0000 	ldr.w	r0, [lr]
  40b014:	b281      	uxth	r1, r0
  40b016:	fb02 3301 	mla	r3, r2, r1, r3
  40b01a:	0c01      	lsrs	r1, r0, #16
  40b01c:	0c18      	lsrs	r0, r3, #16
  40b01e:	fb02 0101 	mla	r1, r2, r1, r0
  40b022:	b29b      	uxth	r3, r3
  40b024:	3701      	adds	r7, #1
  40b026:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40b02a:	42bc      	cmp	r4, r7
  40b02c:	f84e 3b04 	str.w	r3, [lr], #4
  40b030:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40b034:	dcec      	bgt.n	40b010 <__multadd+0x10>
  40b036:	b13b      	cbz	r3, 40b048 <__multadd+0x48>
  40b038:	68aa      	ldr	r2, [r5, #8]
  40b03a:	4294      	cmp	r4, r2
  40b03c:	da07      	bge.n	40b04e <__multadd+0x4e>
  40b03e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40b042:	3401      	adds	r4, #1
  40b044:	6153      	str	r3, [r2, #20]
  40b046:	612c      	str	r4, [r5, #16]
  40b048:	4628      	mov	r0, r5
  40b04a:	b003      	add	sp, #12
  40b04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b04e:	6869      	ldr	r1, [r5, #4]
  40b050:	9301      	str	r3, [sp, #4]
  40b052:	3101      	adds	r1, #1
  40b054:	4630      	mov	r0, r6
  40b056:	f7ff ffa3 	bl	40afa0 <_Balloc>
  40b05a:	692a      	ldr	r2, [r5, #16]
  40b05c:	3202      	adds	r2, #2
  40b05e:	f105 010c 	add.w	r1, r5, #12
  40b062:	4607      	mov	r7, r0
  40b064:	0092      	lsls	r2, r2, #2
  40b066:	300c      	adds	r0, #12
  40b068:	f7fb fae6 	bl	406638 <memcpy>
  40b06c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40b06e:	6869      	ldr	r1, [r5, #4]
  40b070:	9b01      	ldr	r3, [sp, #4]
  40b072:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40b076:	6028      	str	r0, [r5, #0]
  40b078:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40b07c:	463d      	mov	r5, r7
  40b07e:	e7de      	b.n	40b03e <__multadd+0x3e>

0040b080 <__hi0bits>:
  40b080:	0c02      	lsrs	r2, r0, #16
  40b082:	0412      	lsls	r2, r2, #16
  40b084:	4603      	mov	r3, r0
  40b086:	b9b2      	cbnz	r2, 40b0b6 <__hi0bits+0x36>
  40b088:	0403      	lsls	r3, r0, #16
  40b08a:	2010      	movs	r0, #16
  40b08c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40b090:	bf04      	itt	eq
  40b092:	021b      	lsleq	r3, r3, #8
  40b094:	3008      	addeq	r0, #8
  40b096:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40b09a:	bf04      	itt	eq
  40b09c:	011b      	lsleq	r3, r3, #4
  40b09e:	3004      	addeq	r0, #4
  40b0a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40b0a4:	bf04      	itt	eq
  40b0a6:	009b      	lsleq	r3, r3, #2
  40b0a8:	3002      	addeq	r0, #2
  40b0aa:	2b00      	cmp	r3, #0
  40b0ac:	db02      	blt.n	40b0b4 <__hi0bits+0x34>
  40b0ae:	005b      	lsls	r3, r3, #1
  40b0b0:	d403      	bmi.n	40b0ba <__hi0bits+0x3a>
  40b0b2:	2020      	movs	r0, #32
  40b0b4:	4770      	bx	lr
  40b0b6:	2000      	movs	r0, #0
  40b0b8:	e7e8      	b.n	40b08c <__hi0bits+0xc>
  40b0ba:	3001      	adds	r0, #1
  40b0bc:	4770      	bx	lr
  40b0be:	bf00      	nop

0040b0c0 <__lo0bits>:
  40b0c0:	6803      	ldr	r3, [r0, #0]
  40b0c2:	f013 0207 	ands.w	r2, r3, #7
  40b0c6:	4601      	mov	r1, r0
  40b0c8:	d007      	beq.n	40b0da <__lo0bits+0x1a>
  40b0ca:	07da      	lsls	r2, r3, #31
  40b0cc:	d421      	bmi.n	40b112 <__lo0bits+0x52>
  40b0ce:	0798      	lsls	r0, r3, #30
  40b0d0:	d421      	bmi.n	40b116 <__lo0bits+0x56>
  40b0d2:	089b      	lsrs	r3, r3, #2
  40b0d4:	600b      	str	r3, [r1, #0]
  40b0d6:	2002      	movs	r0, #2
  40b0d8:	4770      	bx	lr
  40b0da:	b298      	uxth	r0, r3
  40b0dc:	b198      	cbz	r0, 40b106 <__lo0bits+0x46>
  40b0de:	4610      	mov	r0, r2
  40b0e0:	f013 0fff 	tst.w	r3, #255	; 0xff
  40b0e4:	bf04      	itt	eq
  40b0e6:	0a1b      	lsreq	r3, r3, #8
  40b0e8:	3008      	addeq	r0, #8
  40b0ea:	071a      	lsls	r2, r3, #28
  40b0ec:	bf04      	itt	eq
  40b0ee:	091b      	lsreq	r3, r3, #4
  40b0f0:	3004      	addeq	r0, #4
  40b0f2:	079a      	lsls	r2, r3, #30
  40b0f4:	bf04      	itt	eq
  40b0f6:	089b      	lsreq	r3, r3, #2
  40b0f8:	3002      	addeq	r0, #2
  40b0fa:	07da      	lsls	r2, r3, #31
  40b0fc:	d407      	bmi.n	40b10e <__lo0bits+0x4e>
  40b0fe:	085b      	lsrs	r3, r3, #1
  40b100:	d104      	bne.n	40b10c <__lo0bits+0x4c>
  40b102:	2020      	movs	r0, #32
  40b104:	4770      	bx	lr
  40b106:	0c1b      	lsrs	r3, r3, #16
  40b108:	2010      	movs	r0, #16
  40b10a:	e7e9      	b.n	40b0e0 <__lo0bits+0x20>
  40b10c:	3001      	adds	r0, #1
  40b10e:	600b      	str	r3, [r1, #0]
  40b110:	4770      	bx	lr
  40b112:	2000      	movs	r0, #0
  40b114:	4770      	bx	lr
  40b116:	085b      	lsrs	r3, r3, #1
  40b118:	600b      	str	r3, [r1, #0]
  40b11a:	2001      	movs	r0, #1
  40b11c:	4770      	bx	lr
  40b11e:	bf00      	nop

0040b120 <__i2b>:
  40b120:	b510      	push	{r4, lr}
  40b122:	460c      	mov	r4, r1
  40b124:	2101      	movs	r1, #1
  40b126:	f7ff ff3b 	bl	40afa0 <_Balloc>
  40b12a:	2201      	movs	r2, #1
  40b12c:	6144      	str	r4, [r0, #20]
  40b12e:	6102      	str	r2, [r0, #16]
  40b130:	bd10      	pop	{r4, pc}
  40b132:	bf00      	nop

0040b134 <__multiply>:
  40b134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b138:	690c      	ldr	r4, [r1, #16]
  40b13a:	6915      	ldr	r5, [r2, #16]
  40b13c:	42ac      	cmp	r4, r5
  40b13e:	b083      	sub	sp, #12
  40b140:	468b      	mov	fp, r1
  40b142:	4616      	mov	r6, r2
  40b144:	da04      	bge.n	40b150 <__multiply+0x1c>
  40b146:	4622      	mov	r2, r4
  40b148:	46b3      	mov	fp, r6
  40b14a:	462c      	mov	r4, r5
  40b14c:	460e      	mov	r6, r1
  40b14e:	4615      	mov	r5, r2
  40b150:	f8db 3008 	ldr.w	r3, [fp, #8]
  40b154:	f8db 1004 	ldr.w	r1, [fp, #4]
  40b158:	eb04 0805 	add.w	r8, r4, r5
  40b15c:	4598      	cmp	r8, r3
  40b15e:	bfc8      	it	gt
  40b160:	3101      	addgt	r1, #1
  40b162:	f7ff ff1d 	bl	40afa0 <_Balloc>
  40b166:	f100 0914 	add.w	r9, r0, #20
  40b16a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40b16e:	45d1      	cmp	r9, sl
  40b170:	9000      	str	r0, [sp, #0]
  40b172:	d205      	bcs.n	40b180 <__multiply+0x4c>
  40b174:	464b      	mov	r3, r9
  40b176:	2100      	movs	r1, #0
  40b178:	f843 1b04 	str.w	r1, [r3], #4
  40b17c:	459a      	cmp	sl, r3
  40b17e:	d8fb      	bhi.n	40b178 <__multiply+0x44>
  40b180:	f106 0c14 	add.w	ip, r6, #20
  40b184:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40b188:	f10b 0b14 	add.w	fp, fp, #20
  40b18c:	459c      	cmp	ip, r3
  40b18e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40b192:	d24c      	bcs.n	40b22e <__multiply+0xfa>
  40b194:	f8cd a004 	str.w	sl, [sp, #4]
  40b198:	469a      	mov	sl, r3
  40b19a:	f8dc 5000 	ldr.w	r5, [ip]
  40b19e:	b2af      	uxth	r7, r5
  40b1a0:	b1ef      	cbz	r7, 40b1de <__multiply+0xaa>
  40b1a2:	2100      	movs	r1, #0
  40b1a4:	464d      	mov	r5, r9
  40b1a6:	465e      	mov	r6, fp
  40b1a8:	460c      	mov	r4, r1
  40b1aa:	f856 2b04 	ldr.w	r2, [r6], #4
  40b1ae:	6828      	ldr	r0, [r5, #0]
  40b1b0:	b293      	uxth	r3, r2
  40b1b2:	b281      	uxth	r1, r0
  40b1b4:	fb07 1303 	mla	r3, r7, r3, r1
  40b1b8:	0c12      	lsrs	r2, r2, #16
  40b1ba:	0c01      	lsrs	r1, r0, #16
  40b1bc:	4423      	add	r3, r4
  40b1be:	fb07 1102 	mla	r1, r7, r2, r1
  40b1c2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40b1c6:	b29b      	uxth	r3, r3
  40b1c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40b1cc:	45b6      	cmp	lr, r6
  40b1ce:	f845 3b04 	str.w	r3, [r5], #4
  40b1d2:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40b1d6:	d8e8      	bhi.n	40b1aa <__multiply+0x76>
  40b1d8:	602c      	str	r4, [r5, #0]
  40b1da:	f8dc 5000 	ldr.w	r5, [ip]
  40b1de:	0c2d      	lsrs	r5, r5, #16
  40b1e0:	d01d      	beq.n	40b21e <__multiply+0xea>
  40b1e2:	f8d9 3000 	ldr.w	r3, [r9]
  40b1e6:	4648      	mov	r0, r9
  40b1e8:	461c      	mov	r4, r3
  40b1ea:	4659      	mov	r1, fp
  40b1ec:	2200      	movs	r2, #0
  40b1ee:	880e      	ldrh	r6, [r1, #0]
  40b1f0:	0c24      	lsrs	r4, r4, #16
  40b1f2:	fb05 4406 	mla	r4, r5, r6, r4
  40b1f6:	4422      	add	r2, r4
  40b1f8:	b29b      	uxth	r3, r3
  40b1fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40b1fe:	f840 3b04 	str.w	r3, [r0], #4
  40b202:	f851 3b04 	ldr.w	r3, [r1], #4
  40b206:	6804      	ldr	r4, [r0, #0]
  40b208:	0c1b      	lsrs	r3, r3, #16
  40b20a:	b2a6      	uxth	r6, r4
  40b20c:	fb05 6303 	mla	r3, r5, r3, r6
  40b210:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40b214:	458e      	cmp	lr, r1
  40b216:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40b21a:	d8e8      	bhi.n	40b1ee <__multiply+0xba>
  40b21c:	6003      	str	r3, [r0, #0]
  40b21e:	f10c 0c04 	add.w	ip, ip, #4
  40b222:	45e2      	cmp	sl, ip
  40b224:	f109 0904 	add.w	r9, r9, #4
  40b228:	d8b7      	bhi.n	40b19a <__multiply+0x66>
  40b22a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40b22e:	f1b8 0f00 	cmp.w	r8, #0
  40b232:	dd0b      	ble.n	40b24c <__multiply+0x118>
  40b234:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40b238:	f1aa 0a04 	sub.w	sl, sl, #4
  40b23c:	b11b      	cbz	r3, 40b246 <__multiply+0x112>
  40b23e:	e005      	b.n	40b24c <__multiply+0x118>
  40b240:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40b244:	b913      	cbnz	r3, 40b24c <__multiply+0x118>
  40b246:	f1b8 0801 	subs.w	r8, r8, #1
  40b24a:	d1f9      	bne.n	40b240 <__multiply+0x10c>
  40b24c:	9800      	ldr	r0, [sp, #0]
  40b24e:	f8c0 8010 	str.w	r8, [r0, #16]
  40b252:	b003      	add	sp, #12
  40b254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040b258 <__pow5mult>:
  40b258:	f012 0303 	ands.w	r3, r2, #3
  40b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b260:	4614      	mov	r4, r2
  40b262:	4607      	mov	r7, r0
  40b264:	d12e      	bne.n	40b2c4 <__pow5mult+0x6c>
  40b266:	460d      	mov	r5, r1
  40b268:	10a4      	asrs	r4, r4, #2
  40b26a:	d01c      	beq.n	40b2a6 <__pow5mult+0x4e>
  40b26c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40b26e:	b396      	cbz	r6, 40b2d6 <__pow5mult+0x7e>
  40b270:	07e3      	lsls	r3, r4, #31
  40b272:	f04f 0800 	mov.w	r8, #0
  40b276:	d406      	bmi.n	40b286 <__pow5mult+0x2e>
  40b278:	1064      	asrs	r4, r4, #1
  40b27a:	d014      	beq.n	40b2a6 <__pow5mult+0x4e>
  40b27c:	6830      	ldr	r0, [r6, #0]
  40b27e:	b1a8      	cbz	r0, 40b2ac <__pow5mult+0x54>
  40b280:	4606      	mov	r6, r0
  40b282:	07e3      	lsls	r3, r4, #31
  40b284:	d5f8      	bpl.n	40b278 <__pow5mult+0x20>
  40b286:	4632      	mov	r2, r6
  40b288:	4629      	mov	r1, r5
  40b28a:	4638      	mov	r0, r7
  40b28c:	f7ff ff52 	bl	40b134 <__multiply>
  40b290:	b1b5      	cbz	r5, 40b2c0 <__pow5mult+0x68>
  40b292:	686a      	ldr	r2, [r5, #4]
  40b294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b296:	1064      	asrs	r4, r4, #1
  40b298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b29c:	6029      	str	r1, [r5, #0]
  40b29e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40b2a2:	4605      	mov	r5, r0
  40b2a4:	d1ea      	bne.n	40b27c <__pow5mult+0x24>
  40b2a6:	4628      	mov	r0, r5
  40b2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b2ac:	4632      	mov	r2, r6
  40b2ae:	4631      	mov	r1, r6
  40b2b0:	4638      	mov	r0, r7
  40b2b2:	f7ff ff3f 	bl	40b134 <__multiply>
  40b2b6:	6030      	str	r0, [r6, #0]
  40b2b8:	f8c0 8000 	str.w	r8, [r0]
  40b2bc:	4606      	mov	r6, r0
  40b2be:	e7e0      	b.n	40b282 <__pow5mult+0x2a>
  40b2c0:	4605      	mov	r5, r0
  40b2c2:	e7d9      	b.n	40b278 <__pow5mult+0x20>
  40b2c4:	1e5a      	subs	r2, r3, #1
  40b2c6:	4d0b      	ldr	r5, [pc, #44]	; (40b2f4 <__pow5mult+0x9c>)
  40b2c8:	2300      	movs	r3, #0
  40b2ca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40b2ce:	f7ff fe97 	bl	40b000 <__multadd>
  40b2d2:	4605      	mov	r5, r0
  40b2d4:	e7c8      	b.n	40b268 <__pow5mult+0x10>
  40b2d6:	2101      	movs	r1, #1
  40b2d8:	4638      	mov	r0, r7
  40b2da:	f7ff fe61 	bl	40afa0 <_Balloc>
  40b2de:	f240 2171 	movw	r1, #625	; 0x271
  40b2e2:	2201      	movs	r2, #1
  40b2e4:	2300      	movs	r3, #0
  40b2e6:	6141      	str	r1, [r0, #20]
  40b2e8:	6102      	str	r2, [r0, #16]
  40b2ea:	4606      	mov	r6, r0
  40b2ec:	64b8      	str	r0, [r7, #72]	; 0x48
  40b2ee:	6003      	str	r3, [r0, #0]
  40b2f0:	e7be      	b.n	40b270 <__pow5mult+0x18>
  40b2f2:	bf00      	nop
  40b2f4:	0040dbc8 	.word	0x0040dbc8

0040b2f8 <__lshift>:
  40b2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b2fc:	4691      	mov	r9, r2
  40b2fe:	690a      	ldr	r2, [r1, #16]
  40b300:	688b      	ldr	r3, [r1, #8]
  40b302:	ea4f 1469 	mov.w	r4, r9, asr #5
  40b306:	eb04 0802 	add.w	r8, r4, r2
  40b30a:	f108 0501 	add.w	r5, r8, #1
  40b30e:	429d      	cmp	r5, r3
  40b310:	460e      	mov	r6, r1
  40b312:	4607      	mov	r7, r0
  40b314:	6849      	ldr	r1, [r1, #4]
  40b316:	dd04      	ble.n	40b322 <__lshift+0x2a>
  40b318:	005b      	lsls	r3, r3, #1
  40b31a:	429d      	cmp	r5, r3
  40b31c:	f101 0101 	add.w	r1, r1, #1
  40b320:	dcfa      	bgt.n	40b318 <__lshift+0x20>
  40b322:	4638      	mov	r0, r7
  40b324:	f7ff fe3c 	bl	40afa0 <_Balloc>
  40b328:	2c00      	cmp	r4, #0
  40b32a:	f100 0314 	add.w	r3, r0, #20
  40b32e:	dd06      	ble.n	40b33e <__lshift+0x46>
  40b330:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40b334:	2100      	movs	r1, #0
  40b336:	f843 1b04 	str.w	r1, [r3], #4
  40b33a:	429a      	cmp	r2, r3
  40b33c:	d1fb      	bne.n	40b336 <__lshift+0x3e>
  40b33e:	6934      	ldr	r4, [r6, #16]
  40b340:	f106 0114 	add.w	r1, r6, #20
  40b344:	f019 091f 	ands.w	r9, r9, #31
  40b348:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40b34c:	d01d      	beq.n	40b38a <__lshift+0x92>
  40b34e:	f1c9 0c20 	rsb	ip, r9, #32
  40b352:	2200      	movs	r2, #0
  40b354:	680c      	ldr	r4, [r1, #0]
  40b356:	fa04 f409 	lsl.w	r4, r4, r9
  40b35a:	4314      	orrs	r4, r2
  40b35c:	f843 4b04 	str.w	r4, [r3], #4
  40b360:	f851 2b04 	ldr.w	r2, [r1], #4
  40b364:	458e      	cmp	lr, r1
  40b366:	fa22 f20c 	lsr.w	r2, r2, ip
  40b36a:	d8f3      	bhi.n	40b354 <__lshift+0x5c>
  40b36c:	601a      	str	r2, [r3, #0]
  40b36e:	b10a      	cbz	r2, 40b374 <__lshift+0x7c>
  40b370:	f108 0502 	add.w	r5, r8, #2
  40b374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b376:	6872      	ldr	r2, [r6, #4]
  40b378:	3d01      	subs	r5, #1
  40b37a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b37e:	6105      	str	r5, [r0, #16]
  40b380:	6031      	str	r1, [r6, #0]
  40b382:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40b386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b38a:	3b04      	subs	r3, #4
  40b38c:	f851 2b04 	ldr.w	r2, [r1], #4
  40b390:	f843 2f04 	str.w	r2, [r3, #4]!
  40b394:	458e      	cmp	lr, r1
  40b396:	d8f9      	bhi.n	40b38c <__lshift+0x94>
  40b398:	e7ec      	b.n	40b374 <__lshift+0x7c>
  40b39a:	bf00      	nop

0040b39c <__mcmp>:
  40b39c:	b430      	push	{r4, r5}
  40b39e:	690b      	ldr	r3, [r1, #16]
  40b3a0:	4605      	mov	r5, r0
  40b3a2:	6900      	ldr	r0, [r0, #16]
  40b3a4:	1ac0      	subs	r0, r0, r3
  40b3a6:	d10f      	bne.n	40b3c8 <__mcmp+0x2c>
  40b3a8:	009b      	lsls	r3, r3, #2
  40b3aa:	3514      	adds	r5, #20
  40b3ac:	3114      	adds	r1, #20
  40b3ae:	4419      	add	r1, r3
  40b3b0:	442b      	add	r3, r5
  40b3b2:	e001      	b.n	40b3b8 <__mcmp+0x1c>
  40b3b4:	429d      	cmp	r5, r3
  40b3b6:	d207      	bcs.n	40b3c8 <__mcmp+0x2c>
  40b3b8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40b3bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40b3c0:	4294      	cmp	r4, r2
  40b3c2:	d0f7      	beq.n	40b3b4 <__mcmp+0x18>
  40b3c4:	d302      	bcc.n	40b3cc <__mcmp+0x30>
  40b3c6:	2001      	movs	r0, #1
  40b3c8:	bc30      	pop	{r4, r5}
  40b3ca:	4770      	bx	lr
  40b3cc:	f04f 30ff 	mov.w	r0, #4294967295
  40b3d0:	e7fa      	b.n	40b3c8 <__mcmp+0x2c>
  40b3d2:	bf00      	nop

0040b3d4 <__mdiff>:
  40b3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b3d8:	690f      	ldr	r7, [r1, #16]
  40b3da:	460e      	mov	r6, r1
  40b3dc:	6911      	ldr	r1, [r2, #16]
  40b3de:	1a7f      	subs	r7, r7, r1
  40b3e0:	2f00      	cmp	r7, #0
  40b3e2:	4690      	mov	r8, r2
  40b3e4:	d117      	bne.n	40b416 <__mdiff+0x42>
  40b3e6:	0089      	lsls	r1, r1, #2
  40b3e8:	f106 0514 	add.w	r5, r6, #20
  40b3ec:	f102 0e14 	add.w	lr, r2, #20
  40b3f0:	186b      	adds	r3, r5, r1
  40b3f2:	4471      	add	r1, lr
  40b3f4:	e001      	b.n	40b3fa <__mdiff+0x26>
  40b3f6:	429d      	cmp	r5, r3
  40b3f8:	d25c      	bcs.n	40b4b4 <__mdiff+0xe0>
  40b3fa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40b3fe:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40b402:	42a2      	cmp	r2, r4
  40b404:	d0f7      	beq.n	40b3f6 <__mdiff+0x22>
  40b406:	d25e      	bcs.n	40b4c6 <__mdiff+0xf2>
  40b408:	4633      	mov	r3, r6
  40b40a:	462c      	mov	r4, r5
  40b40c:	4646      	mov	r6, r8
  40b40e:	4675      	mov	r5, lr
  40b410:	4698      	mov	r8, r3
  40b412:	2701      	movs	r7, #1
  40b414:	e005      	b.n	40b422 <__mdiff+0x4e>
  40b416:	db58      	blt.n	40b4ca <__mdiff+0xf6>
  40b418:	f106 0514 	add.w	r5, r6, #20
  40b41c:	f108 0414 	add.w	r4, r8, #20
  40b420:	2700      	movs	r7, #0
  40b422:	6871      	ldr	r1, [r6, #4]
  40b424:	f7ff fdbc 	bl	40afa0 <_Balloc>
  40b428:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40b42c:	6936      	ldr	r6, [r6, #16]
  40b42e:	60c7      	str	r7, [r0, #12]
  40b430:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40b434:	46a6      	mov	lr, r4
  40b436:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40b43a:	f100 0414 	add.w	r4, r0, #20
  40b43e:	2300      	movs	r3, #0
  40b440:	f85e 1b04 	ldr.w	r1, [lr], #4
  40b444:	f855 8b04 	ldr.w	r8, [r5], #4
  40b448:	b28a      	uxth	r2, r1
  40b44a:	fa13 f388 	uxtah	r3, r3, r8
  40b44e:	0c09      	lsrs	r1, r1, #16
  40b450:	1a9a      	subs	r2, r3, r2
  40b452:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40b456:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40b45a:	b292      	uxth	r2, r2
  40b45c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40b460:	45f4      	cmp	ip, lr
  40b462:	f844 2b04 	str.w	r2, [r4], #4
  40b466:	ea4f 4323 	mov.w	r3, r3, asr #16
  40b46a:	d8e9      	bhi.n	40b440 <__mdiff+0x6c>
  40b46c:	42af      	cmp	r7, r5
  40b46e:	d917      	bls.n	40b4a0 <__mdiff+0xcc>
  40b470:	46a4      	mov	ip, r4
  40b472:	46ae      	mov	lr, r5
  40b474:	f85e 2b04 	ldr.w	r2, [lr], #4
  40b478:	fa13 f382 	uxtah	r3, r3, r2
  40b47c:	1419      	asrs	r1, r3, #16
  40b47e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40b482:	b29b      	uxth	r3, r3
  40b484:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40b488:	4577      	cmp	r7, lr
  40b48a:	f84c 2b04 	str.w	r2, [ip], #4
  40b48e:	ea4f 4321 	mov.w	r3, r1, asr #16
  40b492:	d8ef      	bhi.n	40b474 <__mdiff+0xa0>
  40b494:	43ed      	mvns	r5, r5
  40b496:	442f      	add	r7, r5
  40b498:	f027 0703 	bic.w	r7, r7, #3
  40b49c:	3704      	adds	r7, #4
  40b49e:	443c      	add	r4, r7
  40b4a0:	3c04      	subs	r4, #4
  40b4a2:	b922      	cbnz	r2, 40b4ae <__mdiff+0xda>
  40b4a4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40b4a8:	3e01      	subs	r6, #1
  40b4aa:	2b00      	cmp	r3, #0
  40b4ac:	d0fa      	beq.n	40b4a4 <__mdiff+0xd0>
  40b4ae:	6106      	str	r6, [r0, #16]
  40b4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b4b4:	2100      	movs	r1, #0
  40b4b6:	f7ff fd73 	bl	40afa0 <_Balloc>
  40b4ba:	2201      	movs	r2, #1
  40b4bc:	2300      	movs	r3, #0
  40b4be:	6102      	str	r2, [r0, #16]
  40b4c0:	6143      	str	r3, [r0, #20]
  40b4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b4c6:	4674      	mov	r4, lr
  40b4c8:	e7ab      	b.n	40b422 <__mdiff+0x4e>
  40b4ca:	4633      	mov	r3, r6
  40b4cc:	f106 0414 	add.w	r4, r6, #20
  40b4d0:	f102 0514 	add.w	r5, r2, #20
  40b4d4:	4616      	mov	r6, r2
  40b4d6:	2701      	movs	r7, #1
  40b4d8:	4698      	mov	r8, r3
  40b4da:	e7a2      	b.n	40b422 <__mdiff+0x4e>

0040b4dc <__d2b>:
  40b4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b4e0:	b082      	sub	sp, #8
  40b4e2:	2101      	movs	r1, #1
  40b4e4:	461c      	mov	r4, r3
  40b4e6:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40b4ea:	4615      	mov	r5, r2
  40b4ec:	9e08      	ldr	r6, [sp, #32]
  40b4ee:	f7ff fd57 	bl	40afa0 <_Balloc>
  40b4f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40b4f6:	4680      	mov	r8, r0
  40b4f8:	b10f      	cbz	r7, 40b4fe <__d2b+0x22>
  40b4fa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40b4fe:	9401      	str	r4, [sp, #4]
  40b500:	b31d      	cbz	r5, 40b54a <__d2b+0x6e>
  40b502:	a802      	add	r0, sp, #8
  40b504:	f840 5d08 	str.w	r5, [r0, #-8]!
  40b508:	f7ff fdda 	bl	40b0c0 <__lo0bits>
  40b50c:	2800      	cmp	r0, #0
  40b50e:	d134      	bne.n	40b57a <__d2b+0x9e>
  40b510:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40b514:	f8c8 2014 	str.w	r2, [r8, #20]
  40b518:	2b00      	cmp	r3, #0
  40b51a:	bf0c      	ite	eq
  40b51c:	2101      	moveq	r1, #1
  40b51e:	2102      	movne	r1, #2
  40b520:	f8c8 3018 	str.w	r3, [r8, #24]
  40b524:	f8c8 1010 	str.w	r1, [r8, #16]
  40b528:	b9df      	cbnz	r7, 40b562 <__d2b+0x86>
  40b52a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40b52e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40b532:	6030      	str	r0, [r6, #0]
  40b534:	6918      	ldr	r0, [r3, #16]
  40b536:	f7ff fda3 	bl	40b080 <__hi0bits>
  40b53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b53c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40b540:	6018      	str	r0, [r3, #0]
  40b542:	4640      	mov	r0, r8
  40b544:	b002      	add	sp, #8
  40b546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b54a:	a801      	add	r0, sp, #4
  40b54c:	f7ff fdb8 	bl	40b0c0 <__lo0bits>
  40b550:	9b01      	ldr	r3, [sp, #4]
  40b552:	f8c8 3014 	str.w	r3, [r8, #20]
  40b556:	2101      	movs	r1, #1
  40b558:	3020      	adds	r0, #32
  40b55a:	f8c8 1010 	str.w	r1, [r8, #16]
  40b55e:	2f00      	cmp	r7, #0
  40b560:	d0e3      	beq.n	40b52a <__d2b+0x4e>
  40b562:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b564:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40b568:	4407      	add	r7, r0
  40b56a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40b56e:	6037      	str	r7, [r6, #0]
  40b570:	6018      	str	r0, [r3, #0]
  40b572:	4640      	mov	r0, r8
  40b574:	b002      	add	sp, #8
  40b576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b57a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40b57e:	f1c0 0220 	rsb	r2, r0, #32
  40b582:	fa03 f202 	lsl.w	r2, r3, r2
  40b586:	430a      	orrs	r2, r1
  40b588:	40c3      	lsrs	r3, r0
  40b58a:	9301      	str	r3, [sp, #4]
  40b58c:	f8c8 2014 	str.w	r2, [r8, #20]
  40b590:	e7c2      	b.n	40b518 <__d2b+0x3c>
  40b592:	bf00      	nop

0040b594 <_realloc_r>:
  40b594:	2900      	cmp	r1, #0
  40b596:	f000 8095 	beq.w	40b6c4 <_realloc_r+0x130>
  40b59a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b59e:	460d      	mov	r5, r1
  40b5a0:	4616      	mov	r6, r2
  40b5a2:	b083      	sub	sp, #12
  40b5a4:	4680      	mov	r8, r0
  40b5a6:	f106 070b 	add.w	r7, r6, #11
  40b5aa:	f7ff fced 	bl	40af88 <__malloc_lock>
  40b5ae:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40b5b2:	2f16      	cmp	r7, #22
  40b5b4:	f02e 0403 	bic.w	r4, lr, #3
  40b5b8:	f1a5 0908 	sub.w	r9, r5, #8
  40b5bc:	d83c      	bhi.n	40b638 <_realloc_r+0xa4>
  40b5be:	2210      	movs	r2, #16
  40b5c0:	4617      	mov	r7, r2
  40b5c2:	42be      	cmp	r6, r7
  40b5c4:	d83d      	bhi.n	40b642 <_realloc_r+0xae>
  40b5c6:	4294      	cmp	r4, r2
  40b5c8:	da43      	bge.n	40b652 <_realloc_r+0xbe>
  40b5ca:	4bc4      	ldr	r3, [pc, #784]	; (40b8dc <_realloc_r+0x348>)
  40b5cc:	6899      	ldr	r1, [r3, #8]
  40b5ce:	eb09 0004 	add.w	r0, r9, r4
  40b5d2:	4288      	cmp	r0, r1
  40b5d4:	f000 80b4 	beq.w	40b740 <_realloc_r+0x1ac>
  40b5d8:	6843      	ldr	r3, [r0, #4]
  40b5da:	f023 0101 	bic.w	r1, r3, #1
  40b5de:	4401      	add	r1, r0
  40b5e0:	6849      	ldr	r1, [r1, #4]
  40b5e2:	07c9      	lsls	r1, r1, #31
  40b5e4:	d54c      	bpl.n	40b680 <_realloc_r+0xec>
  40b5e6:	f01e 0f01 	tst.w	lr, #1
  40b5ea:	f000 809b 	beq.w	40b724 <_realloc_r+0x190>
  40b5ee:	4631      	mov	r1, r6
  40b5f0:	4640      	mov	r0, r8
  40b5f2:	f7ff f949 	bl	40a888 <_malloc_r>
  40b5f6:	4606      	mov	r6, r0
  40b5f8:	2800      	cmp	r0, #0
  40b5fa:	d03a      	beq.n	40b672 <_realloc_r+0xde>
  40b5fc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b600:	f023 0301 	bic.w	r3, r3, #1
  40b604:	444b      	add	r3, r9
  40b606:	f1a0 0208 	sub.w	r2, r0, #8
  40b60a:	429a      	cmp	r2, r3
  40b60c:	f000 8121 	beq.w	40b852 <_realloc_r+0x2be>
  40b610:	1f22      	subs	r2, r4, #4
  40b612:	2a24      	cmp	r2, #36	; 0x24
  40b614:	f200 8107 	bhi.w	40b826 <_realloc_r+0x292>
  40b618:	2a13      	cmp	r2, #19
  40b61a:	f200 80db 	bhi.w	40b7d4 <_realloc_r+0x240>
  40b61e:	4603      	mov	r3, r0
  40b620:	462a      	mov	r2, r5
  40b622:	6811      	ldr	r1, [r2, #0]
  40b624:	6019      	str	r1, [r3, #0]
  40b626:	6851      	ldr	r1, [r2, #4]
  40b628:	6059      	str	r1, [r3, #4]
  40b62a:	6892      	ldr	r2, [r2, #8]
  40b62c:	609a      	str	r2, [r3, #8]
  40b62e:	4629      	mov	r1, r5
  40b630:	4640      	mov	r0, r8
  40b632:	f7fe fdfd 	bl	40a230 <_free_r>
  40b636:	e01c      	b.n	40b672 <_realloc_r+0xde>
  40b638:	f027 0707 	bic.w	r7, r7, #7
  40b63c:	2f00      	cmp	r7, #0
  40b63e:	463a      	mov	r2, r7
  40b640:	dabf      	bge.n	40b5c2 <_realloc_r+0x2e>
  40b642:	2600      	movs	r6, #0
  40b644:	230c      	movs	r3, #12
  40b646:	4630      	mov	r0, r6
  40b648:	f8c8 3000 	str.w	r3, [r8]
  40b64c:	b003      	add	sp, #12
  40b64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b652:	462e      	mov	r6, r5
  40b654:	1be3      	subs	r3, r4, r7
  40b656:	2b0f      	cmp	r3, #15
  40b658:	d81e      	bhi.n	40b698 <_realloc_r+0x104>
  40b65a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40b65e:	f003 0301 	and.w	r3, r3, #1
  40b662:	4323      	orrs	r3, r4
  40b664:	444c      	add	r4, r9
  40b666:	f8c9 3004 	str.w	r3, [r9, #4]
  40b66a:	6863      	ldr	r3, [r4, #4]
  40b66c:	f043 0301 	orr.w	r3, r3, #1
  40b670:	6063      	str	r3, [r4, #4]
  40b672:	4640      	mov	r0, r8
  40b674:	f7ff fc8e 	bl	40af94 <__malloc_unlock>
  40b678:	4630      	mov	r0, r6
  40b67a:	b003      	add	sp, #12
  40b67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b680:	f023 0303 	bic.w	r3, r3, #3
  40b684:	18e1      	adds	r1, r4, r3
  40b686:	4291      	cmp	r1, r2
  40b688:	db1f      	blt.n	40b6ca <_realloc_r+0x136>
  40b68a:	68c3      	ldr	r3, [r0, #12]
  40b68c:	6882      	ldr	r2, [r0, #8]
  40b68e:	462e      	mov	r6, r5
  40b690:	60d3      	str	r3, [r2, #12]
  40b692:	460c      	mov	r4, r1
  40b694:	609a      	str	r2, [r3, #8]
  40b696:	e7dd      	b.n	40b654 <_realloc_r+0xc0>
  40b698:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40b69c:	eb09 0107 	add.w	r1, r9, r7
  40b6a0:	f002 0201 	and.w	r2, r2, #1
  40b6a4:	444c      	add	r4, r9
  40b6a6:	f043 0301 	orr.w	r3, r3, #1
  40b6aa:	4317      	orrs	r7, r2
  40b6ac:	f8c9 7004 	str.w	r7, [r9, #4]
  40b6b0:	604b      	str	r3, [r1, #4]
  40b6b2:	6863      	ldr	r3, [r4, #4]
  40b6b4:	f043 0301 	orr.w	r3, r3, #1
  40b6b8:	3108      	adds	r1, #8
  40b6ba:	6063      	str	r3, [r4, #4]
  40b6bc:	4640      	mov	r0, r8
  40b6be:	f7fe fdb7 	bl	40a230 <_free_r>
  40b6c2:	e7d6      	b.n	40b672 <_realloc_r+0xde>
  40b6c4:	4611      	mov	r1, r2
  40b6c6:	f7ff b8df 	b.w	40a888 <_malloc_r>
  40b6ca:	f01e 0f01 	tst.w	lr, #1
  40b6ce:	d18e      	bne.n	40b5ee <_realloc_r+0x5a>
  40b6d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b6d4:	eba9 0a01 	sub.w	sl, r9, r1
  40b6d8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b6dc:	f021 0103 	bic.w	r1, r1, #3
  40b6e0:	440b      	add	r3, r1
  40b6e2:	4423      	add	r3, r4
  40b6e4:	4293      	cmp	r3, r2
  40b6e6:	db25      	blt.n	40b734 <_realloc_r+0x1a0>
  40b6e8:	68c2      	ldr	r2, [r0, #12]
  40b6ea:	6881      	ldr	r1, [r0, #8]
  40b6ec:	4656      	mov	r6, sl
  40b6ee:	60ca      	str	r2, [r1, #12]
  40b6f0:	6091      	str	r1, [r2, #8]
  40b6f2:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b6f6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40b6fa:	1f22      	subs	r2, r4, #4
  40b6fc:	2a24      	cmp	r2, #36	; 0x24
  40b6fe:	60c1      	str	r1, [r0, #12]
  40b700:	6088      	str	r0, [r1, #8]
  40b702:	f200 8094 	bhi.w	40b82e <_realloc_r+0x29a>
  40b706:	2a13      	cmp	r2, #19
  40b708:	d96f      	bls.n	40b7ea <_realloc_r+0x256>
  40b70a:	6829      	ldr	r1, [r5, #0]
  40b70c:	f8ca 1008 	str.w	r1, [sl, #8]
  40b710:	6869      	ldr	r1, [r5, #4]
  40b712:	f8ca 100c 	str.w	r1, [sl, #12]
  40b716:	2a1b      	cmp	r2, #27
  40b718:	f200 80a2 	bhi.w	40b860 <_realloc_r+0x2cc>
  40b71c:	3508      	adds	r5, #8
  40b71e:	f10a 0210 	add.w	r2, sl, #16
  40b722:	e063      	b.n	40b7ec <_realloc_r+0x258>
  40b724:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40b728:	eba9 0a03 	sub.w	sl, r9, r3
  40b72c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b730:	f021 0103 	bic.w	r1, r1, #3
  40b734:	1863      	adds	r3, r4, r1
  40b736:	4293      	cmp	r3, r2
  40b738:	f6ff af59 	blt.w	40b5ee <_realloc_r+0x5a>
  40b73c:	4656      	mov	r6, sl
  40b73e:	e7d8      	b.n	40b6f2 <_realloc_r+0x15e>
  40b740:	6841      	ldr	r1, [r0, #4]
  40b742:	f021 0b03 	bic.w	fp, r1, #3
  40b746:	44a3      	add	fp, r4
  40b748:	f107 0010 	add.w	r0, r7, #16
  40b74c:	4583      	cmp	fp, r0
  40b74e:	da56      	bge.n	40b7fe <_realloc_r+0x26a>
  40b750:	f01e 0f01 	tst.w	lr, #1
  40b754:	f47f af4b 	bne.w	40b5ee <_realloc_r+0x5a>
  40b758:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b75c:	eba9 0a01 	sub.w	sl, r9, r1
  40b760:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b764:	f021 0103 	bic.w	r1, r1, #3
  40b768:	448b      	add	fp, r1
  40b76a:	4558      	cmp	r0, fp
  40b76c:	dce2      	bgt.n	40b734 <_realloc_r+0x1a0>
  40b76e:	4656      	mov	r6, sl
  40b770:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b774:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40b778:	1f22      	subs	r2, r4, #4
  40b77a:	2a24      	cmp	r2, #36	; 0x24
  40b77c:	60c1      	str	r1, [r0, #12]
  40b77e:	6088      	str	r0, [r1, #8]
  40b780:	f200 808f 	bhi.w	40b8a2 <_realloc_r+0x30e>
  40b784:	2a13      	cmp	r2, #19
  40b786:	f240 808a 	bls.w	40b89e <_realloc_r+0x30a>
  40b78a:	6829      	ldr	r1, [r5, #0]
  40b78c:	f8ca 1008 	str.w	r1, [sl, #8]
  40b790:	6869      	ldr	r1, [r5, #4]
  40b792:	f8ca 100c 	str.w	r1, [sl, #12]
  40b796:	2a1b      	cmp	r2, #27
  40b798:	f200 808a 	bhi.w	40b8b0 <_realloc_r+0x31c>
  40b79c:	3508      	adds	r5, #8
  40b79e:	f10a 0210 	add.w	r2, sl, #16
  40b7a2:	6829      	ldr	r1, [r5, #0]
  40b7a4:	6011      	str	r1, [r2, #0]
  40b7a6:	6869      	ldr	r1, [r5, #4]
  40b7a8:	6051      	str	r1, [r2, #4]
  40b7aa:	68a9      	ldr	r1, [r5, #8]
  40b7ac:	6091      	str	r1, [r2, #8]
  40b7ae:	eb0a 0107 	add.w	r1, sl, r7
  40b7b2:	ebab 0207 	sub.w	r2, fp, r7
  40b7b6:	f042 0201 	orr.w	r2, r2, #1
  40b7ba:	6099      	str	r1, [r3, #8]
  40b7bc:	604a      	str	r2, [r1, #4]
  40b7be:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b7c2:	f003 0301 	and.w	r3, r3, #1
  40b7c6:	431f      	orrs	r7, r3
  40b7c8:	4640      	mov	r0, r8
  40b7ca:	f8ca 7004 	str.w	r7, [sl, #4]
  40b7ce:	f7ff fbe1 	bl	40af94 <__malloc_unlock>
  40b7d2:	e751      	b.n	40b678 <_realloc_r+0xe4>
  40b7d4:	682b      	ldr	r3, [r5, #0]
  40b7d6:	6003      	str	r3, [r0, #0]
  40b7d8:	686b      	ldr	r3, [r5, #4]
  40b7da:	6043      	str	r3, [r0, #4]
  40b7dc:	2a1b      	cmp	r2, #27
  40b7de:	d82d      	bhi.n	40b83c <_realloc_r+0x2a8>
  40b7e0:	f100 0308 	add.w	r3, r0, #8
  40b7e4:	f105 0208 	add.w	r2, r5, #8
  40b7e8:	e71b      	b.n	40b622 <_realloc_r+0x8e>
  40b7ea:	4632      	mov	r2, r6
  40b7ec:	6829      	ldr	r1, [r5, #0]
  40b7ee:	6011      	str	r1, [r2, #0]
  40b7f0:	6869      	ldr	r1, [r5, #4]
  40b7f2:	6051      	str	r1, [r2, #4]
  40b7f4:	68a9      	ldr	r1, [r5, #8]
  40b7f6:	6091      	str	r1, [r2, #8]
  40b7f8:	461c      	mov	r4, r3
  40b7fa:	46d1      	mov	r9, sl
  40b7fc:	e72a      	b.n	40b654 <_realloc_r+0xc0>
  40b7fe:	eb09 0107 	add.w	r1, r9, r7
  40b802:	ebab 0b07 	sub.w	fp, fp, r7
  40b806:	f04b 0201 	orr.w	r2, fp, #1
  40b80a:	6099      	str	r1, [r3, #8]
  40b80c:	604a      	str	r2, [r1, #4]
  40b80e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b812:	f003 0301 	and.w	r3, r3, #1
  40b816:	431f      	orrs	r7, r3
  40b818:	4640      	mov	r0, r8
  40b81a:	f845 7c04 	str.w	r7, [r5, #-4]
  40b81e:	f7ff fbb9 	bl	40af94 <__malloc_unlock>
  40b822:	462e      	mov	r6, r5
  40b824:	e728      	b.n	40b678 <_realloc_r+0xe4>
  40b826:	4629      	mov	r1, r5
  40b828:	f7ff fb4a 	bl	40aec0 <memmove>
  40b82c:	e6ff      	b.n	40b62e <_realloc_r+0x9a>
  40b82e:	4629      	mov	r1, r5
  40b830:	4630      	mov	r0, r6
  40b832:	461c      	mov	r4, r3
  40b834:	46d1      	mov	r9, sl
  40b836:	f7ff fb43 	bl	40aec0 <memmove>
  40b83a:	e70b      	b.n	40b654 <_realloc_r+0xc0>
  40b83c:	68ab      	ldr	r3, [r5, #8]
  40b83e:	6083      	str	r3, [r0, #8]
  40b840:	68eb      	ldr	r3, [r5, #12]
  40b842:	60c3      	str	r3, [r0, #12]
  40b844:	2a24      	cmp	r2, #36	; 0x24
  40b846:	d017      	beq.n	40b878 <_realloc_r+0x2e4>
  40b848:	f100 0310 	add.w	r3, r0, #16
  40b84c:	f105 0210 	add.w	r2, r5, #16
  40b850:	e6e7      	b.n	40b622 <_realloc_r+0x8e>
  40b852:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40b856:	f023 0303 	bic.w	r3, r3, #3
  40b85a:	441c      	add	r4, r3
  40b85c:	462e      	mov	r6, r5
  40b85e:	e6f9      	b.n	40b654 <_realloc_r+0xc0>
  40b860:	68a9      	ldr	r1, [r5, #8]
  40b862:	f8ca 1010 	str.w	r1, [sl, #16]
  40b866:	68e9      	ldr	r1, [r5, #12]
  40b868:	f8ca 1014 	str.w	r1, [sl, #20]
  40b86c:	2a24      	cmp	r2, #36	; 0x24
  40b86e:	d00c      	beq.n	40b88a <_realloc_r+0x2f6>
  40b870:	3510      	adds	r5, #16
  40b872:	f10a 0218 	add.w	r2, sl, #24
  40b876:	e7b9      	b.n	40b7ec <_realloc_r+0x258>
  40b878:	692b      	ldr	r3, [r5, #16]
  40b87a:	6103      	str	r3, [r0, #16]
  40b87c:	696b      	ldr	r3, [r5, #20]
  40b87e:	6143      	str	r3, [r0, #20]
  40b880:	f105 0218 	add.w	r2, r5, #24
  40b884:	f100 0318 	add.w	r3, r0, #24
  40b888:	e6cb      	b.n	40b622 <_realloc_r+0x8e>
  40b88a:	692a      	ldr	r2, [r5, #16]
  40b88c:	f8ca 2018 	str.w	r2, [sl, #24]
  40b890:	696a      	ldr	r2, [r5, #20]
  40b892:	f8ca 201c 	str.w	r2, [sl, #28]
  40b896:	3518      	adds	r5, #24
  40b898:	f10a 0220 	add.w	r2, sl, #32
  40b89c:	e7a6      	b.n	40b7ec <_realloc_r+0x258>
  40b89e:	4632      	mov	r2, r6
  40b8a0:	e77f      	b.n	40b7a2 <_realloc_r+0x20e>
  40b8a2:	4629      	mov	r1, r5
  40b8a4:	4630      	mov	r0, r6
  40b8a6:	9301      	str	r3, [sp, #4]
  40b8a8:	f7ff fb0a 	bl	40aec0 <memmove>
  40b8ac:	9b01      	ldr	r3, [sp, #4]
  40b8ae:	e77e      	b.n	40b7ae <_realloc_r+0x21a>
  40b8b0:	68a9      	ldr	r1, [r5, #8]
  40b8b2:	f8ca 1010 	str.w	r1, [sl, #16]
  40b8b6:	68e9      	ldr	r1, [r5, #12]
  40b8b8:	f8ca 1014 	str.w	r1, [sl, #20]
  40b8bc:	2a24      	cmp	r2, #36	; 0x24
  40b8be:	d003      	beq.n	40b8c8 <_realloc_r+0x334>
  40b8c0:	3510      	adds	r5, #16
  40b8c2:	f10a 0218 	add.w	r2, sl, #24
  40b8c6:	e76c      	b.n	40b7a2 <_realloc_r+0x20e>
  40b8c8:	692a      	ldr	r2, [r5, #16]
  40b8ca:	f8ca 2018 	str.w	r2, [sl, #24]
  40b8ce:	696a      	ldr	r2, [r5, #20]
  40b8d0:	f8ca 201c 	str.w	r2, [sl, #28]
  40b8d4:	3518      	adds	r5, #24
  40b8d6:	f10a 0220 	add.w	r2, sl, #32
  40b8da:	e762      	b.n	40b7a2 <_realloc_r+0x20e>
  40b8dc:	204005c8 	.word	0x204005c8

0040b8e0 <_sbrk_r>:
  40b8e0:	b538      	push	{r3, r4, r5, lr}
  40b8e2:	4c07      	ldr	r4, [pc, #28]	; (40b900 <_sbrk_r+0x20>)
  40b8e4:	2300      	movs	r3, #0
  40b8e6:	4605      	mov	r5, r0
  40b8e8:	4608      	mov	r0, r1
  40b8ea:	6023      	str	r3, [r4, #0]
  40b8ec:	f7fa f974 	bl	405bd8 <_sbrk>
  40b8f0:	1c43      	adds	r3, r0, #1
  40b8f2:	d000      	beq.n	40b8f6 <_sbrk_r+0x16>
  40b8f4:	bd38      	pop	{r3, r4, r5, pc}
  40b8f6:	6823      	ldr	r3, [r4, #0]
  40b8f8:	2b00      	cmp	r3, #0
  40b8fa:	d0fb      	beq.n	40b8f4 <_sbrk_r+0x14>
  40b8fc:	602b      	str	r3, [r5, #0]
  40b8fe:	bd38      	pop	{r3, r4, r5, pc}
  40b900:	2040cbe4 	.word	0x2040cbe4

0040b904 <__sread>:
  40b904:	b510      	push	{r4, lr}
  40b906:	460c      	mov	r4, r1
  40b908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b90c:	f000 faa4 	bl	40be58 <_read_r>
  40b910:	2800      	cmp	r0, #0
  40b912:	db03      	blt.n	40b91c <__sread+0x18>
  40b914:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40b916:	4403      	add	r3, r0
  40b918:	6523      	str	r3, [r4, #80]	; 0x50
  40b91a:	bd10      	pop	{r4, pc}
  40b91c:	89a3      	ldrh	r3, [r4, #12]
  40b91e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b922:	81a3      	strh	r3, [r4, #12]
  40b924:	bd10      	pop	{r4, pc}
  40b926:	bf00      	nop

0040b928 <__swrite>:
  40b928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b92c:	4616      	mov	r6, r2
  40b92e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40b932:	461f      	mov	r7, r3
  40b934:	05d3      	lsls	r3, r2, #23
  40b936:	460c      	mov	r4, r1
  40b938:	4605      	mov	r5, r0
  40b93a:	d507      	bpl.n	40b94c <__swrite+0x24>
  40b93c:	2200      	movs	r2, #0
  40b93e:	2302      	movs	r3, #2
  40b940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b944:	f000 fa72 	bl	40be2c <_lseek_r>
  40b948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b94c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b950:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40b954:	81a2      	strh	r2, [r4, #12]
  40b956:	463b      	mov	r3, r7
  40b958:	4632      	mov	r2, r6
  40b95a:	4628      	mov	r0, r5
  40b95c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b960:	f000 b922 	b.w	40bba8 <_write_r>

0040b964 <__sseek>:
  40b964:	b510      	push	{r4, lr}
  40b966:	460c      	mov	r4, r1
  40b968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b96c:	f000 fa5e 	bl	40be2c <_lseek_r>
  40b970:	89a3      	ldrh	r3, [r4, #12]
  40b972:	1c42      	adds	r2, r0, #1
  40b974:	bf0e      	itee	eq
  40b976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40b97a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40b97e:	6520      	strne	r0, [r4, #80]	; 0x50
  40b980:	81a3      	strh	r3, [r4, #12]
  40b982:	bd10      	pop	{r4, pc}

0040b984 <__sclose>:
  40b984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b988:	f000 b9b6 	b.w	40bcf8 <_close_r>

0040b98c <__ssprint_r>:
  40b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b990:	6893      	ldr	r3, [r2, #8]
  40b992:	b083      	sub	sp, #12
  40b994:	4690      	mov	r8, r2
  40b996:	2b00      	cmp	r3, #0
  40b998:	d070      	beq.n	40ba7c <__ssprint_r+0xf0>
  40b99a:	4682      	mov	sl, r0
  40b99c:	460c      	mov	r4, r1
  40b99e:	6817      	ldr	r7, [r2, #0]
  40b9a0:	688d      	ldr	r5, [r1, #8]
  40b9a2:	6808      	ldr	r0, [r1, #0]
  40b9a4:	e042      	b.n	40ba2c <__ssprint_r+0xa0>
  40b9a6:	89a3      	ldrh	r3, [r4, #12]
  40b9a8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40b9ac:	d02e      	beq.n	40ba0c <__ssprint_r+0x80>
  40b9ae:	6965      	ldr	r5, [r4, #20]
  40b9b0:	6921      	ldr	r1, [r4, #16]
  40b9b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40b9b6:	eba0 0b01 	sub.w	fp, r0, r1
  40b9ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40b9be:	f10b 0001 	add.w	r0, fp, #1
  40b9c2:	106d      	asrs	r5, r5, #1
  40b9c4:	4430      	add	r0, r6
  40b9c6:	42a8      	cmp	r0, r5
  40b9c8:	462a      	mov	r2, r5
  40b9ca:	bf84      	itt	hi
  40b9cc:	4605      	movhi	r5, r0
  40b9ce:	462a      	movhi	r2, r5
  40b9d0:	055b      	lsls	r3, r3, #21
  40b9d2:	d538      	bpl.n	40ba46 <__ssprint_r+0xba>
  40b9d4:	4611      	mov	r1, r2
  40b9d6:	4650      	mov	r0, sl
  40b9d8:	f7fe ff56 	bl	40a888 <_malloc_r>
  40b9dc:	2800      	cmp	r0, #0
  40b9de:	d03c      	beq.n	40ba5a <__ssprint_r+0xce>
  40b9e0:	465a      	mov	r2, fp
  40b9e2:	6921      	ldr	r1, [r4, #16]
  40b9e4:	9001      	str	r0, [sp, #4]
  40b9e6:	f7fa fe27 	bl	406638 <memcpy>
  40b9ea:	89a2      	ldrh	r2, [r4, #12]
  40b9ec:	9b01      	ldr	r3, [sp, #4]
  40b9ee:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40b9f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40b9f6:	81a2      	strh	r2, [r4, #12]
  40b9f8:	eba5 020b 	sub.w	r2, r5, fp
  40b9fc:	eb03 000b 	add.w	r0, r3, fp
  40ba00:	6165      	str	r5, [r4, #20]
  40ba02:	6123      	str	r3, [r4, #16]
  40ba04:	6020      	str	r0, [r4, #0]
  40ba06:	60a2      	str	r2, [r4, #8]
  40ba08:	4635      	mov	r5, r6
  40ba0a:	46b3      	mov	fp, r6
  40ba0c:	465a      	mov	r2, fp
  40ba0e:	4649      	mov	r1, r9
  40ba10:	f7ff fa56 	bl	40aec0 <memmove>
  40ba14:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40ba18:	68a2      	ldr	r2, [r4, #8]
  40ba1a:	6820      	ldr	r0, [r4, #0]
  40ba1c:	1b55      	subs	r5, r2, r5
  40ba1e:	4458      	add	r0, fp
  40ba20:	1b9e      	subs	r6, r3, r6
  40ba22:	60a5      	str	r5, [r4, #8]
  40ba24:	6020      	str	r0, [r4, #0]
  40ba26:	f8c8 6008 	str.w	r6, [r8, #8]
  40ba2a:	b33e      	cbz	r6, 40ba7c <__ssprint_r+0xf0>
  40ba2c:	687e      	ldr	r6, [r7, #4]
  40ba2e:	463b      	mov	r3, r7
  40ba30:	3708      	adds	r7, #8
  40ba32:	2e00      	cmp	r6, #0
  40ba34:	d0fa      	beq.n	40ba2c <__ssprint_r+0xa0>
  40ba36:	42ae      	cmp	r6, r5
  40ba38:	f8d3 9000 	ldr.w	r9, [r3]
  40ba3c:	46ab      	mov	fp, r5
  40ba3e:	d2b2      	bcs.n	40b9a6 <__ssprint_r+0x1a>
  40ba40:	4635      	mov	r5, r6
  40ba42:	46b3      	mov	fp, r6
  40ba44:	e7e2      	b.n	40ba0c <__ssprint_r+0x80>
  40ba46:	4650      	mov	r0, sl
  40ba48:	f7ff fda4 	bl	40b594 <_realloc_r>
  40ba4c:	4603      	mov	r3, r0
  40ba4e:	2800      	cmp	r0, #0
  40ba50:	d1d2      	bne.n	40b9f8 <__ssprint_r+0x6c>
  40ba52:	6921      	ldr	r1, [r4, #16]
  40ba54:	4650      	mov	r0, sl
  40ba56:	f7fe fbeb 	bl	40a230 <_free_r>
  40ba5a:	230c      	movs	r3, #12
  40ba5c:	f8ca 3000 	str.w	r3, [sl]
  40ba60:	89a3      	ldrh	r3, [r4, #12]
  40ba62:	2200      	movs	r2, #0
  40ba64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ba68:	f04f 30ff 	mov.w	r0, #4294967295
  40ba6c:	81a3      	strh	r3, [r4, #12]
  40ba6e:	f8c8 2008 	str.w	r2, [r8, #8]
  40ba72:	f8c8 2004 	str.w	r2, [r8, #4]
  40ba76:	b003      	add	sp, #12
  40ba78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ba7c:	2000      	movs	r0, #0
  40ba7e:	f8c8 0004 	str.w	r0, [r8, #4]
  40ba82:	b003      	add	sp, #12
  40ba84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040ba88 <__swbuf_r>:
  40ba88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ba8a:	460d      	mov	r5, r1
  40ba8c:	4614      	mov	r4, r2
  40ba8e:	4606      	mov	r6, r0
  40ba90:	b110      	cbz	r0, 40ba98 <__swbuf_r+0x10>
  40ba92:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ba94:	2b00      	cmp	r3, #0
  40ba96:	d04b      	beq.n	40bb30 <__swbuf_r+0xa8>
  40ba98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40ba9c:	69a3      	ldr	r3, [r4, #24]
  40ba9e:	60a3      	str	r3, [r4, #8]
  40baa0:	b291      	uxth	r1, r2
  40baa2:	0708      	lsls	r0, r1, #28
  40baa4:	d539      	bpl.n	40bb1a <__swbuf_r+0x92>
  40baa6:	6923      	ldr	r3, [r4, #16]
  40baa8:	2b00      	cmp	r3, #0
  40baaa:	d036      	beq.n	40bb1a <__swbuf_r+0x92>
  40baac:	b2ed      	uxtb	r5, r5
  40baae:	0489      	lsls	r1, r1, #18
  40bab0:	462f      	mov	r7, r5
  40bab2:	d515      	bpl.n	40bae0 <__swbuf_r+0x58>
  40bab4:	6822      	ldr	r2, [r4, #0]
  40bab6:	6961      	ldr	r1, [r4, #20]
  40bab8:	1ad3      	subs	r3, r2, r3
  40baba:	428b      	cmp	r3, r1
  40babc:	da1c      	bge.n	40baf8 <__swbuf_r+0x70>
  40babe:	3301      	adds	r3, #1
  40bac0:	68a1      	ldr	r1, [r4, #8]
  40bac2:	1c50      	adds	r0, r2, #1
  40bac4:	3901      	subs	r1, #1
  40bac6:	60a1      	str	r1, [r4, #8]
  40bac8:	6020      	str	r0, [r4, #0]
  40baca:	7015      	strb	r5, [r2, #0]
  40bacc:	6962      	ldr	r2, [r4, #20]
  40bace:	429a      	cmp	r2, r3
  40bad0:	d01a      	beq.n	40bb08 <__swbuf_r+0x80>
  40bad2:	89a3      	ldrh	r3, [r4, #12]
  40bad4:	07db      	lsls	r3, r3, #31
  40bad6:	d501      	bpl.n	40badc <__swbuf_r+0x54>
  40bad8:	2d0a      	cmp	r5, #10
  40bada:	d015      	beq.n	40bb08 <__swbuf_r+0x80>
  40badc:	4638      	mov	r0, r7
  40bade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bae0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40bae2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40bae6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40baea:	81a2      	strh	r2, [r4, #12]
  40baec:	6822      	ldr	r2, [r4, #0]
  40baee:	6661      	str	r1, [r4, #100]	; 0x64
  40baf0:	6961      	ldr	r1, [r4, #20]
  40baf2:	1ad3      	subs	r3, r2, r3
  40baf4:	428b      	cmp	r3, r1
  40baf6:	dbe2      	blt.n	40babe <__swbuf_r+0x36>
  40baf8:	4621      	mov	r1, r4
  40bafa:	4630      	mov	r0, r6
  40bafc:	f7fe fa1a 	bl	409f34 <_fflush_r>
  40bb00:	b940      	cbnz	r0, 40bb14 <__swbuf_r+0x8c>
  40bb02:	6822      	ldr	r2, [r4, #0]
  40bb04:	2301      	movs	r3, #1
  40bb06:	e7db      	b.n	40bac0 <__swbuf_r+0x38>
  40bb08:	4621      	mov	r1, r4
  40bb0a:	4630      	mov	r0, r6
  40bb0c:	f7fe fa12 	bl	409f34 <_fflush_r>
  40bb10:	2800      	cmp	r0, #0
  40bb12:	d0e3      	beq.n	40badc <__swbuf_r+0x54>
  40bb14:	f04f 37ff 	mov.w	r7, #4294967295
  40bb18:	e7e0      	b.n	40badc <__swbuf_r+0x54>
  40bb1a:	4621      	mov	r1, r4
  40bb1c:	4630      	mov	r0, r6
  40bb1e:	f7fd f935 	bl	408d8c <__swsetup_r>
  40bb22:	2800      	cmp	r0, #0
  40bb24:	d1f6      	bne.n	40bb14 <__swbuf_r+0x8c>
  40bb26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40bb2a:	6923      	ldr	r3, [r4, #16]
  40bb2c:	b291      	uxth	r1, r2
  40bb2e:	e7bd      	b.n	40baac <__swbuf_r+0x24>
  40bb30:	f7fe fa58 	bl	409fe4 <__sinit>
  40bb34:	e7b0      	b.n	40ba98 <__swbuf_r+0x10>
  40bb36:	bf00      	nop

0040bb38 <_wcrtomb_r>:
  40bb38:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bb3a:	4606      	mov	r6, r0
  40bb3c:	b085      	sub	sp, #20
  40bb3e:	461f      	mov	r7, r3
  40bb40:	b189      	cbz	r1, 40bb66 <_wcrtomb_r+0x2e>
  40bb42:	4c10      	ldr	r4, [pc, #64]	; (40bb84 <_wcrtomb_r+0x4c>)
  40bb44:	4d10      	ldr	r5, [pc, #64]	; (40bb88 <_wcrtomb_r+0x50>)
  40bb46:	6824      	ldr	r4, [r4, #0]
  40bb48:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40bb4a:	2c00      	cmp	r4, #0
  40bb4c:	bf08      	it	eq
  40bb4e:	462c      	moveq	r4, r5
  40bb50:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40bb54:	47a0      	blx	r4
  40bb56:	1c43      	adds	r3, r0, #1
  40bb58:	d103      	bne.n	40bb62 <_wcrtomb_r+0x2a>
  40bb5a:	2200      	movs	r2, #0
  40bb5c:	238a      	movs	r3, #138	; 0x8a
  40bb5e:	603a      	str	r2, [r7, #0]
  40bb60:	6033      	str	r3, [r6, #0]
  40bb62:	b005      	add	sp, #20
  40bb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bb66:	460c      	mov	r4, r1
  40bb68:	4906      	ldr	r1, [pc, #24]	; (40bb84 <_wcrtomb_r+0x4c>)
  40bb6a:	4a07      	ldr	r2, [pc, #28]	; (40bb88 <_wcrtomb_r+0x50>)
  40bb6c:	6809      	ldr	r1, [r1, #0]
  40bb6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40bb70:	2900      	cmp	r1, #0
  40bb72:	bf08      	it	eq
  40bb74:	4611      	moveq	r1, r2
  40bb76:	4622      	mov	r2, r4
  40bb78:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40bb7c:	a901      	add	r1, sp, #4
  40bb7e:	47a0      	blx	r4
  40bb80:	e7e9      	b.n	40bb56 <_wcrtomb_r+0x1e>
  40bb82:	bf00      	nop
  40bb84:	20400028 	.word	0x20400028
  40bb88:	2040045c 	.word	0x2040045c

0040bb8c <__ascii_wctomb>:
  40bb8c:	b121      	cbz	r1, 40bb98 <__ascii_wctomb+0xc>
  40bb8e:	2aff      	cmp	r2, #255	; 0xff
  40bb90:	d804      	bhi.n	40bb9c <__ascii_wctomb+0x10>
  40bb92:	700a      	strb	r2, [r1, #0]
  40bb94:	2001      	movs	r0, #1
  40bb96:	4770      	bx	lr
  40bb98:	4608      	mov	r0, r1
  40bb9a:	4770      	bx	lr
  40bb9c:	238a      	movs	r3, #138	; 0x8a
  40bb9e:	6003      	str	r3, [r0, #0]
  40bba0:	f04f 30ff 	mov.w	r0, #4294967295
  40bba4:	4770      	bx	lr
  40bba6:	bf00      	nop

0040bba8 <_write_r>:
  40bba8:	b570      	push	{r4, r5, r6, lr}
  40bbaa:	460d      	mov	r5, r1
  40bbac:	4c08      	ldr	r4, [pc, #32]	; (40bbd0 <_write_r+0x28>)
  40bbae:	4611      	mov	r1, r2
  40bbb0:	4606      	mov	r6, r0
  40bbb2:	461a      	mov	r2, r3
  40bbb4:	4628      	mov	r0, r5
  40bbb6:	2300      	movs	r3, #0
  40bbb8:	6023      	str	r3, [r4, #0]
  40bbba:	f7f9 f9a1 	bl	404f00 <_write>
  40bbbe:	1c43      	adds	r3, r0, #1
  40bbc0:	d000      	beq.n	40bbc4 <_write_r+0x1c>
  40bbc2:	bd70      	pop	{r4, r5, r6, pc}
  40bbc4:	6823      	ldr	r3, [r4, #0]
  40bbc6:	2b00      	cmp	r3, #0
  40bbc8:	d0fb      	beq.n	40bbc2 <_write_r+0x1a>
  40bbca:	6033      	str	r3, [r6, #0]
  40bbcc:	bd70      	pop	{r4, r5, r6, pc}
  40bbce:	bf00      	nop
  40bbd0:	2040cbe4 	.word	0x2040cbe4

0040bbd4 <__register_exitproc>:
  40bbd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40bbd8:	4d2c      	ldr	r5, [pc, #176]	; (40bc8c <__register_exitproc+0xb8>)
  40bbda:	4606      	mov	r6, r0
  40bbdc:	6828      	ldr	r0, [r5, #0]
  40bbde:	4698      	mov	r8, r3
  40bbe0:	460f      	mov	r7, r1
  40bbe2:	4691      	mov	r9, r2
  40bbe4:	f7fe fdcc 	bl	40a780 <__retarget_lock_acquire_recursive>
  40bbe8:	4b29      	ldr	r3, [pc, #164]	; (40bc90 <__register_exitproc+0xbc>)
  40bbea:	681c      	ldr	r4, [r3, #0]
  40bbec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40bbf0:	2b00      	cmp	r3, #0
  40bbf2:	d03e      	beq.n	40bc72 <__register_exitproc+0x9e>
  40bbf4:	685a      	ldr	r2, [r3, #4]
  40bbf6:	2a1f      	cmp	r2, #31
  40bbf8:	dc1c      	bgt.n	40bc34 <__register_exitproc+0x60>
  40bbfa:	f102 0e01 	add.w	lr, r2, #1
  40bbfe:	b176      	cbz	r6, 40bc1e <__register_exitproc+0x4a>
  40bc00:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40bc04:	2401      	movs	r4, #1
  40bc06:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40bc0a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40bc0e:	4094      	lsls	r4, r2
  40bc10:	4320      	orrs	r0, r4
  40bc12:	2e02      	cmp	r6, #2
  40bc14:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40bc18:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40bc1c:	d023      	beq.n	40bc66 <__register_exitproc+0x92>
  40bc1e:	3202      	adds	r2, #2
  40bc20:	f8c3 e004 	str.w	lr, [r3, #4]
  40bc24:	6828      	ldr	r0, [r5, #0]
  40bc26:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40bc2a:	f7fe fdab 	bl	40a784 <__retarget_lock_release_recursive>
  40bc2e:	2000      	movs	r0, #0
  40bc30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bc34:	4b17      	ldr	r3, [pc, #92]	; (40bc94 <__register_exitproc+0xc0>)
  40bc36:	b30b      	cbz	r3, 40bc7c <__register_exitproc+0xa8>
  40bc38:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40bc3c:	f7fe fe1c 	bl	40a878 <malloc>
  40bc40:	4603      	mov	r3, r0
  40bc42:	b1d8      	cbz	r0, 40bc7c <__register_exitproc+0xa8>
  40bc44:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40bc48:	6002      	str	r2, [r0, #0]
  40bc4a:	2100      	movs	r1, #0
  40bc4c:	6041      	str	r1, [r0, #4]
  40bc4e:	460a      	mov	r2, r1
  40bc50:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40bc54:	f04f 0e01 	mov.w	lr, #1
  40bc58:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40bc5c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40bc60:	2e00      	cmp	r6, #0
  40bc62:	d0dc      	beq.n	40bc1e <__register_exitproc+0x4a>
  40bc64:	e7cc      	b.n	40bc00 <__register_exitproc+0x2c>
  40bc66:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40bc6a:	430c      	orrs	r4, r1
  40bc6c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40bc70:	e7d5      	b.n	40bc1e <__register_exitproc+0x4a>
  40bc72:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40bc76:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40bc7a:	e7bb      	b.n	40bbf4 <__register_exitproc+0x20>
  40bc7c:	6828      	ldr	r0, [r5, #0]
  40bc7e:	f7fe fd81 	bl	40a784 <__retarget_lock_release_recursive>
  40bc82:	f04f 30ff 	mov.w	r0, #4294967295
  40bc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bc8a:	bf00      	nop
  40bc8c:	20400458 	.word	0x20400458
  40bc90:	0040da2c 	.word	0x0040da2c
  40bc94:	0040a879 	.word	0x0040a879

0040bc98 <_calloc_r>:
  40bc98:	b510      	push	{r4, lr}
  40bc9a:	fb02 f101 	mul.w	r1, r2, r1
  40bc9e:	f7fe fdf3 	bl	40a888 <_malloc_r>
  40bca2:	4604      	mov	r4, r0
  40bca4:	b1d8      	cbz	r0, 40bcde <_calloc_r+0x46>
  40bca6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40bcaa:	f022 0203 	bic.w	r2, r2, #3
  40bcae:	3a04      	subs	r2, #4
  40bcb0:	2a24      	cmp	r2, #36	; 0x24
  40bcb2:	d818      	bhi.n	40bce6 <_calloc_r+0x4e>
  40bcb4:	2a13      	cmp	r2, #19
  40bcb6:	d914      	bls.n	40bce2 <_calloc_r+0x4a>
  40bcb8:	2300      	movs	r3, #0
  40bcba:	2a1b      	cmp	r2, #27
  40bcbc:	6003      	str	r3, [r0, #0]
  40bcbe:	6043      	str	r3, [r0, #4]
  40bcc0:	d916      	bls.n	40bcf0 <_calloc_r+0x58>
  40bcc2:	2a24      	cmp	r2, #36	; 0x24
  40bcc4:	6083      	str	r3, [r0, #8]
  40bcc6:	60c3      	str	r3, [r0, #12]
  40bcc8:	bf11      	iteee	ne
  40bcca:	f100 0210 	addne.w	r2, r0, #16
  40bcce:	6103      	streq	r3, [r0, #16]
  40bcd0:	6143      	streq	r3, [r0, #20]
  40bcd2:	f100 0218 	addeq.w	r2, r0, #24
  40bcd6:	2300      	movs	r3, #0
  40bcd8:	6013      	str	r3, [r2, #0]
  40bcda:	6053      	str	r3, [r2, #4]
  40bcdc:	6093      	str	r3, [r2, #8]
  40bcde:	4620      	mov	r0, r4
  40bce0:	bd10      	pop	{r4, pc}
  40bce2:	4602      	mov	r2, r0
  40bce4:	e7f7      	b.n	40bcd6 <_calloc_r+0x3e>
  40bce6:	2100      	movs	r1, #0
  40bce8:	f7fa fd40 	bl	40676c <memset>
  40bcec:	4620      	mov	r0, r4
  40bcee:	bd10      	pop	{r4, pc}
  40bcf0:	f100 0208 	add.w	r2, r0, #8
  40bcf4:	e7ef      	b.n	40bcd6 <_calloc_r+0x3e>
  40bcf6:	bf00      	nop

0040bcf8 <_close_r>:
  40bcf8:	b538      	push	{r3, r4, r5, lr}
  40bcfa:	4c07      	ldr	r4, [pc, #28]	; (40bd18 <_close_r+0x20>)
  40bcfc:	2300      	movs	r3, #0
  40bcfe:	4605      	mov	r5, r0
  40bd00:	4608      	mov	r0, r1
  40bd02:	6023      	str	r3, [r4, #0]
  40bd04:	f7f9 ff84 	bl	405c10 <_close>
  40bd08:	1c43      	adds	r3, r0, #1
  40bd0a:	d000      	beq.n	40bd0e <_close_r+0x16>
  40bd0c:	bd38      	pop	{r3, r4, r5, pc}
  40bd0e:	6823      	ldr	r3, [r4, #0]
  40bd10:	2b00      	cmp	r3, #0
  40bd12:	d0fb      	beq.n	40bd0c <_close_r+0x14>
  40bd14:	602b      	str	r3, [r5, #0]
  40bd16:	bd38      	pop	{r3, r4, r5, pc}
  40bd18:	2040cbe4 	.word	0x2040cbe4

0040bd1c <_fclose_r>:
  40bd1c:	b570      	push	{r4, r5, r6, lr}
  40bd1e:	b159      	cbz	r1, 40bd38 <_fclose_r+0x1c>
  40bd20:	4605      	mov	r5, r0
  40bd22:	460c      	mov	r4, r1
  40bd24:	b110      	cbz	r0, 40bd2c <_fclose_r+0x10>
  40bd26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bd28:	2b00      	cmp	r3, #0
  40bd2a:	d03c      	beq.n	40bda6 <_fclose_r+0x8a>
  40bd2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40bd2e:	07d8      	lsls	r0, r3, #31
  40bd30:	d505      	bpl.n	40bd3e <_fclose_r+0x22>
  40bd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bd36:	b92b      	cbnz	r3, 40bd44 <_fclose_r+0x28>
  40bd38:	2600      	movs	r6, #0
  40bd3a:	4630      	mov	r0, r6
  40bd3c:	bd70      	pop	{r4, r5, r6, pc}
  40bd3e:	89a3      	ldrh	r3, [r4, #12]
  40bd40:	0599      	lsls	r1, r3, #22
  40bd42:	d53c      	bpl.n	40bdbe <_fclose_r+0xa2>
  40bd44:	4621      	mov	r1, r4
  40bd46:	4628      	mov	r0, r5
  40bd48:	f7fe f854 	bl	409df4 <__sflush_r>
  40bd4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40bd4e:	4606      	mov	r6, r0
  40bd50:	b133      	cbz	r3, 40bd60 <_fclose_r+0x44>
  40bd52:	69e1      	ldr	r1, [r4, #28]
  40bd54:	4628      	mov	r0, r5
  40bd56:	4798      	blx	r3
  40bd58:	2800      	cmp	r0, #0
  40bd5a:	bfb8      	it	lt
  40bd5c:	f04f 36ff 	movlt.w	r6, #4294967295
  40bd60:	89a3      	ldrh	r3, [r4, #12]
  40bd62:	061a      	lsls	r2, r3, #24
  40bd64:	d422      	bmi.n	40bdac <_fclose_r+0x90>
  40bd66:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40bd68:	b141      	cbz	r1, 40bd7c <_fclose_r+0x60>
  40bd6a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40bd6e:	4299      	cmp	r1, r3
  40bd70:	d002      	beq.n	40bd78 <_fclose_r+0x5c>
  40bd72:	4628      	mov	r0, r5
  40bd74:	f7fe fa5c 	bl	40a230 <_free_r>
  40bd78:	2300      	movs	r3, #0
  40bd7a:	6323      	str	r3, [r4, #48]	; 0x30
  40bd7c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40bd7e:	b121      	cbz	r1, 40bd8a <_fclose_r+0x6e>
  40bd80:	4628      	mov	r0, r5
  40bd82:	f7fe fa55 	bl	40a230 <_free_r>
  40bd86:	2300      	movs	r3, #0
  40bd88:	6463      	str	r3, [r4, #68]	; 0x44
  40bd8a:	f7fe f957 	bl	40a03c <__sfp_lock_acquire>
  40bd8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40bd90:	2200      	movs	r2, #0
  40bd92:	07db      	lsls	r3, r3, #31
  40bd94:	81a2      	strh	r2, [r4, #12]
  40bd96:	d50e      	bpl.n	40bdb6 <_fclose_r+0x9a>
  40bd98:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bd9a:	f7fe fcef 	bl	40a77c <__retarget_lock_close_recursive>
  40bd9e:	f7fe f953 	bl	40a048 <__sfp_lock_release>
  40bda2:	4630      	mov	r0, r6
  40bda4:	bd70      	pop	{r4, r5, r6, pc}
  40bda6:	f7fe f91d 	bl	409fe4 <__sinit>
  40bdaa:	e7bf      	b.n	40bd2c <_fclose_r+0x10>
  40bdac:	6921      	ldr	r1, [r4, #16]
  40bdae:	4628      	mov	r0, r5
  40bdb0:	f7fe fa3e 	bl	40a230 <_free_r>
  40bdb4:	e7d7      	b.n	40bd66 <_fclose_r+0x4a>
  40bdb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bdb8:	f7fe fce4 	bl	40a784 <__retarget_lock_release_recursive>
  40bdbc:	e7ec      	b.n	40bd98 <_fclose_r+0x7c>
  40bdbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bdc0:	f7fe fcde 	bl	40a780 <__retarget_lock_acquire_recursive>
  40bdc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40bdc8:	2b00      	cmp	r3, #0
  40bdca:	d1bb      	bne.n	40bd44 <_fclose_r+0x28>
  40bdcc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40bdce:	f016 0601 	ands.w	r6, r6, #1
  40bdd2:	d1b1      	bne.n	40bd38 <_fclose_r+0x1c>
  40bdd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40bdd6:	f7fe fcd5 	bl	40a784 <__retarget_lock_release_recursive>
  40bdda:	4630      	mov	r0, r6
  40bddc:	bd70      	pop	{r4, r5, r6, pc}
  40bdde:	bf00      	nop

0040bde0 <_fstat_r>:
  40bde0:	b538      	push	{r3, r4, r5, lr}
  40bde2:	460b      	mov	r3, r1
  40bde4:	4c07      	ldr	r4, [pc, #28]	; (40be04 <_fstat_r+0x24>)
  40bde6:	4605      	mov	r5, r0
  40bde8:	4611      	mov	r1, r2
  40bdea:	4618      	mov	r0, r3
  40bdec:	2300      	movs	r3, #0
  40bdee:	6023      	str	r3, [r4, #0]
  40bdf0:	f7f9 ff11 	bl	405c16 <_fstat>
  40bdf4:	1c43      	adds	r3, r0, #1
  40bdf6:	d000      	beq.n	40bdfa <_fstat_r+0x1a>
  40bdf8:	bd38      	pop	{r3, r4, r5, pc}
  40bdfa:	6823      	ldr	r3, [r4, #0]
  40bdfc:	2b00      	cmp	r3, #0
  40bdfe:	d0fb      	beq.n	40bdf8 <_fstat_r+0x18>
  40be00:	602b      	str	r3, [r5, #0]
  40be02:	bd38      	pop	{r3, r4, r5, pc}
  40be04:	2040cbe4 	.word	0x2040cbe4

0040be08 <_isatty_r>:
  40be08:	b538      	push	{r3, r4, r5, lr}
  40be0a:	4c07      	ldr	r4, [pc, #28]	; (40be28 <_isatty_r+0x20>)
  40be0c:	2300      	movs	r3, #0
  40be0e:	4605      	mov	r5, r0
  40be10:	4608      	mov	r0, r1
  40be12:	6023      	str	r3, [r4, #0]
  40be14:	f7f9 ff04 	bl	405c20 <_isatty>
  40be18:	1c43      	adds	r3, r0, #1
  40be1a:	d000      	beq.n	40be1e <_isatty_r+0x16>
  40be1c:	bd38      	pop	{r3, r4, r5, pc}
  40be1e:	6823      	ldr	r3, [r4, #0]
  40be20:	2b00      	cmp	r3, #0
  40be22:	d0fb      	beq.n	40be1c <_isatty_r+0x14>
  40be24:	602b      	str	r3, [r5, #0]
  40be26:	bd38      	pop	{r3, r4, r5, pc}
  40be28:	2040cbe4 	.word	0x2040cbe4

0040be2c <_lseek_r>:
  40be2c:	b570      	push	{r4, r5, r6, lr}
  40be2e:	460d      	mov	r5, r1
  40be30:	4c08      	ldr	r4, [pc, #32]	; (40be54 <_lseek_r+0x28>)
  40be32:	4611      	mov	r1, r2
  40be34:	4606      	mov	r6, r0
  40be36:	461a      	mov	r2, r3
  40be38:	4628      	mov	r0, r5
  40be3a:	2300      	movs	r3, #0
  40be3c:	6023      	str	r3, [r4, #0]
  40be3e:	f7f9 fef1 	bl	405c24 <_lseek>
  40be42:	1c43      	adds	r3, r0, #1
  40be44:	d000      	beq.n	40be48 <_lseek_r+0x1c>
  40be46:	bd70      	pop	{r4, r5, r6, pc}
  40be48:	6823      	ldr	r3, [r4, #0]
  40be4a:	2b00      	cmp	r3, #0
  40be4c:	d0fb      	beq.n	40be46 <_lseek_r+0x1a>
  40be4e:	6033      	str	r3, [r6, #0]
  40be50:	bd70      	pop	{r4, r5, r6, pc}
  40be52:	bf00      	nop
  40be54:	2040cbe4 	.word	0x2040cbe4

0040be58 <_read_r>:
  40be58:	b570      	push	{r4, r5, r6, lr}
  40be5a:	460d      	mov	r5, r1
  40be5c:	4c08      	ldr	r4, [pc, #32]	; (40be80 <_read_r+0x28>)
  40be5e:	4611      	mov	r1, r2
  40be60:	4606      	mov	r6, r0
  40be62:	461a      	mov	r2, r3
  40be64:	4628      	mov	r0, r5
  40be66:	2300      	movs	r3, #0
  40be68:	6023      	str	r3, [r4, #0]
  40be6a:	f7f9 f82b 	bl	404ec4 <_read>
  40be6e:	1c43      	adds	r3, r0, #1
  40be70:	d000      	beq.n	40be74 <_read_r+0x1c>
  40be72:	bd70      	pop	{r4, r5, r6, pc}
  40be74:	6823      	ldr	r3, [r4, #0]
  40be76:	2b00      	cmp	r3, #0
  40be78:	d0fb      	beq.n	40be72 <_read_r+0x1a>
  40be7a:	6033      	str	r3, [r6, #0]
  40be7c:	bd70      	pop	{r4, r5, r6, pc}
  40be7e:	bf00      	nop
  40be80:	2040cbe4 	.word	0x2040cbe4

0040be84 <__aeabi_drsub>:
  40be84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40be88:	e002      	b.n	40be90 <__adddf3>
  40be8a:	bf00      	nop

0040be8c <__aeabi_dsub>:
  40be8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040be90 <__adddf3>:
  40be90:	b530      	push	{r4, r5, lr}
  40be92:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40be96:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40be9a:	ea94 0f05 	teq	r4, r5
  40be9e:	bf08      	it	eq
  40bea0:	ea90 0f02 	teqeq	r0, r2
  40bea4:	bf1f      	itttt	ne
  40bea6:	ea54 0c00 	orrsne.w	ip, r4, r0
  40beaa:	ea55 0c02 	orrsne.w	ip, r5, r2
  40beae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40beb2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40beb6:	f000 80e2 	beq.w	40c07e <__adddf3+0x1ee>
  40beba:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40bebe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40bec2:	bfb8      	it	lt
  40bec4:	426d      	neglt	r5, r5
  40bec6:	dd0c      	ble.n	40bee2 <__adddf3+0x52>
  40bec8:	442c      	add	r4, r5
  40beca:	ea80 0202 	eor.w	r2, r0, r2
  40bece:	ea81 0303 	eor.w	r3, r1, r3
  40bed2:	ea82 0000 	eor.w	r0, r2, r0
  40bed6:	ea83 0101 	eor.w	r1, r3, r1
  40beda:	ea80 0202 	eor.w	r2, r0, r2
  40bede:	ea81 0303 	eor.w	r3, r1, r3
  40bee2:	2d36      	cmp	r5, #54	; 0x36
  40bee4:	bf88      	it	hi
  40bee6:	bd30      	pophi	{r4, r5, pc}
  40bee8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40beec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40bef0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40bef4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40bef8:	d002      	beq.n	40bf00 <__adddf3+0x70>
  40befa:	4240      	negs	r0, r0
  40befc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40bf00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40bf04:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40bf08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40bf0c:	d002      	beq.n	40bf14 <__adddf3+0x84>
  40bf0e:	4252      	negs	r2, r2
  40bf10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40bf14:	ea94 0f05 	teq	r4, r5
  40bf18:	f000 80a7 	beq.w	40c06a <__adddf3+0x1da>
  40bf1c:	f1a4 0401 	sub.w	r4, r4, #1
  40bf20:	f1d5 0e20 	rsbs	lr, r5, #32
  40bf24:	db0d      	blt.n	40bf42 <__adddf3+0xb2>
  40bf26:	fa02 fc0e 	lsl.w	ip, r2, lr
  40bf2a:	fa22 f205 	lsr.w	r2, r2, r5
  40bf2e:	1880      	adds	r0, r0, r2
  40bf30:	f141 0100 	adc.w	r1, r1, #0
  40bf34:	fa03 f20e 	lsl.w	r2, r3, lr
  40bf38:	1880      	adds	r0, r0, r2
  40bf3a:	fa43 f305 	asr.w	r3, r3, r5
  40bf3e:	4159      	adcs	r1, r3
  40bf40:	e00e      	b.n	40bf60 <__adddf3+0xd0>
  40bf42:	f1a5 0520 	sub.w	r5, r5, #32
  40bf46:	f10e 0e20 	add.w	lr, lr, #32
  40bf4a:	2a01      	cmp	r2, #1
  40bf4c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40bf50:	bf28      	it	cs
  40bf52:	f04c 0c02 	orrcs.w	ip, ip, #2
  40bf56:	fa43 f305 	asr.w	r3, r3, r5
  40bf5a:	18c0      	adds	r0, r0, r3
  40bf5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40bf60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40bf64:	d507      	bpl.n	40bf76 <__adddf3+0xe6>
  40bf66:	f04f 0e00 	mov.w	lr, #0
  40bf6a:	f1dc 0c00 	rsbs	ip, ip, #0
  40bf6e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40bf72:	eb6e 0101 	sbc.w	r1, lr, r1
  40bf76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40bf7a:	d31b      	bcc.n	40bfb4 <__adddf3+0x124>
  40bf7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40bf80:	d30c      	bcc.n	40bf9c <__adddf3+0x10c>
  40bf82:	0849      	lsrs	r1, r1, #1
  40bf84:	ea5f 0030 	movs.w	r0, r0, rrx
  40bf88:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40bf8c:	f104 0401 	add.w	r4, r4, #1
  40bf90:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40bf94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40bf98:	f080 809a 	bcs.w	40c0d0 <__adddf3+0x240>
  40bf9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40bfa0:	bf08      	it	eq
  40bfa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40bfa6:	f150 0000 	adcs.w	r0, r0, #0
  40bfaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40bfae:	ea41 0105 	orr.w	r1, r1, r5
  40bfb2:	bd30      	pop	{r4, r5, pc}
  40bfb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40bfb8:	4140      	adcs	r0, r0
  40bfba:	eb41 0101 	adc.w	r1, r1, r1
  40bfbe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bfc2:	f1a4 0401 	sub.w	r4, r4, #1
  40bfc6:	d1e9      	bne.n	40bf9c <__adddf3+0x10c>
  40bfc8:	f091 0f00 	teq	r1, #0
  40bfcc:	bf04      	itt	eq
  40bfce:	4601      	moveq	r1, r0
  40bfd0:	2000      	moveq	r0, #0
  40bfd2:	fab1 f381 	clz	r3, r1
  40bfd6:	bf08      	it	eq
  40bfd8:	3320      	addeq	r3, #32
  40bfda:	f1a3 030b 	sub.w	r3, r3, #11
  40bfde:	f1b3 0220 	subs.w	r2, r3, #32
  40bfe2:	da0c      	bge.n	40bffe <__adddf3+0x16e>
  40bfe4:	320c      	adds	r2, #12
  40bfe6:	dd08      	ble.n	40bffa <__adddf3+0x16a>
  40bfe8:	f102 0c14 	add.w	ip, r2, #20
  40bfec:	f1c2 020c 	rsb	r2, r2, #12
  40bff0:	fa01 f00c 	lsl.w	r0, r1, ip
  40bff4:	fa21 f102 	lsr.w	r1, r1, r2
  40bff8:	e00c      	b.n	40c014 <__adddf3+0x184>
  40bffa:	f102 0214 	add.w	r2, r2, #20
  40bffe:	bfd8      	it	le
  40c000:	f1c2 0c20 	rsble	ip, r2, #32
  40c004:	fa01 f102 	lsl.w	r1, r1, r2
  40c008:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c00c:	bfdc      	itt	le
  40c00e:	ea41 010c 	orrle.w	r1, r1, ip
  40c012:	4090      	lslle	r0, r2
  40c014:	1ae4      	subs	r4, r4, r3
  40c016:	bfa2      	ittt	ge
  40c018:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40c01c:	4329      	orrge	r1, r5
  40c01e:	bd30      	popge	{r4, r5, pc}
  40c020:	ea6f 0404 	mvn.w	r4, r4
  40c024:	3c1f      	subs	r4, #31
  40c026:	da1c      	bge.n	40c062 <__adddf3+0x1d2>
  40c028:	340c      	adds	r4, #12
  40c02a:	dc0e      	bgt.n	40c04a <__adddf3+0x1ba>
  40c02c:	f104 0414 	add.w	r4, r4, #20
  40c030:	f1c4 0220 	rsb	r2, r4, #32
  40c034:	fa20 f004 	lsr.w	r0, r0, r4
  40c038:	fa01 f302 	lsl.w	r3, r1, r2
  40c03c:	ea40 0003 	orr.w	r0, r0, r3
  40c040:	fa21 f304 	lsr.w	r3, r1, r4
  40c044:	ea45 0103 	orr.w	r1, r5, r3
  40c048:	bd30      	pop	{r4, r5, pc}
  40c04a:	f1c4 040c 	rsb	r4, r4, #12
  40c04e:	f1c4 0220 	rsb	r2, r4, #32
  40c052:	fa20 f002 	lsr.w	r0, r0, r2
  40c056:	fa01 f304 	lsl.w	r3, r1, r4
  40c05a:	ea40 0003 	orr.w	r0, r0, r3
  40c05e:	4629      	mov	r1, r5
  40c060:	bd30      	pop	{r4, r5, pc}
  40c062:	fa21 f004 	lsr.w	r0, r1, r4
  40c066:	4629      	mov	r1, r5
  40c068:	bd30      	pop	{r4, r5, pc}
  40c06a:	f094 0f00 	teq	r4, #0
  40c06e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40c072:	bf06      	itte	eq
  40c074:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40c078:	3401      	addeq	r4, #1
  40c07a:	3d01      	subne	r5, #1
  40c07c:	e74e      	b.n	40bf1c <__adddf3+0x8c>
  40c07e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c082:	bf18      	it	ne
  40c084:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40c088:	d029      	beq.n	40c0de <__adddf3+0x24e>
  40c08a:	ea94 0f05 	teq	r4, r5
  40c08e:	bf08      	it	eq
  40c090:	ea90 0f02 	teqeq	r0, r2
  40c094:	d005      	beq.n	40c0a2 <__adddf3+0x212>
  40c096:	ea54 0c00 	orrs.w	ip, r4, r0
  40c09a:	bf04      	itt	eq
  40c09c:	4619      	moveq	r1, r3
  40c09e:	4610      	moveq	r0, r2
  40c0a0:	bd30      	pop	{r4, r5, pc}
  40c0a2:	ea91 0f03 	teq	r1, r3
  40c0a6:	bf1e      	ittt	ne
  40c0a8:	2100      	movne	r1, #0
  40c0aa:	2000      	movne	r0, #0
  40c0ac:	bd30      	popne	{r4, r5, pc}
  40c0ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40c0b2:	d105      	bne.n	40c0c0 <__adddf3+0x230>
  40c0b4:	0040      	lsls	r0, r0, #1
  40c0b6:	4149      	adcs	r1, r1
  40c0b8:	bf28      	it	cs
  40c0ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40c0be:	bd30      	pop	{r4, r5, pc}
  40c0c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40c0c4:	bf3c      	itt	cc
  40c0c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40c0ca:	bd30      	popcc	{r4, r5, pc}
  40c0cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c0d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40c0d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c0d8:	f04f 0000 	mov.w	r0, #0
  40c0dc:	bd30      	pop	{r4, r5, pc}
  40c0de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c0e2:	bf1a      	itte	ne
  40c0e4:	4619      	movne	r1, r3
  40c0e6:	4610      	movne	r0, r2
  40c0e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40c0ec:	bf1c      	itt	ne
  40c0ee:	460b      	movne	r3, r1
  40c0f0:	4602      	movne	r2, r0
  40c0f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c0f6:	bf06      	itte	eq
  40c0f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40c0fc:	ea91 0f03 	teqeq	r1, r3
  40c100:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40c104:	bd30      	pop	{r4, r5, pc}
  40c106:	bf00      	nop

0040c108 <__aeabi_ui2d>:
  40c108:	f090 0f00 	teq	r0, #0
  40c10c:	bf04      	itt	eq
  40c10e:	2100      	moveq	r1, #0
  40c110:	4770      	bxeq	lr
  40c112:	b530      	push	{r4, r5, lr}
  40c114:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c118:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c11c:	f04f 0500 	mov.w	r5, #0
  40c120:	f04f 0100 	mov.w	r1, #0
  40c124:	e750      	b.n	40bfc8 <__adddf3+0x138>
  40c126:	bf00      	nop

0040c128 <__aeabi_i2d>:
  40c128:	f090 0f00 	teq	r0, #0
  40c12c:	bf04      	itt	eq
  40c12e:	2100      	moveq	r1, #0
  40c130:	4770      	bxeq	lr
  40c132:	b530      	push	{r4, r5, lr}
  40c134:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c138:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c13c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40c140:	bf48      	it	mi
  40c142:	4240      	negmi	r0, r0
  40c144:	f04f 0100 	mov.w	r1, #0
  40c148:	e73e      	b.n	40bfc8 <__adddf3+0x138>
  40c14a:	bf00      	nop

0040c14c <__aeabi_f2d>:
  40c14c:	0042      	lsls	r2, r0, #1
  40c14e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40c152:	ea4f 0131 	mov.w	r1, r1, rrx
  40c156:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40c15a:	bf1f      	itttt	ne
  40c15c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40c160:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c164:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40c168:	4770      	bxne	lr
  40c16a:	f092 0f00 	teq	r2, #0
  40c16e:	bf14      	ite	ne
  40c170:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c174:	4770      	bxeq	lr
  40c176:	b530      	push	{r4, r5, lr}
  40c178:	f44f 7460 	mov.w	r4, #896	; 0x380
  40c17c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c180:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c184:	e720      	b.n	40bfc8 <__adddf3+0x138>
  40c186:	bf00      	nop

0040c188 <__aeabi_ul2d>:
  40c188:	ea50 0201 	orrs.w	r2, r0, r1
  40c18c:	bf08      	it	eq
  40c18e:	4770      	bxeq	lr
  40c190:	b530      	push	{r4, r5, lr}
  40c192:	f04f 0500 	mov.w	r5, #0
  40c196:	e00a      	b.n	40c1ae <__aeabi_l2d+0x16>

0040c198 <__aeabi_l2d>:
  40c198:	ea50 0201 	orrs.w	r2, r0, r1
  40c19c:	bf08      	it	eq
  40c19e:	4770      	bxeq	lr
  40c1a0:	b530      	push	{r4, r5, lr}
  40c1a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40c1a6:	d502      	bpl.n	40c1ae <__aeabi_l2d+0x16>
  40c1a8:	4240      	negs	r0, r0
  40c1aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c1ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c1b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c1b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40c1ba:	f43f aedc 	beq.w	40bf76 <__adddf3+0xe6>
  40c1be:	f04f 0203 	mov.w	r2, #3
  40c1c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c1c6:	bf18      	it	ne
  40c1c8:	3203      	addne	r2, #3
  40c1ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c1ce:	bf18      	it	ne
  40c1d0:	3203      	addne	r2, #3
  40c1d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40c1d6:	f1c2 0320 	rsb	r3, r2, #32
  40c1da:	fa00 fc03 	lsl.w	ip, r0, r3
  40c1de:	fa20 f002 	lsr.w	r0, r0, r2
  40c1e2:	fa01 fe03 	lsl.w	lr, r1, r3
  40c1e6:	ea40 000e 	orr.w	r0, r0, lr
  40c1ea:	fa21 f102 	lsr.w	r1, r1, r2
  40c1ee:	4414      	add	r4, r2
  40c1f0:	e6c1      	b.n	40bf76 <__adddf3+0xe6>
  40c1f2:	bf00      	nop

0040c1f4 <__aeabi_dmul>:
  40c1f4:	b570      	push	{r4, r5, r6, lr}
  40c1f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c1fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c1fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c202:	bf1d      	ittte	ne
  40c204:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c208:	ea94 0f0c 	teqne	r4, ip
  40c20c:	ea95 0f0c 	teqne	r5, ip
  40c210:	f000 f8de 	bleq	40c3d0 <__aeabi_dmul+0x1dc>
  40c214:	442c      	add	r4, r5
  40c216:	ea81 0603 	eor.w	r6, r1, r3
  40c21a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40c21e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40c222:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40c226:	bf18      	it	ne
  40c228:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40c22c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40c234:	d038      	beq.n	40c2a8 <__aeabi_dmul+0xb4>
  40c236:	fba0 ce02 	umull	ip, lr, r0, r2
  40c23a:	f04f 0500 	mov.w	r5, #0
  40c23e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40c242:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40c246:	fbe0 e503 	umlal	lr, r5, r0, r3
  40c24a:	f04f 0600 	mov.w	r6, #0
  40c24e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40c252:	f09c 0f00 	teq	ip, #0
  40c256:	bf18      	it	ne
  40c258:	f04e 0e01 	orrne.w	lr, lr, #1
  40c25c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40c260:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40c264:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40c268:	d204      	bcs.n	40c274 <__aeabi_dmul+0x80>
  40c26a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40c26e:	416d      	adcs	r5, r5
  40c270:	eb46 0606 	adc.w	r6, r6, r6
  40c274:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40c278:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40c27c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40c280:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40c284:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40c288:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c28c:	bf88      	it	hi
  40c28e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c292:	d81e      	bhi.n	40c2d2 <__aeabi_dmul+0xde>
  40c294:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40c298:	bf08      	it	eq
  40c29a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40c29e:	f150 0000 	adcs.w	r0, r0, #0
  40c2a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c2a6:	bd70      	pop	{r4, r5, r6, pc}
  40c2a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40c2ac:	ea46 0101 	orr.w	r1, r6, r1
  40c2b0:	ea40 0002 	orr.w	r0, r0, r2
  40c2b4:	ea81 0103 	eor.w	r1, r1, r3
  40c2b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40c2bc:	bfc2      	ittt	gt
  40c2be:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c2c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c2c6:	bd70      	popgt	{r4, r5, r6, pc}
  40c2c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c2cc:	f04f 0e00 	mov.w	lr, #0
  40c2d0:	3c01      	subs	r4, #1
  40c2d2:	f300 80ab 	bgt.w	40c42c <__aeabi_dmul+0x238>
  40c2d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40c2da:	bfde      	ittt	le
  40c2dc:	2000      	movle	r0, #0
  40c2de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40c2e2:	bd70      	pople	{r4, r5, r6, pc}
  40c2e4:	f1c4 0400 	rsb	r4, r4, #0
  40c2e8:	3c20      	subs	r4, #32
  40c2ea:	da35      	bge.n	40c358 <__aeabi_dmul+0x164>
  40c2ec:	340c      	adds	r4, #12
  40c2ee:	dc1b      	bgt.n	40c328 <__aeabi_dmul+0x134>
  40c2f0:	f104 0414 	add.w	r4, r4, #20
  40c2f4:	f1c4 0520 	rsb	r5, r4, #32
  40c2f8:	fa00 f305 	lsl.w	r3, r0, r5
  40c2fc:	fa20 f004 	lsr.w	r0, r0, r4
  40c300:	fa01 f205 	lsl.w	r2, r1, r5
  40c304:	ea40 0002 	orr.w	r0, r0, r2
  40c308:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40c30c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c310:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c314:	fa21 f604 	lsr.w	r6, r1, r4
  40c318:	eb42 0106 	adc.w	r1, r2, r6
  40c31c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c320:	bf08      	it	eq
  40c322:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c326:	bd70      	pop	{r4, r5, r6, pc}
  40c328:	f1c4 040c 	rsb	r4, r4, #12
  40c32c:	f1c4 0520 	rsb	r5, r4, #32
  40c330:	fa00 f304 	lsl.w	r3, r0, r4
  40c334:	fa20 f005 	lsr.w	r0, r0, r5
  40c338:	fa01 f204 	lsl.w	r2, r1, r4
  40c33c:	ea40 0002 	orr.w	r0, r0, r2
  40c340:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c348:	f141 0100 	adc.w	r1, r1, #0
  40c34c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c350:	bf08      	it	eq
  40c352:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c356:	bd70      	pop	{r4, r5, r6, pc}
  40c358:	f1c4 0520 	rsb	r5, r4, #32
  40c35c:	fa00 f205 	lsl.w	r2, r0, r5
  40c360:	ea4e 0e02 	orr.w	lr, lr, r2
  40c364:	fa20 f304 	lsr.w	r3, r0, r4
  40c368:	fa01 f205 	lsl.w	r2, r1, r5
  40c36c:	ea43 0302 	orr.w	r3, r3, r2
  40c370:	fa21 f004 	lsr.w	r0, r1, r4
  40c374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c378:	fa21 f204 	lsr.w	r2, r1, r4
  40c37c:	ea20 0002 	bic.w	r0, r0, r2
  40c380:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40c384:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c388:	bf08      	it	eq
  40c38a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c38e:	bd70      	pop	{r4, r5, r6, pc}
  40c390:	f094 0f00 	teq	r4, #0
  40c394:	d10f      	bne.n	40c3b6 <__aeabi_dmul+0x1c2>
  40c396:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40c39a:	0040      	lsls	r0, r0, #1
  40c39c:	eb41 0101 	adc.w	r1, r1, r1
  40c3a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c3a4:	bf08      	it	eq
  40c3a6:	3c01      	subeq	r4, #1
  40c3a8:	d0f7      	beq.n	40c39a <__aeabi_dmul+0x1a6>
  40c3aa:	ea41 0106 	orr.w	r1, r1, r6
  40c3ae:	f095 0f00 	teq	r5, #0
  40c3b2:	bf18      	it	ne
  40c3b4:	4770      	bxne	lr
  40c3b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40c3ba:	0052      	lsls	r2, r2, #1
  40c3bc:	eb43 0303 	adc.w	r3, r3, r3
  40c3c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40c3c4:	bf08      	it	eq
  40c3c6:	3d01      	subeq	r5, #1
  40c3c8:	d0f7      	beq.n	40c3ba <__aeabi_dmul+0x1c6>
  40c3ca:	ea43 0306 	orr.w	r3, r3, r6
  40c3ce:	4770      	bx	lr
  40c3d0:	ea94 0f0c 	teq	r4, ip
  40c3d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c3d8:	bf18      	it	ne
  40c3da:	ea95 0f0c 	teqne	r5, ip
  40c3de:	d00c      	beq.n	40c3fa <__aeabi_dmul+0x206>
  40c3e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c3e4:	bf18      	it	ne
  40c3e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c3ea:	d1d1      	bne.n	40c390 <__aeabi_dmul+0x19c>
  40c3ec:	ea81 0103 	eor.w	r1, r1, r3
  40c3f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c3f4:	f04f 0000 	mov.w	r0, #0
  40c3f8:	bd70      	pop	{r4, r5, r6, pc}
  40c3fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c3fe:	bf06      	itte	eq
  40c400:	4610      	moveq	r0, r2
  40c402:	4619      	moveq	r1, r3
  40c404:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c408:	d019      	beq.n	40c43e <__aeabi_dmul+0x24a>
  40c40a:	ea94 0f0c 	teq	r4, ip
  40c40e:	d102      	bne.n	40c416 <__aeabi_dmul+0x222>
  40c410:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40c414:	d113      	bne.n	40c43e <__aeabi_dmul+0x24a>
  40c416:	ea95 0f0c 	teq	r5, ip
  40c41a:	d105      	bne.n	40c428 <__aeabi_dmul+0x234>
  40c41c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40c420:	bf1c      	itt	ne
  40c422:	4610      	movne	r0, r2
  40c424:	4619      	movne	r1, r3
  40c426:	d10a      	bne.n	40c43e <__aeabi_dmul+0x24a>
  40c428:	ea81 0103 	eor.w	r1, r1, r3
  40c42c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c430:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c438:	f04f 0000 	mov.w	r0, #0
  40c43c:	bd70      	pop	{r4, r5, r6, pc}
  40c43e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c442:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40c446:	bd70      	pop	{r4, r5, r6, pc}

0040c448 <__aeabi_ddiv>:
  40c448:	b570      	push	{r4, r5, r6, lr}
  40c44a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c44e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c452:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c456:	bf1d      	ittte	ne
  40c458:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c45c:	ea94 0f0c 	teqne	r4, ip
  40c460:	ea95 0f0c 	teqne	r5, ip
  40c464:	f000 f8a7 	bleq	40c5b6 <__aeabi_ddiv+0x16e>
  40c468:	eba4 0405 	sub.w	r4, r4, r5
  40c46c:	ea81 0e03 	eor.w	lr, r1, r3
  40c470:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40c474:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40c478:	f000 8088 	beq.w	40c58c <__aeabi_ddiv+0x144>
  40c47c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40c480:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40c484:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40c488:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40c48c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40c490:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40c494:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40c498:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40c49c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40c4a0:	429d      	cmp	r5, r3
  40c4a2:	bf08      	it	eq
  40c4a4:	4296      	cmpeq	r6, r2
  40c4a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40c4aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40c4ae:	d202      	bcs.n	40c4b6 <__aeabi_ddiv+0x6e>
  40c4b0:	085b      	lsrs	r3, r3, #1
  40c4b2:	ea4f 0232 	mov.w	r2, r2, rrx
  40c4b6:	1ab6      	subs	r6, r6, r2
  40c4b8:	eb65 0503 	sbc.w	r5, r5, r3
  40c4bc:	085b      	lsrs	r3, r3, #1
  40c4be:	ea4f 0232 	mov.w	r2, r2, rrx
  40c4c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40c4c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40c4ca:	ebb6 0e02 	subs.w	lr, r6, r2
  40c4ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c4d2:	bf22      	ittt	cs
  40c4d4:	1ab6      	subcs	r6, r6, r2
  40c4d6:	4675      	movcs	r5, lr
  40c4d8:	ea40 000c 	orrcs.w	r0, r0, ip
  40c4dc:	085b      	lsrs	r3, r3, #1
  40c4de:	ea4f 0232 	mov.w	r2, r2, rrx
  40c4e2:	ebb6 0e02 	subs.w	lr, r6, r2
  40c4e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c4ea:	bf22      	ittt	cs
  40c4ec:	1ab6      	subcs	r6, r6, r2
  40c4ee:	4675      	movcs	r5, lr
  40c4f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40c4f4:	085b      	lsrs	r3, r3, #1
  40c4f6:	ea4f 0232 	mov.w	r2, r2, rrx
  40c4fa:	ebb6 0e02 	subs.w	lr, r6, r2
  40c4fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c502:	bf22      	ittt	cs
  40c504:	1ab6      	subcs	r6, r6, r2
  40c506:	4675      	movcs	r5, lr
  40c508:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40c50c:	085b      	lsrs	r3, r3, #1
  40c50e:	ea4f 0232 	mov.w	r2, r2, rrx
  40c512:	ebb6 0e02 	subs.w	lr, r6, r2
  40c516:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c51a:	bf22      	ittt	cs
  40c51c:	1ab6      	subcs	r6, r6, r2
  40c51e:	4675      	movcs	r5, lr
  40c520:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40c524:	ea55 0e06 	orrs.w	lr, r5, r6
  40c528:	d018      	beq.n	40c55c <__aeabi_ddiv+0x114>
  40c52a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40c52e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40c532:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40c536:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40c53a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40c53e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40c542:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40c546:	d1c0      	bne.n	40c4ca <__aeabi_ddiv+0x82>
  40c548:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c54c:	d10b      	bne.n	40c566 <__aeabi_ddiv+0x11e>
  40c54e:	ea41 0100 	orr.w	r1, r1, r0
  40c552:	f04f 0000 	mov.w	r0, #0
  40c556:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40c55a:	e7b6      	b.n	40c4ca <__aeabi_ddiv+0x82>
  40c55c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c560:	bf04      	itt	eq
  40c562:	4301      	orreq	r1, r0
  40c564:	2000      	moveq	r0, #0
  40c566:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c56a:	bf88      	it	hi
  40c56c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c570:	f63f aeaf 	bhi.w	40c2d2 <__aeabi_dmul+0xde>
  40c574:	ebb5 0c03 	subs.w	ip, r5, r3
  40c578:	bf04      	itt	eq
  40c57a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40c57e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40c582:	f150 0000 	adcs.w	r0, r0, #0
  40c586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c58a:	bd70      	pop	{r4, r5, r6, pc}
  40c58c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40c590:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40c594:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40c598:	bfc2      	ittt	gt
  40c59a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c59e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c5a2:	bd70      	popgt	{r4, r5, r6, pc}
  40c5a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c5a8:	f04f 0e00 	mov.w	lr, #0
  40c5ac:	3c01      	subs	r4, #1
  40c5ae:	e690      	b.n	40c2d2 <__aeabi_dmul+0xde>
  40c5b0:	ea45 0e06 	orr.w	lr, r5, r6
  40c5b4:	e68d      	b.n	40c2d2 <__aeabi_dmul+0xde>
  40c5b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c5ba:	ea94 0f0c 	teq	r4, ip
  40c5be:	bf08      	it	eq
  40c5c0:	ea95 0f0c 	teqeq	r5, ip
  40c5c4:	f43f af3b 	beq.w	40c43e <__aeabi_dmul+0x24a>
  40c5c8:	ea94 0f0c 	teq	r4, ip
  40c5cc:	d10a      	bne.n	40c5e4 <__aeabi_ddiv+0x19c>
  40c5ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c5d2:	f47f af34 	bne.w	40c43e <__aeabi_dmul+0x24a>
  40c5d6:	ea95 0f0c 	teq	r5, ip
  40c5da:	f47f af25 	bne.w	40c428 <__aeabi_dmul+0x234>
  40c5de:	4610      	mov	r0, r2
  40c5e0:	4619      	mov	r1, r3
  40c5e2:	e72c      	b.n	40c43e <__aeabi_dmul+0x24a>
  40c5e4:	ea95 0f0c 	teq	r5, ip
  40c5e8:	d106      	bne.n	40c5f8 <__aeabi_ddiv+0x1b0>
  40c5ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40c5ee:	f43f aefd 	beq.w	40c3ec <__aeabi_dmul+0x1f8>
  40c5f2:	4610      	mov	r0, r2
  40c5f4:	4619      	mov	r1, r3
  40c5f6:	e722      	b.n	40c43e <__aeabi_dmul+0x24a>
  40c5f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c5fc:	bf18      	it	ne
  40c5fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c602:	f47f aec5 	bne.w	40c390 <__aeabi_dmul+0x19c>
  40c606:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40c60a:	f47f af0d 	bne.w	40c428 <__aeabi_dmul+0x234>
  40c60e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40c612:	f47f aeeb 	bne.w	40c3ec <__aeabi_dmul+0x1f8>
  40c616:	e712      	b.n	40c43e <__aeabi_dmul+0x24a>

0040c618 <__gedf2>:
  40c618:	f04f 3cff 	mov.w	ip, #4294967295
  40c61c:	e006      	b.n	40c62c <__cmpdf2+0x4>
  40c61e:	bf00      	nop

0040c620 <__ledf2>:
  40c620:	f04f 0c01 	mov.w	ip, #1
  40c624:	e002      	b.n	40c62c <__cmpdf2+0x4>
  40c626:	bf00      	nop

0040c628 <__cmpdf2>:
  40c628:	f04f 0c01 	mov.w	ip, #1
  40c62c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40c630:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c634:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c638:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c63c:	bf18      	it	ne
  40c63e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40c642:	d01b      	beq.n	40c67c <__cmpdf2+0x54>
  40c644:	b001      	add	sp, #4
  40c646:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40c64a:	bf0c      	ite	eq
  40c64c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40c650:	ea91 0f03 	teqne	r1, r3
  40c654:	bf02      	ittt	eq
  40c656:	ea90 0f02 	teqeq	r0, r2
  40c65a:	2000      	moveq	r0, #0
  40c65c:	4770      	bxeq	lr
  40c65e:	f110 0f00 	cmn.w	r0, #0
  40c662:	ea91 0f03 	teq	r1, r3
  40c666:	bf58      	it	pl
  40c668:	4299      	cmppl	r1, r3
  40c66a:	bf08      	it	eq
  40c66c:	4290      	cmpeq	r0, r2
  40c66e:	bf2c      	ite	cs
  40c670:	17d8      	asrcs	r0, r3, #31
  40c672:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40c676:	f040 0001 	orr.w	r0, r0, #1
  40c67a:	4770      	bx	lr
  40c67c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c684:	d102      	bne.n	40c68c <__cmpdf2+0x64>
  40c686:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c68a:	d107      	bne.n	40c69c <__cmpdf2+0x74>
  40c68c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c694:	d1d6      	bne.n	40c644 <__cmpdf2+0x1c>
  40c696:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c69a:	d0d3      	beq.n	40c644 <__cmpdf2+0x1c>
  40c69c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40c6a0:	4770      	bx	lr
  40c6a2:	bf00      	nop

0040c6a4 <__aeabi_cdrcmple>:
  40c6a4:	4684      	mov	ip, r0
  40c6a6:	4610      	mov	r0, r2
  40c6a8:	4662      	mov	r2, ip
  40c6aa:	468c      	mov	ip, r1
  40c6ac:	4619      	mov	r1, r3
  40c6ae:	4663      	mov	r3, ip
  40c6b0:	e000      	b.n	40c6b4 <__aeabi_cdcmpeq>
  40c6b2:	bf00      	nop

0040c6b4 <__aeabi_cdcmpeq>:
  40c6b4:	b501      	push	{r0, lr}
  40c6b6:	f7ff ffb7 	bl	40c628 <__cmpdf2>
  40c6ba:	2800      	cmp	r0, #0
  40c6bc:	bf48      	it	mi
  40c6be:	f110 0f00 	cmnmi.w	r0, #0
  40c6c2:	bd01      	pop	{r0, pc}

0040c6c4 <__aeabi_dcmpeq>:
  40c6c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c6c8:	f7ff fff4 	bl	40c6b4 <__aeabi_cdcmpeq>
  40c6cc:	bf0c      	ite	eq
  40c6ce:	2001      	moveq	r0, #1
  40c6d0:	2000      	movne	r0, #0
  40c6d2:	f85d fb08 	ldr.w	pc, [sp], #8
  40c6d6:	bf00      	nop

0040c6d8 <__aeabi_dcmplt>:
  40c6d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c6dc:	f7ff ffea 	bl	40c6b4 <__aeabi_cdcmpeq>
  40c6e0:	bf34      	ite	cc
  40c6e2:	2001      	movcc	r0, #1
  40c6e4:	2000      	movcs	r0, #0
  40c6e6:	f85d fb08 	ldr.w	pc, [sp], #8
  40c6ea:	bf00      	nop

0040c6ec <__aeabi_dcmple>:
  40c6ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c6f0:	f7ff ffe0 	bl	40c6b4 <__aeabi_cdcmpeq>
  40c6f4:	bf94      	ite	ls
  40c6f6:	2001      	movls	r0, #1
  40c6f8:	2000      	movhi	r0, #0
  40c6fa:	f85d fb08 	ldr.w	pc, [sp], #8
  40c6fe:	bf00      	nop

0040c700 <__aeabi_dcmpge>:
  40c700:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c704:	f7ff ffce 	bl	40c6a4 <__aeabi_cdrcmple>
  40c708:	bf94      	ite	ls
  40c70a:	2001      	movls	r0, #1
  40c70c:	2000      	movhi	r0, #0
  40c70e:	f85d fb08 	ldr.w	pc, [sp], #8
  40c712:	bf00      	nop

0040c714 <__aeabi_dcmpgt>:
  40c714:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c718:	f7ff ffc4 	bl	40c6a4 <__aeabi_cdrcmple>
  40c71c:	bf34      	ite	cc
  40c71e:	2001      	movcc	r0, #1
  40c720:	2000      	movcs	r0, #0
  40c722:	f85d fb08 	ldr.w	pc, [sp], #8
  40c726:	bf00      	nop

0040c728 <__aeabi_dcmpun>:
  40c728:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c72c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c730:	d102      	bne.n	40c738 <__aeabi_dcmpun+0x10>
  40c732:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c736:	d10a      	bne.n	40c74e <__aeabi_dcmpun+0x26>
  40c738:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c73c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c740:	d102      	bne.n	40c748 <__aeabi_dcmpun+0x20>
  40c742:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c746:	d102      	bne.n	40c74e <__aeabi_dcmpun+0x26>
  40c748:	f04f 0000 	mov.w	r0, #0
  40c74c:	4770      	bx	lr
  40c74e:	f04f 0001 	mov.w	r0, #1
  40c752:	4770      	bx	lr

0040c754 <__aeabi_d2iz>:
  40c754:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40c758:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40c75c:	d215      	bcs.n	40c78a <__aeabi_d2iz+0x36>
  40c75e:	d511      	bpl.n	40c784 <__aeabi_d2iz+0x30>
  40c760:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40c764:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40c768:	d912      	bls.n	40c790 <__aeabi_d2iz+0x3c>
  40c76a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c76e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c772:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40c776:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c77a:	fa23 f002 	lsr.w	r0, r3, r2
  40c77e:	bf18      	it	ne
  40c780:	4240      	negne	r0, r0
  40c782:	4770      	bx	lr
  40c784:	f04f 0000 	mov.w	r0, #0
  40c788:	4770      	bx	lr
  40c78a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40c78e:	d105      	bne.n	40c79c <__aeabi_d2iz+0x48>
  40c790:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40c794:	bf08      	it	eq
  40c796:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40c79a:	4770      	bx	lr
  40c79c:	f04f 0000 	mov.w	r0, #0
  40c7a0:	4770      	bx	lr
  40c7a2:	bf00      	nop

0040c7a4 <__aeabi_uldivmod>:
  40c7a4:	b953      	cbnz	r3, 40c7bc <__aeabi_uldivmod+0x18>
  40c7a6:	b94a      	cbnz	r2, 40c7bc <__aeabi_uldivmod+0x18>
  40c7a8:	2900      	cmp	r1, #0
  40c7aa:	bf08      	it	eq
  40c7ac:	2800      	cmpeq	r0, #0
  40c7ae:	bf1c      	itt	ne
  40c7b0:	f04f 31ff 	movne.w	r1, #4294967295
  40c7b4:	f04f 30ff 	movne.w	r0, #4294967295
  40c7b8:	f000 b97a 	b.w	40cab0 <__aeabi_idiv0>
  40c7bc:	f1ad 0c08 	sub.w	ip, sp, #8
  40c7c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40c7c4:	f000 f806 	bl	40c7d4 <__udivmoddi4>
  40c7c8:	f8dd e004 	ldr.w	lr, [sp, #4]
  40c7cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c7d0:	b004      	add	sp, #16
  40c7d2:	4770      	bx	lr

0040c7d4 <__udivmoddi4>:
  40c7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c7d8:	468c      	mov	ip, r1
  40c7da:	460d      	mov	r5, r1
  40c7dc:	4604      	mov	r4, r0
  40c7de:	9e08      	ldr	r6, [sp, #32]
  40c7e0:	2b00      	cmp	r3, #0
  40c7e2:	d151      	bne.n	40c888 <__udivmoddi4+0xb4>
  40c7e4:	428a      	cmp	r2, r1
  40c7e6:	4617      	mov	r7, r2
  40c7e8:	d96d      	bls.n	40c8c6 <__udivmoddi4+0xf2>
  40c7ea:	fab2 fe82 	clz	lr, r2
  40c7ee:	f1be 0f00 	cmp.w	lr, #0
  40c7f2:	d00b      	beq.n	40c80c <__udivmoddi4+0x38>
  40c7f4:	f1ce 0c20 	rsb	ip, lr, #32
  40c7f8:	fa01 f50e 	lsl.w	r5, r1, lr
  40c7fc:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c800:	fa02 f70e 	lsl.w	r7, r2, lr
  40c804:	ea4c 0c05 	orr.w	ip, ip, r5
  40c808:	fa00 f40e 	lsl.w	r4, r0, lr
  40c80c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40c810:	0c25      	lsrs	r5, r4, #16
  40c812:	fbbc f8fa 	udiv	r8, ip, sl
  40c816:	fa1f f987 	uxth.w	r9, r7
  40c81a:	fb0a cc18 	mls	ip, sl, r8, ip
  40c81e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40c822:	fb08 f309 	mul.w	r3, r8, r9
  40c826:	42ab      	cmp	r3, r5
  40c828:	d90a      	bls.n	40c840 <__udivmoddi4+0x6c>
  40c82a:	19ed      	adds	r5, r5, r7
  40c82c:	f108 32ff 	add.w	r2, r8, #4294967295
  40c830:	f080 8123 	bcs.w	40ca7a <__udivmoddi4+0x2a6>
  40c834:	42ab      	cmp	r3, r5
  40c836:	f240 8120 	bls.w	40ca7a <__udivmoddi4+0x2a6>
  40c83a:	f1a8 0802 	sub.w	r8, r8, #2
  40c83e:	443d      	add	r5, r7
  40c840:	1aed      	subs	r5, r5, r3
  40c842:	b2a4      	uxth	r4, r4
  40c844:	fbb5 f0fa 	udiv	r0, r5, sl
  40c848:	fb0a 5510 	mls	r5, sl, r0, r5
  40c84c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40c850:	fb00 f909 	mul.w	r9, r0, r9
  40c854:	45a1      	cmp	r9, r4
  40c856:	d909      	bls.n	40c86c <__udivmoddi4+0x98>
  40c858:	19e4      	adds	r4, r4, r7
  40c85a:	f100 33ff 	add.w	r3, r0, #4294967295
  40c85e:	f080 810a 	bcs.w	40ca76 <__udivmoddi4+0x2a2>
  40c862:	45a1      	cmp	r9, r4
  40c864:	f240 8107 	bls.w	40ca76 <__udivmoddi4+0x2a2>
  40c868:	3802      	subs	r0, #2
  40c86a:	443c      	add	r4, r7
  40c86c:	eba4 0409 	sub.w	r4, r4, r9
  40c870:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c874:	2100      	movs	r1, #0
  40c876:	2e00      	cmp	r6, #0
  40c878:	d061      	beq.n	40c93e <__udivmoddi4+0x16a>
  40c87a:	fa24 f40e 	lsr.w	r4, r4, lr
  40c87e:	2300      	movs	r3, #0
  40c880:	6034      	str	r4, [r6, #0]
  40c882:	6073      	str	r3, [r6, #4]
  40c884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c888:	428b      	cmp	r3, r1
  40c88a:	d907      	bls.n	40c89c <__udivmoddi4+0xc8>
  40c88c:	2e00      	cmp	r6, #0
  40c88e:	d054      	beq.n	40c93a <__udivmoddi4+0x166>
  40c890:	2100      	movs	r1, #0
  40c892:	e886 0021 	stmia.w	r6, {r0, r5}
  40c896:	4608      	mov	r0, r1
  40c898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c89c:	fab3 f183 	clz	r1, r3
  40c8a0:	2900      	cmp	r1, #0
  40c8a2:	f040 808e 	bne.w	40c9c2 <__udivmoddi4+0x1ee>
  40c8a6:	42ab      	cmp	r3, r5
  40c8a8:	d302      	bcc.n	40c8b0 <__udivmoddi4+0xdc>
  40c8aa:	4282      	cmp	r2, r0
  40c8ac:	f200 80fa 	bhi.w	40caa4 <__udivmoddi4+0x2d0>
  40c8b0:	1a84      	subs	r4, r0, r2
  40c8b2:	eb65 0503 	sbc.w	r5, r5, r3
  40c8b6:	2001      	movs	r0, #1
  40c8b8:	46ac      	mov	ip, r5
  40c8ba:	2e00      	cmp	r6, #0
  40c8bc:	d03f      	beq.n	40c93e <__udivmoddi4+0x16a>
  40c8be:	e886 1010 	stmia.w	r6, {r4, ip}
  40c8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c8c6:	b912      	cbnz	r2, 40c8ce <__udivmoddi4+0xfa>
  40c8c8:	2701      	movs	r7, #1
  40c8ca:	fbb7 f7f2 	udiv	r7, r7, r2
  40c8ce:	fab7 fe87 	clz	lr, r7
  40c8d2:	f1be 0f00 	cmp.w	lr, #0
  40c8d6:	d134      	bne.n	40c942 <__udivmoddi4+0x16e>
  40c8d8:	1beb      	subs	r3, r5, r7
  40c8da:	0c3a      	lsrs	r2, r7, #16
  40c8dc:	fa1f fc87 	uxth.w	ip, r7
  40c8e0:	2101      	movs	r1, #1
  40c8e2:	fbb3 f8f2 	udiv	r8, r3, r2
  40c8e6:	0c25      	lsrs	r5, r4, #16
  40c8e8:	fb02 3318 	mls	r3, r2, r8, r3
  40c8ec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c8f0:	fb0c f308 	mul.w	r3, ip, r8
  40c8f4:	42ab      	cmp	r3, r5
  40c8f6:	d907      	bls.n	40c908 <__udivmoddi4+0x134>
  40c8f8:	19ed      	adds	r5, r5, r7
  40c8fa:	f108 30ff 	add.w	r0, r8, #4294967295
  40c8fe:	d202      	bcs.n	40c906 <__udivmoddi4+0x132>
  40c900:	42ab      	cmp	r3, r5
  40c902:	f200 80d1 	bhi.w	40caa8 <__udivmoddi4+0x2d4>
  40c906:	4680      	mov	r8, r0
  40c908:	1aed      	subs	r5, r5, r3
  40c90a:	b2a3      	uxth	r3, r4
  40c90c:	fbb5 f0f2 	udiv	r0, r5, r2
  40c910:	fb02 5510 	mls	r5, r2, r0, r5
  40c914:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40c918:	fb0c fc00 	mul.w	ip, ip, r0
  40c91c:	45a4      	cmp	ip, r4
  40c91e:	d907      	bls.n	40c930 <__udivmoddi4+0x15c>
  40c920:	19e4      	adds	r4, r4, r7
  40c922:	f100 33ff 	add.w	r3, r0, #4294967295
  40c926:	d202      	bcs.n	40c92e <__udivmoddi4+0x15a>
  40c928:	45a4      	cmp	ip, r4
  40c92a:	f200 80b8 	bhi.w	40ca9e <__udivmoddi4+0x2ca>
  40c92e:	4618      	mov	r0, r3
  40c930:	eba4 040c 	sub.w	r4, r4, ip
  40c934:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c938:	e79d      	b.n	40c876 <__udivmoddi4+0xa2>
  40c93a:	4631      	mov	r1, r6
  40c93c:	4630      	mov	r0, r6
  40c93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c942:	f1ce 0420 	rsb	r4, lr, #32
  40c946:	fa05 f30e 	lsl.w	r3, r5, lr
  40c94a:	fa07 f70e 	lsl.w	r7, r7, lr
  40c94e:	fa20 f804 	lsr.w	r8, r0, r4
  40c952:	0c3a      	lsrs	r2, r7, #16
  40c954:	fa25 f404 	lsr.w	r4, r5, r4
  40c958:	ea48 0803 	orr.w	r8, r8, r3
  40c95c:	fbb4 f1f2 	udiv	r1, r4, r2
  40c960:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40c964:	fb02 4411 	mls	r4, r2, r1, r4
  40c968:	fa1f fc87 	uxth.w	ip, r7
  40c96c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40c970:	fb01 f30c 	mul.w	r3, r1, ip
  40c974:	42ab      	cmp	r3, r5
  40c976:	fa00 f40e 	lsl.w	r4, r0, lr
  40c97a:	d909      	bls.n	40c990 <__udivmoddi4+0x1bc>
  40c97c:	19ed      	adds	r5, r5, r7
  40c97e:	f101 30ff 	add.w	r0, r1, #4294967295
  40c982:	f080 808a 	bcs.w	40ca9a <__udivmoddi4+0x2c6>
  40c986:	42ab      	cmp	r3, r5
  40c988:	f240 8087 	bls.w	40ca9a <__udivmoddi4+0x2c6>
  40c98c:	3902      	subs	r1, #2
  40c98e:	443d      	add	r5, r7
  40c990:	1aeb      	subs	r3, r5, r3
  40c992:	fa1f f588 	uxth.w	r5, r8
  40c996:	fbb3 f0f2 	udiv	r0, r3, r2
  40c99a:	fb02 3310 	mls	r3, r2, r0, r3
  40c99e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c9a2:	fb00 f30c 	mul.w	r3, r0, ip
  40c9a6:	42ab      	cmp	r3, r5
  40c9a8:	d907      	bls.n	40c9ba <__udivmoddi4+0x1e6>
  40c9aa:	19ed      	adds	r5, r5, r7
  40c9ac:	f100 38ff 	add.w	r8, r0, #4294967295
  40c9b0:	d26f      	bcs.n	40ca92 <__udivmoddi4+0x2be>
  40c9b2:	42ab      	cmp	r3, r5
  40c9b4:	d96d      	bls.n	40ca92 <__udivmoddi4+0x2be>
  40c9b6:	3802      	subs	r0, #2
  40c9b8:	443d      	add	r5, r7
  40c9ba:	1aeb      	subs	r3, r5, r3
  40c9bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40c9c0:	e78f      	b.n	40c8e2 <__udivmoddi4+0x10e>
  40c9c2:	f1c1 0720 	rsb	r7, r1, #32
  40c9c6:	fa22 f807 	lsr.w	r8, r2, r7
  40c9ca:	408b      	lsls	r3, r1
  40c9cc:	fa05 f401 	lsl.w	r4, r5, r1
  40c9d0:	ea48 0303 	orr.w	r3, r8, r3
  40c9d4:	fa20 fe07 	lsr.w	lr, r0, r7
  40c9d8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40c9dc:	40fd      	lsrs	r5, r7
  40c9de:	ea4e 0e04 	orr.w	lr, lr, r4
  40c9e2:	fbb5 f9fc 	udiv	r9, r5, ip
  40c9e6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40c9ea:	fb0c 5519 	mls	r5, ip, r9, r5
  40c9ee:	fa1f f883 	uxth.w	r8, r3
  40c9f2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40c9f6:	fb09 f408 	mul.w	r4, r9, r8
  40c9fa:	42ac      	cmp	r4, r5
  40c9fc:	fa02 f201 	lsl.w	r2, r2, r1
  40ca00:	fa00 fa01 	lsl.w	sl, r0, r1
  40ca04:	d908      	bls.n	40ca18 <__udivmoddi4+0x244>
  40ca06:	18ed      	adds	r5, r5, r3
  40ca08:	f109 30ff 	add.w	r0, r9, #4294967295
  40ca0c:	d243      	bcs.n	40ca96 <__udivmoddi4+0x2c2>
  40ca0e:	42ac      	cmp	r4, r5
  40ca10:	d941      	bls.n	40ca96 <__udivmoddi4+0x2c2>
  40ca12:	f1a9 0902 	sub.w	r9, r9, #2
  40ca16:	441d      	add	r5, r3
  40ca18:	1b2d      	subs	r5, r5, r4
  40ca1a:	fa1f fe8e 	uxth.w	lr, lr
  40ca1e:	fbb5 f0fc 	udiv	r0, r5, ip
  40ca22:	fb0c 5510 	mls	r5, ip, r0, r5
  40ca26:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40ca2a:	fb00 f808 	mul.w	r8, r0, r8
  40ca2e:	45a0      	cmp	r8, r4
  40ca30:	d907      	bls.n	40ca42 <__udivmoddi4+0x26e>
  40ca32:	18e4      	adds	r4, r4, r3
  40ca34:	f100 35ff 	add.w	r5, r0, #4294967295
  40ca38:	d229      	bcs.n	40ca8e <__udivmoddi4+0x2ba>
  40ca3a:	45a0      	cmp	r8, r4
  40ca3c:	d927      	bls.n	40ca8e <__udivmoddi4+0x2ba>
  40ca3e:	3802      	subs	r0, #2
  40ca40:	441c      	add	r4, r3
  40ca42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40ca46:	eba4 0408 	sub.w	r4, r4, r8
  40ca4a:	fba0 8902 	umull	r8, r9, r0, r2
  40ca4e:	454c      	cmp	r4, r9
  40ca50:	46c6      	mov	lr, r8
  40ca52:	464d      	mov	r5, r9
  40ca54:	d315      	bcc.n	40ca82 <__udivmoddi4+0x2ae>
  40ca56:	d012      	beq.n	40ca7e <__udivmoddi4+0x2aa>
  40ca58:	b156      	cbz	r6, 40ca70 <__udivmoddi4+0x29c>
  40ca5a:	ebba 030e 	subs.w	r3, sl, lr
  40ca5e:	eb64 0405 	sbc.w	r4, r4, r5
  40ca62:	fa04 f707 	lsl.w	r7, r4, r7
  40ca66:	40cb      	lsrs	r3, r1
  40ca68:	431f      	orrs	r7, r3
  40ca6a:	40cc      	lsrs	r4, r1
  40ca6c:	6037      	str	r7, [r6, #0]
  40ca6e:	6074      	str	r4, [r6, #4]
  40ca70:	2100      	movs	r1, #0
  40ca72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ca76:	4618      	mov	r0, r3
  40ca78:	e6f8      	b.n	40c86c <__udivmoddi4+0x98>
  40ca7a:	4690      	mov	r8, r2
  40ca7c:	e6e0      	b.n	40c840 <__udivmoddi4+0x6c>
  40ca7e:	45c2      	cmp	sl, r8
  40ca80:	d2ea      	bcs.n	40ca58 <__udivmoddi4+0x284>
  40ca82:	ebb8 0e02 	subs.w	lr, r8, r2
  40ca86:	eb69 0503 	sbc.w	r5, r9, r3
  40ca8a:	3801      	subs	r0, #1
  40ca8c:	e7e4      	b.n	40ca58 <__udivmoddi4+0x284>
  40ca8e:	4628      	mov	r0, r5
  40ca90:	e7d7      	b.n	40ca42 <__udivmoddi4+0x26e>
  40ca92:	4640      	mov	r0, r8
  40ca94:	e791      	b.n	40c9ba <__udivmoddi4+0x1e6>
  40ca96:	4681      	mov	r9, r0
  40ca98:	e7be      	b.n	40ca18 <__udivmoddi4+0x244>
  40ca9a:	4601      	mov	r1, r0
  40ca9c:	e778      	b.n	40c990 <__udivmoddi4+0x1bc>
  40ca9e:	3802      	subs	r0, #2
  40caa0:	443c      	add	r4, r7
  40caa2:	e745      	b.n	40c930 <__udivmoddi4+0x15c>
  40caa4:	4608      	mov	r0, r1
  40caa6:	e708      	b.n	40c8ba <__udivmoddi4+0xe6>
  40caa8:	f1a8 0802 	sub.w	r8, r8, #2
  40caac:	443d      	add	r5, r7
  40caae:	e72b      	b.n	40c908 <__udivmoddi4+0x134>

0040cab0 <__aeabi_idiv0>:
  40cab0:	4770      	bx	lr
  40cab2:	bf00      	nop
  40cab4:	454c4449 	.word	0x454c4449
  40cab8:	00000000 	.word	0x00000000
  40cabc:	51726d54 	.word	0x51726d54
  40cac0:	00000000 	.word	0x00000000
  40cac4:	20726d54 	.word	0x20726d54
  40cac8:	00637653 	.word	0x00637653

0040cacc <__FUNCTION__.11637>:
  40cacc:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  40cadc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40caec:	00005d64 61766e49 2064696c 54434f49     d]..Invalid IOCT
  40cafc:	6f63204c 6e616d6d 000a2164 0000000d     L command!......

0040cb0c <__FUNCTION__.9901>:
  40cb0c:	5f666968 646e6573 00000000              hif_send....

0040cb18 <__FUNCTION__.9911>:
  40cb18:	5f666968 00727369                       hif_isr.

0040cb20 <__FUNCTION__.9917>:
  40cb20:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0040cb30 <__FUNCTION__.9932>:
  40cb30:	5f666968 65636572 00657669              hif_receive.

0040cb3c <__FUNCTION__.9947>:
  40cb3c:	5f666968 69676572 72657473 0062635f     hif_register_cb.
  40cb4c:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
  40cb5c:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
  40cb6c:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
  40cb7c:	73657264 75622073 61662073 000a6c69     dress bus fail..
  40cb8c:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
  40cb9c:	6b636170 53207465 20657a69 7525203d     packet Size = %u
  40cbac:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
  40cbbc:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
  40cbcc:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
  40cbdc:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
  40cbec:	61207473 64207070 276e6469 65732074     st app didn't se
  40cbfc:	58522074 6e6f4420 00000a65 66696828     t RX Done...(hif
  40cc0c:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
  40cc1c:	66696828 61462029 2065736c 65746e69     (hif) False inte
  40cc2c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
  40cc3c:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
  40cc4c:	7265746e 74707572 67657220 0000000a     nterrupt reg....
  40cc5c:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
  40cc6c:	7075656b 65687420 69686320 00000a70     keup the chip...
  40cc7c:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
  40cc8c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
  40cc9c:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
  40ccac:	66696820 6365725f 65766965 6e49203a      hif_receive: In
  40ccbc:	696c6176 72612064 656d7567 000a746e     valid argument..
  40cccc:	20505041 75716552 65747365 69532064     APP Requested Si
  40ccdc:	6920657a 616c2073 72656772 61687420     ze is larger tha
  40ccec:	6874206e 65722065 65766963 75622064     n the recived bu
  40ccfc:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
  40cd0c:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
  40cd1c:	64412064 73657264 65622073 646e6f79     d Address beyond
  40cd2c:	65687420 63657220 64657669 66756220      the recived buf
  40cd3c:	20726566 72646461 20737365 20646e61     fer address and 
  40cd4c:	676e656c 000a6874 20705247 6425203f     length..GRp ? %d
  40cd5c:	0000000a 46494828 69614629 6f74206c     ....(HIF)Fail to
  40cd6c:	6b617720 74207075 63206568 0a706968      wakup the chip.
  40cd7c:	00000000                                ....

0040cd80 <__FUNCTION__.9874>:
  40cd80:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0040cd8c <__FUNCTION__.9898>:
  40cd8c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0040cd9c <__FUNCTION__.9926>:
  40cd9c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  40cdac:	0063735f 50504128 4e492829 00294f46     _sc.(APP)(INFO).
  40cdbc:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
  40cdcc:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
  40cddc:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
  40cdec:	000a6425 2079654b 6e207369 7620746f     %d..Key is not v
  40cdfc:	64696c61 0000000a 61766e49 2064696c     alid....Invalid 
  40ce0c:	0a79654b 00000000 44495353 4e454c20     Key.....SSID LEN
  40ce1c:	564e4920 44494c41 0000000a 49204843      INVALID....CH I
  40ce2c:	4c41564e 000a4449 61766e49 2064696c     NVALID..Invalid 
  40ce3c:	20706557 2079656b 65646e69 64252078     Wep key index %d
  40ce4c:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
  40ce5c:	2079656b 676e656c 25206874 00000a64     key length %d...
  40ce6c:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
  40ce7c:	656c2079 6874676e 0000000a 65646e75     y length....unde
  40ce8c:	656e6966 65732064 79742063 000a6570     fined sec type..
  40ce9c:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  40ceac:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  40cebc:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  40cecc:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  40cedc:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  40ceec:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  40cefc:	7277616d 65562065 6f697372 00000a6e     mawre Version...

0040cf0c <__FUNCTION__.9711>:
  40cf0c:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0040cf1c <__FUNCTION__.9805>:
  40cf1c:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
  40cf2c:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  40cf3c:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  40cf4c:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  40cf5c:	00000000 6f727245 68772072 20656c69     ....Error while 
  40cf6c:	64616572 20676e69 0a676572 00000000     reading reg.....
  40cf7c:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  40cf8c:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40cf9c:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  40cfac:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40cfbc:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  40cfcc:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  40cfdc:	0000000a 3a676572 2f207825 20782520     ....reg:%x / %x 
  40cfec:	0000000a                                ....

0040cff0 <__FUNCTION__.9792>:
  40cff0:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040cffc <__FUNCTION__.9799>:
  40cffc:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
  40d00c:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
  40d01c:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
  40d02c:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
  40d03c:	73616c66 69642068 6c626173 61662065     flash disable fa
  40d04c:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
  40d05c:	6c696166 696e6920 75622074 00000a73     fail init bus...
  40d06c:	6c696166 74206465 6e65206f 656c6261     failed to enable
  40d07c:	746e6920 75727265 2e737470 00000a2e      interrupts.....
  40d08c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40d09c:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  40d0ac:	20444920 0a786c25 00000000               ID %lx.....

0040d0b8 <__FUNCTION__.9176>:
  40d0b8:	5f697073 00646d63                       spi_cmd.

0040d0c0 <__FUNCTION__.9184>:
  40d0c0:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040d0cc <__FUNCTION__.9200>:
  40d0cc:	5f697073 61746164 6165725f 00000064     spi_data_read...

0040d0dc <__FUNCTION__.9215>:
  40d0dc:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040d0ec <__FUNCTION__.9225>:
  40d0ec:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040d0fc <__FUNCTION__.9233>:
  40d0fc:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0040d10c <__FUNCTION__.9242>:
  40d10c:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0040d11c <__FUNCTION__.9250>:
  40d11c:	735f6d6e 725f6970 00646165              nm_spi_read.

0040d128 <__FUNCTION__.9267>:
  40d128:	735f6d6e 695f6970 0074696e              nm_spi_init.

0040d134 <crc7_syndrome_table>:
  40d134:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  40d144:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  40d154:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  40d164:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  40d174:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  40d184:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  40d194:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  40d1a4:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  40d1b4:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  40d1c4:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  40d1d4:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  40d1e4:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  40d1f4:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  40d204:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  40d214:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  40d224:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
  40d234:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d244:	6e692064 6e726574 72206c61 20646165     d internal read 
  40d254:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  40d264:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  40d274:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  40d284:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d294:	6e692064 6e726574 72206c61 20646165     d internal read 
  40d2a4:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  40d2b4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d2c4:	6e692064 6e726574 77206c61 65746972     d internal write
  40d2d4:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  40d2e4:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d2f4:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  40d304:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  40d314:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d324:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  40d334:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  40d344:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d354:	65722064 6e6f7073 202c6573 64616572     d response, read
  40d364:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  40d374:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d384:	656c6961 6c622064 206b636f 61746164     ailed block data
  40d394:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  40d3a4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d3b4:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  40d3c4:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  40d3d4:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  40d3e4:	7220646d 6f707365 2c65736e 69727720     md response, wri
  40d3f4:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  40d404:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d414:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40d424:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  40d434:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40d444:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40d454:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  40d464:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40d474:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d484:	61642064 62206174 6b636f6c 63726320     d data block crc
  40d494:	69727720 202c6574 20737562 6f727265      write, bus erro
  40d4a4:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  40d4b4:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40d4c4:	61746164 69727720 2e2e6574 00000a2e     data write......
  40d4d4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d4e4:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  40d4f4:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  40d504:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d514:	65722064 6e6f7073 72206573 2c646165     d response read,
  40d524:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40d534:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d544:	61642064 72206174 6f707365 2065736e     d data response 
  40d554:	64616572 7562202c 72652073 2e726f72     read, bus error.
  40d564:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d574:	656c6961 61642064 72206174 6f707365     ailed data respo
  40d584:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  40d594:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  40d5a4:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40d5b4:	61657220 62202c64 65207375 726f7272      read, bus error
  40d5c4:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  40d5d4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40d5e4:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  40d5f4:	65207375 726f7272 0a2e2e2e 00000000     us error........
  40d604:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d614:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  40d624:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  40d634:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d644:	65722064 6e6f7073 202c6573 64616572     d response, read
  40d654:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  40d664:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d674:	61642064 72206174 2e646165 000a2e2e     d data read.....
  40d684:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d694:	6d632064 77202c64 65746972 67657220     d cmd, write reg
  40d6a4:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
  40d6b4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d6c4:	65722064 6e6f7073 202c6573 74697277     d response, writ
  40d6d4:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
  40d6e4:	00000000 52524528 75432952 6e657272     ....(ERRR)Curren
  40d6f4:	253c2074 000a3e64 57202d2d 31434e49     t <%d>..-- WINC1
  40d704:	20303035 74616577 20726568 65696c63     500 weather clie
  40d714:	6520746e 706d6178 2d20656c 2d0a0d2d     nt example --..-
  40d724:	4153202d 3037454d 4c50582d 2d2d2044     - SAME70-XPLD --
  40d734:	2d2d0a0d 6d6f4320 656c6970 4a203a64     ..-- Compiled: J
  40d744:	20206e75 30322031 31203931 38333a36     un  1 2019 16:38
  40d754:	2037353a 0a0d2d2d 00000000 69666957     :57 --......Wifi
  40d764:	00000000 6c696146 74206465 7263206f     ....Failed to cr
  40d774:	65746165 66695720 61742069 0a0d6b73     eate Wifi task..
  40d784:	00000000 756c6156 00007365 6c696146     ....Values..Fail
  40d794:	74206465 7263206f 65746165 6c617620     ed to create val
  40d7a4:	20736575 6b736174 00000a0d 6f736572     ues task....reso
  40d7b4:	5f65766c 203a6263 49207325 64612050     lve_cb: %s IP ad
  40d7c4:	73657264 73692073 2e642520 252e6425     dress is %d.%d.%
  40d7d4:	64252e64 0a0d0a0d 00000000 6b636f73     d.%d........sock
  40d7e4:	6d5f7465 635f6773 656e6e6f 000a7463     et_msg_connect..
  40d7f4:	20544547 2069682f 50545448 312e312f     GET /hi HTTP/1.1
  40d804:	41200a0d 70656363 2a203a74 0a0d2a2f     .. Accept: */*..
  40d814:	00000a0d 646e6573 00000a20 6b636f73     ....send ...sock
  40d824:	635f7465 63203a62 656e6e6f 65207463     et_cb: connect e
  40d834:	726f7272 000a0d21 6b636f73 635f7465     rror!...socket_c
  40d844:	72203a62 20766365 6f727265 0a0d2172     b: recv error!..
  40d854:	00000000 41424d45 00004352 20544547     ....EMBARC..GET 
  40d864:	6e6f632f 7463656e 6d69743f 61747365     /connect?timesta
  40d874:	253d706d 616d2664 6e696863 73253d65     mp=%d&machine=%s
  40d884:	67696426 6c617469 2664253d 6c616e61     &digital=%d&anal
  40d894:	253d676f 54482064 312f5054 0a0d312e     og=%d HTTP/1.1..
  40d8a4:	63634120 3a747065 2a2f2a20 0a0d0a0d      Accept: */*....
  40d8b4:	00000000 000a7325 6e69616d 326d203a     ....%s..main: m2
  40d8c4:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
  40d8d4:	72726520 2821726f 0d296425 0000000a      error!(%d).....
  40d8e4:	74736554 6d655f65 63726162 736f6461     Teste_embarcados
  40d8f4:	00000000 6e69616d 6f63203a 63656e6e     ....main: connec
  40d904:	676e6974 206f7420 69466957 20504120     ting to WiFi AP 
  40d914:	2e2e7325 000a0d2e 6761706f 6e676e61     %s......opagangn
  40d924:	00006d61 2e323931 2e383631 312e3334     am..192.168.43.1
  40d934:	00003039 74656e49 6f746120 203a206e     90..Inet aton : 
  40d944:	00006425 6b636f73 69207465 2074696e     %d..socket init 
  40d954:	0000000a 6e69616d 6166203a 64656c69     ....main: failed
  40d964:	206f7420 61657263 54206574 63205043      to create TCP c
  40d974:	6e65696c 6f732074 74656b63 72726520     lient socket err
  40d984:	0d21726f 0000000a 6b636f73 63207465     or!.....socket c
  40d994:	656e6e6f 6e697463 00000a67 6f727265     onnecting...erro
  40d9a4:	00000a72 63617473 766f206b 6c667265     r...stack overfl
  40d9b4:	2520776f 73252078 00000a0d 69666977     ow %x %s....wifi
  40d9c4:	3a62635f 4d324d20 4649575f 4f435f49     _cb: M2M_WIFI_CO
  40d9d4:	43454e4e 0d444554 0000000a 69666977     NNECTED.....wifi
  40d9e4:	3a62635f 4d324d20 4649575f 49445f49     _cb: M2M_WIFI_DI
  40d9f4:	4e4f4353 5443454e 0a0d4445 00000000     SCONNECTED......
  40da04:	69666977 3a62635f 20504920 72646461     wifi_cb: IP addr
  40da14:	20737365 25207369 75252e75 2e75252e     ess is %u.%u.%u.
  40da24:	0a0d7525 00000000                       %u......

0040da2c <_global_impure_ptr>:
  40da2c:	20400030 00464e49 00666e69 004e414e     0.@ INF.inf.NAN.
  40da3c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40da4c:	46454443 00000000 33323130 37363534     CDEF....01234567
  40da5c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40da6c:	0000296c 00000030                       l)..0...

0040da74 <blanks.7223>:
  40da74:	20202020 20202020 20202020 20202020                     

0040da84 <zeroes.7224>:
  40da84:	30303030 30303030 30303030 30303030     0000000000000000

0040da94 <blanks.7217>:
  40da94:	20202020 20202020 20202020 20202020                     

0040daa4 <zeroes.7218>:
  40daa4:	30303030 30303030 30303030 30303030     0000000000000000
  40dab4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40dac4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  40dad4:	00000000                                ....

0040dad8 <__mprec_bigtens>:
  40dad8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40dae8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40daf8:	7f73bf3c 75154fdd                       <.s..O.u

0040db00 <__mprec_tens>:
  40db00:	00000000 3ff00000 00000000 40240000     .......?......$@
  40db10:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40db20:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40db30:	00000000 412e8480 00000000 416312d0     .......A......cA
  40db40:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40db50:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40db60:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40db70:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40db80:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40db90:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40dba0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40dbb0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40dbc0:	79d99db4 44ea7843                       ...yCx.D

0040dbc8 <p05.6055>:
  40dbc8:	00000005 00000019 0000007d              ........}...

0040dbd4 <_ctype_>:
  40dbd4:	20202000 20202020 28282020 20282828     .         ((((( 
  40dbe4:	20202020 20202020 20202020 20202020                     
  40dbf4:	10108820 10101010 10101010 10101010      ...............
  40dc04:	04040410 04040404 10040404 10101010     ................
  40dc14:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40dc24:	01010101 01010101 01010101 10101010     ................
  40dc34:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40dc44:	02020202 02020202 02020202 10101010     ................
  40dc54:	00000020 00000000 00000000 00000000      ...............
	...

0040dcd8 <_init>:
  40dcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40dcda:	bf00      	nop
  40dcdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40dcde:	bc08      	pop	{r3}
  40dce0:	469e      	mov	lr, r3
  40dce2:	4770      	bx	lr

0040dce4 <__init_array_start>:
  40dce4:	00408e55 	.word	0x00408e55

0040dce8 <__frame_dummy_init_array_entry>:
  40dce8:	00400165                                e.@.

0040dcec <_fini>:
  40dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40dcee:	bf00      	nop
  40dcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40dcf2:	bc08      	pop	{r3}
  40dcf4:	469e      	mov	lr, r3
  40dcf6:	4770      	bx	lr

0040dcf8 <__fini_array_start>:
  40dcf8:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <egstrNmBusCapabilities>:
20400010:	1000 0000                                   ....

20400014 <clk_status_reg_adr>:
20400014:	000f 0000                                   ....

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <tcp_client_socket>:
20400020:	00ff 0000                                   ....

20400024 <timestamp>:
20400024:	d1b9 5cf2                                   ...\

20400028 <_impure_ptr>:
20400028:	0030 2040 0000 0000                         0.@ ....

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__atexit_recursive_mutex>:
20400458:	cbc0 2040                                   ..@ 

2040045c <__global_locale>:
2040045c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040047c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040049c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040051c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040053c:	bb8d 0040 ade9 0040 0000 0000 dbd4 0040     ..@...@.......@.
2040054c:	dad0 0040 d8b4 0040 d8b4 0040 d8b4 0040     ..@...@...@...@.
2040055c:	d8b4 0040 d8b4 0040 d8b4 0040 d8b4 0040     ..@...@...@...@.
2040056c:	d8b4 0040 d8b4 0040 ffff ffff ffff ffff     ..@...@.........
2040057c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c8 <__malloc_av_>:
	...
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 

204009d0 <__malloc_sbrk_base>:
204009d0:	ffff ffff                                   ....

204009d4 <__malloc_trim_threshold>:
204009d4:	0000 0002                                   ....
